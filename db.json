{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/about/favicon.ico","path":"about/favicon.ico","modified":1,"renderable":0},{"_id":"source/categories/favicon.ico","path":"categories/favicon.ico","modified":1,"renderable":0},{"_id":"source/tags/favicon.ico","path":"tags/favicon.ico","modified":1,"renderable":0},{"_id":"source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":0},{"_id":"themes/next/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"source/about/img/smile.png","path":"about/img/smile.png","modified":1,"renderable":0},{"_id":"source/about/img/cat.jpg","path":"about/img/cat.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon.ico","path":"images/favicon.ico","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"source/images/2b.jpg","path":"images/2b.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"source/images/2b_round.jpg","path":"images/2b_round.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1505810453451},{"_id":"source/CNAME","hash":"5d0db4fdd5381755d6039dead9d537bdeaec322c","modified":1505791341127},{"_id":"source/404.html","hash":"becf457b62ea83d8dda14619adf4211a4be8f246","modified":1505807448006},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1505795968701},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1505795968693},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1505795968698},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1505795968721},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1505795968726},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1505795968729},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1505795968737},{"_id":"themes/next/.travis.yml","hash":"6674fbdfe0d0c03b8a04527ffb8ab66a94253acd","modified":1505795968741},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1505795968733},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1505795968745},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1505795968765},{"_id":"themes/next/_config.yml","hash":"0b5a72f686b6ae05e585fd4713b344d15719c955","modified":1505986517832},{"_id":"themes/next/README.cn.md","hash":"59e323ce21535d561507c9ecc984b7c4dcb61514","modified":1505795968750},{"_id":"themes/next/README.md","hash":"52bad95ac4c88371d3ae9d9ea6e0e14b8c723edf","modified":1505795968755},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1505795968770},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1505795969348},{"_id":"source/_posts/Android基础-二.md","hash":"79b99ef1ca46cb9a6e27e0608a3da471ca947b0e","modified":1505814166893},{"_id":"source/_posts/Markdown基础语法.md","hash":"0344844b116d07d21431a4a5c6e26e956738a6b8","modified":1505966833970},{"_id":"source/_posts/Android百大框架排行榜.md","hash":"26c48334764e4b7f4e59439185e0d1e9da968f1d","modified":1508344389620},{"_id":"source/_posts/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1505810453451},{"_id":"source/_posts/面向对象编程的特殊理解.md","hash":"dde49c28045f6097937da2b00a914cd19f0138f9","modified":1508477036368},{"_id":"source/about/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1505810453451},{"_id":"source/categories/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1505810453451},{"_id":"source/_posts/最后的问题.md","hash":"92d790c636cfbae5b126b4ef1c7ab21cea4c4161","modified":1505983600289},{"_id":"source/_posts/Android基础-一.md","hash":"613f7105a38246c0061a590586fec9f3166be5ef","modified":1505813877351},{"_id":"source/about/index.md","hash":"c9a8628f600f692fafc1a618160dc275ee0a0934","modified":1505821285472},{"_id":"source/_posts/利用Github与hexo搭建个人博客的简单步骤.md","hash":"1c30034785893c03688d0cf5af9407ada5346c28","modified":1505976493609},{"_id":"source/categories/index.md","hash":"e4a5bc0adea0b2b7f7233c6176e296dc4e9fd368","modified":1505814720485},{"_id":"source/tags/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1505810453451},{"_id":"source/images/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1505810453451},{"_id":"source/tags/index.md","hash":"f4781af11ca18b3839fad552c87063a9b3ba4297","modified":1505814768093},{"_id":"themes/next/.git/config","hash":"8e94cc015a498d35202e9fd57e44b3c51e1e5634","modified":1505795968682},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1505795968665},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1505795739942},{"_id":"themes/next/.git/packed-refs","hash":"b50e5af8f9e3efe900146b81a954984cdd24e22e","modified":1505795968653},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1505795968705},{"_id":"themes/next/.git/index","hash":"405bf41f4e9f3f18d4b8c2001f98b9de6df8e2e2","modified":1505795971173},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"81dbdf09454cb26f9fd2e3ed1bf3df5af8a528fd","modified":1505795968710},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"73db9eb65b56725733426f203c6077f954048dee","modified":1505795968715},{"_id":"themes/next/languages/de.yml","hash":"fd02d9c2035798d5dc7c1a96b4c3e24b05b31a47","modified":1505795968774},{"_id":"themes/next/languages/default.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1505795968778},{"_id":"themes/next/languages/en.yml","hash":"b3bcd8934327448a43d9bfada5dd11b1b8c1402e","modified":1505795968779},{"_id":"themes/next/languages/it.yml","hash":"a215d016146b1bd92cef046042081cbe0c7f976f","modified":1505795968793},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1505795968717},{"_id":"themes/next/languages/fr-FR.yml","hash":"efeeb55d5c4add54ad59a612fc0630ee1300388c","modified":1505795968785},{"_id":"themes/next/languages/id.yml","hash":"dccae33e2a5b3c9f11c0e05ec4a7201af1b25745","modified":1505795968789},{"_id":"themes/next/languages/pt.yml","hash":"2efcd240c66ab1a122f061505ca0fb1e8819877b","modified":1505795968813},{"_id":"themes/next/languages/pt-BR.yml","hash":"568d494a1f37726a5375b11452a45c71c3e2852d","modified":1505795968808},{"_id":"themes/next/languages/ko.yml","hash":"dc8f3e8c64eb7c4bb2385025b3006b8efec8b31d","modified":1505795968804},{"_id":"themes/next/languages/ru.yml","hash":"e33ee44e80f82e329900fc41eb0bb6823397a4d6","modified":1505795968817},{"_id":"themes/next/languages/ja.yml","hash":"37f954e47a3bc669620ca559e3edb3b0072a4be5","modified":1505795968800},{"_id":"themes/next/languages/zh-Hans.yml","hash":"d67814aac494999f19256e27aec9e89cc9586a8a","modified":1505812413329},{"_id":"themes/next/languages/zh-hk.yml","hash":"19fb3c159fa6f4d58237e5a1a3857048a6add9a6","modified":1505795968825},{"_id":"themes/next/languages/zh-tw.yml","hash":"64a16181fcc3779ea335792c22fda3b5202e3e9e","modified":1505795968829},{"_id":"themes/next/layout/_layout.swig","hash":"93cbcf841d9df0de44c2863f7ab21b48cbcd6255","modified":1505809960544},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1505795969321},{"_id":"themes/next/scripts/merge-configs.js","hash":"5758f8f3f12d17bc80da65bb808a20b3a8aae186","modified":1505795969355},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1505795969325},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1505795969328},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1505795969371},{"_id":"themes/next/layout/post.swig","hash":"dd24412a52311c85415054738e711c810653688d","modified":1505795969336},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1505795969340},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1505795969332},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1505795969344},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1505795971142},{"_id":"themes/next/source/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1505810453451},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505795969930},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1505795971154},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1505795971167},{"_id":"source/about/img/smile.png","hash":"358fdae794e081373f9edcdf2a9430b67167a539","modified":1505819474557},{"_id":"source/about/img/cat.jpg","hash":"999c567ceb59a3c34358a39af2b1483dbc61b644","modified":1505821033255},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1505795739954},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1505795739949},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1505795739947},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1505795739959},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1505795739962},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1505795739957},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1505795739956},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1505795739969},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1505795739980},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1505795739981},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1505795968844},{"_id":"themes/next/.git/logs/HEAD","hash":"424edf4358a4f9d3ce618fda78e57d7bf1ba602c","modified":1505795968671},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1505795968859},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1505795739961},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1505795968840},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1505795968830},{"_id":"themes/next/layout/_partials/comments.swig","hash":"fc0ff72b3a8ab25029a070acee066d9eaa0b0493","modified":1505795968873},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1505795968830},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"0d78052679a4f913a5338b66e0cc624c6eb1254b","modified":1505795968865},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1505795968869},{"_id":"themes/next/layout/_macro/post.swig","hash":"9896b34a7edc112c03b393a1602a616710a66ae1","modified":1505795968855},{"_id":"themes/next/layout/_partials/footer.swig","hash":"7b9012b21906068aef8e19a281200f81bb5ae155","modified":1505812103177},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1505795968903},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1505795968899},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1505795968907},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1505795968975},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1505795968911},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1505795969204},{"_id":"themes/next/layout/_partials/head.swig","hash":"71040aa738c57c24f8b703875d58ab7a262fe075","modified":1505795968887},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1505795968979},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1505795968997},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1505795969207},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1505795969255},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1505795969408},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1505795969386},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1505795969400},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1505795969421},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1505795969436},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1505795969428},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1505795969443},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1505795969453},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1505795969379},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1505795969232},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1505795969222},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1505795969935},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1505795969936},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1505795969250},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1505795969930},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1505795969947},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1505795969942},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1505795969952},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1505795969967},{"_id":"themes/next/source/images/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1505810453451},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1505795969972},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1505795969973},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1505795969974},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1505795969983},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1505795969957},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1505795969963},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1505795969978},{"_id":"source/images/2b.jpg","hash":"5bf17207a55d7cc547d8864426fb14152d55381e","modified":1502004243575},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1505795969982},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505795968987},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505795968987},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505795969776},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505795969776},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505795969788},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505795969907},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1505795969923},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1505795968891},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1505795968895},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1505795968933},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1505795968915},{"_id":"themes/next/.git/refs/heads/master","hash":"3c0f00866e447c5aac0d0f5a19f64e784b90f7b0","modified":1505795968670},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1505795968983},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1505795968929},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1505795968961},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1505795968925},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1505795968988},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1505795968971},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1505795968986},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1505795969001},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1505795969031},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1505795968957},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1505795969027},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1505795969059},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1505795969013},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1505795969034},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1505795969044},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1505795969054},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1505795969096},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1505795969107},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1505795969117},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1505795969081},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1505795969174},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1505795969152},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1505795969163},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"602104d7ac47f7888d97e810419e58593a79e8ba","modified":1505795969196},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1505795969187},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1505795969200},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"92ea45b877b1fec2010c7b409f121c986ee5075b","modified":1505795969178},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1505795969269},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1505795969142},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1505795969772},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1505795969305},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1505795969316},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"7896c3ee107e1a8b9108b6019f1c070600a1e8cc","modified":1505795969780},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1505795969776},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"38a9f43973704afe7e8ca50f35a25940ea96e3cf","modified":1505795969900},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1505795969788},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1505795969293},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1505795969914},{"_id":"themes/next/source/css/_variables/base.styl","hash":"68c87734324408ae6d4560da1082168ea83ba2c1","modified":1505795969923},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1505795969906},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"0289031200c3d4c2bdd801ee10fff13bb2c353e4","modified":1505795970023},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1505795970014},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1505795970002},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1505795970036},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1505795970047},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1505795970063},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1505795970092},{"_id":"themes/next/source/js/src/motion.js","hash":"6d34f2a6ea6d73f7715d00f8b175854cd02baa36","modified":1505795970079},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1505795970109},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1505795970453},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1505795970129},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1505795970238},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1505795970462},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1505795970144},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1505795970631},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1505795970643},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1505795970638},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1505795970570},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1505795970635},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1505795970647},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1505795970584},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1505795970574},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1505795970466},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1505795970581},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1505795970470},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1505795970805},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1505795970711},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1505795970809},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1505795970826},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1505795970814},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1505795970818},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1505795970822},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1505795970830},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1505795970837},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1505795970842},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1505795970834},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1505795970854},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1505795970850},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1505795970846},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1505795970771},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1505795970765},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1505795970775},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1505795970756},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1505795970877},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1505795970801},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1505795970916},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1505795970897},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1505795971064},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1505795970790},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1505795970936},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1505795971137},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1505795971110},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1505795971123},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1505795971060},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1505795970752},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"424edf4358a4f9d3ce618fda78e57d7bf1ba602c","modified":1505795968673},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1505795968663},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1505795969265},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1505795969260},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1505795969457},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1505795969461},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1505795969468},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1505795969464},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"4f2801fc4cf3f31bf2069f41db8c6ce0e3da9e39","modified":1505795969534},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1505795969472},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1505795969647},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"24ee4b356ff55fc6e58f26a929fa07750002cf29","modified":1505795969739},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1505795969752},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1505795969746},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1505795969757},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1505795969763},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1505795969766},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1505795969852},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1505795969856},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1505795969735},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1505795969861},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1505795969866},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1505795969860},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1505795969871},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1505795969879},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1505795969894},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"24617c40a0d9b5e516d9500a45bc47cb995f325e","modified":1505795969890},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1505795969875},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1505795969883},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1505795969794},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1505795969810},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1505795969800},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1505795969807},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1505795969830},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1505795969817},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4c7247a1df6d25e1d94ae4409767c6dce86a0130","modified":1505795969824},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1505795969837},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1505795970174},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1505795970210},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1505795970100},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1505795970233},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1505795970655},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1505795970652},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1505795970660},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1505795970472},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1505795970474},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1505795970471},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1505795970475},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1505795970477},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1505795970476},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1505795970528},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1505795970600},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1505795970546},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1505795971055},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1505795970566},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1505795970627},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1505795971041},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1505795970204},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1505795970702},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1505795970707},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1505795971087},{"_id":"themes/next/.git/objects/pack/pack-1d8e82ce6ff9b437c3d366c189c5242fc76cc76f.idx","hash":"f48687362de1bf7d60e09001676ea8317d416584","modified":1505795968608},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"424edf4358a4f9d3ce618fda78e57d7bf1ba602c","modified":1505795968660},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1505795969480},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"9f73c4696f0907aa451a855444f88fc0698fa472","modified":1505795969476},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1505795969490},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1505795969497},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1505795969483},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1505795969501},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1505795969493},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1505795969506},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1505795969509},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1505795969517},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1505795969527},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"b6f3a06a94a6ee5470c956663164d58eda818a64","modified":1505795969513},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1505795969523},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1505795969538},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1505795969549},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1505795969553},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1505795969531},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1505795969545},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1505795969572},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"37c7d10289df2deded057545ece3f652dbd18757","modified":1505795969560},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d0d7a5c90d62b685520d2b47fea8ba6019ff5402","modified":1505795969569},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1505795969564},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ca88ea6999a61fb905eb6e72eba5f92d4ee31e6e","modified":1505795969576},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"ccb34c52be8adba5996c6b94f9e723bd07d34c16","modified":1505795969588},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1505795969584},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1505795969580},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfe6d162b4647aeadee109d06bb314ea252f6904","modified":1505795969602},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1505795969598},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"39f04c4c7237a4e10acd3002331992b79945d241","modified":1505802425841},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"a6ebfde92ee024dd0f40f5c99202f8171a189202","modified":1505809711412},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"8dd9a1c6f4f6baa00c2cf01837e7617120cf9660","modified":1505795969614},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1505795969621},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1505795969594},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1505795969636},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1505795969617},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1505795969632},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1505795969640},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1505795969654},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1505795969643},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1505795969671},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1505795969660},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1505795969675},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1505795969679},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1505795969667},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1505795969683},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1505795969699},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1505795969628},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1505795969694},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1505795969703},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1505795969691},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1505795969724},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1505795969712},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1505795969720},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1505795969716},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1505795969728},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1505795969867},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1505795969845},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1505795969841},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1505795970150},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1505795970164},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1505795969707},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1505795970667},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1505795970153},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1505795970673},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1505795970697},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1505795970160},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1505795970482},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1505795970478},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1505795970169},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1505795970505},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1505795970509},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1505795970494},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1505795970524},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1505795970690},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1505795970442},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1505795971025},{"_id":"source/images/2b_round.jpg","hash":"5a4173f7234a794ae7d8db2b9bb5f2ade6fc855c","modified":1505798893327},{"_id":"themes/next/.git/objects/pack/pack-1d8e82ce6ff9b437c3d366c189c5242fc76cc76f.pack","hash":"644980f444980987932cc62871b580a1bac29fef","modified":1505795968616},{"_id":"public/baidusitemap.xml","hash":"46c2819bade16aad9c13b349b2616fecff017a58","modified":1508477058679},{"_id":"public/sitemap.xml","hash":"971937cd3d3fca3606d3620ce0d87be390955d13","modified":1508477058688},{"_id":"public/404.html","hash":"61bcd162f9a247490504b63d9734a20dc77db176","modified":1508477058694},{"_id":"public/about/index.html","hash":"a6783b10f07868739664140eb80b11829fa10643","modified":1508477058694},{"_id":"public/categories/index.html","hash":"05649e1e10c3a1d18d135baf46ec4c467ecd48cf","modified":1508477058695},{"_id":"public/tags/index.html","hash":"a4a8065ab34fc6298a3331f7a6e392508ad24c80","modified":1508477058695},{"_id":"public/2017/09/21/最后的问题/index.html","hash":"8e422a0fe934f41a1bcb9434eebf6a2462a90ed6","modified":1508477058695},{"_id":"public/2017/09/21/利用Github与hexo搭建个人博客的简单步骤/index.html","hash":"e45f9c40f67368e53299ae280c0e6cd1e8a89568","modified":1508477058695},{"_id":"public/2017/09/19/Android基础-二/index.html","hash":"f85d44527a73ec9288fd74b86c8bdfcf7b4e6254","modified":1508477058695},{"_id":"public/2017/09/19/Android基础-一/index.html","hash":"7036f4d0d660b183f81f3572ed9d4061277100b3","modified":1508477058695},{"_id":"public/2017/06/18/Android百大框架排行榜/index.html","hash":"378dd85bfd591f03334cc7f805294ac54c0e4851","modified":1508477058695},{"_id":"public/2016/02/10/面向对象编程的特殊理解/index.html","hash":"a4b2a0a50808067a6902b61c573fc014c6c9dec0","modified":1508477058695},{"_id":"public/2015/04/19/Markdown基础语法/index.html","hash":"6249dd604c8d4bab2661e30435673e8ea12a2d75","modified":1508477058695},{"_id":"public/archives/index.html","hash":"f2ae342d76f0bc9edf075a5eba1d4a24b308b39d","modified":1508477058695},{"_id":"public/archives/2015/index.html","hash":"9e6f141fdd49eac1c06b526ebc54d8fc91e80a0b","modified":1508477058696},{"_id":"public/archives/2015/04/index.html","hash":"451f68a6b4755d23214d8488e8764c3f95f8c019","modified":1508477058696},{"_id":"public/archives/2016/index.html","hash":"5d11fa5e0fbd6f7f5ac09b7449b9932058797382","modified":1508477058696},{"_id":"public/archives/2016/02/index.html","hash":"7e463bda8adbb617429895e38ea22ae6084863e1","modified":1508477058696},{"_id":"public/archives/2017/index.html","hash":"091f87d0af1a454c35dd7a67215836f9d2457921","modified":1508477058696},{"_id":"public/archives/2017/06/index.html","hash":"a2a95c0f94d364c1ef1bed3cdf954f3e1cc1b616","modified":1508477058696},{"_id":"public/archives/2017/09/index.html","hash":"a084b5bc281ad383213044022e750c35da782db4","modified":1508477058696},{"_id":"public/categories/android/index.html","hash":"0a12f20d85d6b5e5613950b58625651f2104863b","modified":1508477058696},{"_id":"public/categories/markdown/index.html","hash":"697523ea9890b66227bcdae41d2beb86be709c72","modified":1508477058696},{"_id":"public/categories/java/index.html","hash":"79addfa9dec37c9d46920e2b7930412b69fbfb5c","modified":1508477058696},{"_id":"public/categories/novel/index.html","hash":"88b14d586cac1b482837fe51cfff98bda103fad6","modified":1508477058696},{"_id":"public/categories/hexo/index.html","hash":"90c0c8ea965ce22fc49f40007ff492d2cfd585ff","modified":1508477058696},{"_id":"public/index.html","hash":"9d23087d6407bd49a7be8eed231f46600e51f165","modified":1508477058697},{"_id":"public/tags/markdown/index.html","hash":"314a5e8444bc40e0d87c92da70fdddfbf458ab01","modified":1508477058697},{"_id":"public/tags/android/index.html","hash":"df7e34abe61527b9f1e39aa23dc87ebb9485db0a","modified":1508477058697},{"_id":"public/tags/java/index.html","hash":"319eea3a602641b64589a4708def50f6d3d1e527","modified":1508477058697},{"_id":"public/tags/阿西莫夫/index.html","hash":"9f2460018337085a60d1552609be0fbca1e7313f","modified":1508477058697},{"_id":"public/tags/hexo/index.html","hash":"4fd1e5b839b7af201cfc61fc3789df3b866a51cf","modified":1508477058697},{"_id":"public/CNAME","hash":"5d0db4fdd5381755d6039dead9d537bdeaec322c","modified":1508477058707},{"_id":"public/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1508477058707},{"_id":"public/about/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1508477058707},{"_id":"public/categories/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1508477058707},{"_id":"public/tags/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1508477058707},{"_id":"public/images/favicon.ico","hash":"79c6b1ca218f7d129ee975a89c2a0bf8525bb447","modified":1508477058715},{"_id":"public/about/img/smile.png","hash":"358fdae794e081373f9edcdf2a9430b67167a539","modified":1508477058715},{"_id":"public/about/img/cat.jpg","hash":"999c567ceb59a3c34358a39af2b1483dbc61b644","modified":1508477058715},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1508477058715},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1508477058715},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1508477058715},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1508477058715},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1508477058715},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1508477058715},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1508477058715},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508477058715},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1508477058715},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1508477058715},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1508477058715},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1508477058715},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1508477058715},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1508477058715},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1508477058715},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1508477058715},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1508477058715},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1508477058715},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1508477058715},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1508477058715},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1508477058715},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1508477058715},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1508477058715},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1508477058715},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1508477058715},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1508477058715},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1508477058715},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1508477058715},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1508477058715},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1508477061018},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1508477061026},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1508477061042},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1508477061042},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1508477061042},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1508477061042},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1508477061042},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1508477061042},{"_id":"public/js/src/post-details.js","hash":"0693695a9512641daff63d99da772625a058ab18","modified":1508477061042},{"_id":"public/js/src/motion.js","hash":"da146caf488078a634d961debf2a71ce4106018c","modified":1508477061042},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1508477061042},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1508477061042},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1508477061042},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1508477061042},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"7fd2f3e2773555392ef40df40cae3bedb884f17a","modified":1508477061042},{"_id":"public/js/src/utils.js","hash":"2917c39c75b14b6dab7e1c46ab4d87b4df9fcd5d","modified":1508477061042},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1508477061042},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1508477061042},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1508477061042},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1508477061042},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1508477061042},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1508477061042},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1508477061042},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1508477061042},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1508477061042},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1508477061042},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1508477061050},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1508477061050},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1508477061050},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1508477061050},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1508477061050},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1508477061050},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1508477061050},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1508477061050},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1508477061050},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1508477061050},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1508477061050},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1508477061050},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1508477061050},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1508477061050},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1508477061050},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1508477061050},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1508477061050},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1508477061050},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1508477061050},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1508477061050},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1508477061050},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1508477061050},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1508477061050},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1508477061050},{"_id":"public/css/main.css","hash":"580eb632094289d1588957e4ba1b356085b94680","modified":1508477061050},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1508477061050},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1508477061050},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1508477061050},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1508477061050},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1508477061050},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1508477061050},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1508477061050},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1508477061050},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1508477061050},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1508477061050},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1508477061050},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1508477061050},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1508477061050},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1508477061050},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1508477061050},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1508477061050},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1508477061050},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1508477061050},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1508477061050},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1508477061050},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1508477061050},{"_id":"public/images/2b.jpg","hash":"5bf17207a55d7cc547d8864426fb14152d55381e","modified":1508477061090},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1508477061166},{"_id":"public/images/2b_round.jpg","hash":"5a4173f7234a794ae7d8db2b9bb5f2ade6fc855c","modified":1508477062281}],"Category":[{"name":"android","_id":"cj8zgagyx0003nslfsx9090js"},{"name":"markdown","_id":"cj8zgagyx0005nslfehymvo49"},{"name":"java","_id":"cj8zgah2o000gnslf2n5ipvv4"},{"name":"novel","_id":"cj8zgah2x000mnslfq4x6g06s"},{"name":"hexo","_id":"cj8zgah30000rnslf07p6s2p4"}],"Data":[],"Page":[{"_content":"<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>404 NOT FOUND</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"\n        homePageUrl=\"/\"\n        homePageName=\"回到我的主页\"></script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>404 NOT FOUND</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"\n        homePageUrl=\"/\"\n        homePageName=\"回到我的主页\"></script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2017-09-19T07:50:48.017Z","updated":"2017-09-19T07:50:48.006Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj8zgagmj0000nslftr3sh7rr","content":"<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>404 NOT FOUND</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!doctype html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>404 NOT FOUND</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"关于","date":"2017-09-19T08:11:27.000Z","type":"about","_content":"\n\n\n# **关于我**\n\n---\n\n目前坐标**广州**\n\n**Android**工程师一枚\n\n爱好尝试**新鲜事物**技能max\n\n能动手绝不**BB**\n\n---\n\n![](./img/cat.jpg)\n\n\n\nGithub: [CREEPERDCH](https://github.com/CREEPERDCH)\n\nEmail:   wwwwyn4240@gmail.com\n\nWeibo: [渡鸦0424](http://www.weibo.com/u/3015389937)\n\n---\n\n# **友链**\n\n- [BootstrapCDN加速](http://v3.bootcss.com/getting-started/#download)\n- [jQueryCDN加速](https://code.jquery.com/)\n- [ProcessOn在线制图工具](https://www.processon.com/)\n- [Youtube Downloader](http://www.clipconverter.cc/)\n- [在线外语词汇积累](https://learn.lingvist.com/)\n- [Cloudflare](https://www.cloudflare.com/)\n\n\n\n","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2017-09-19 16:11:27\ntype: \"about\"\n---\n\n\n\n# **关于我**\n\n---\n\n目前坐标**广州**\n\n**Android**工程师一枚\n\n爱好尝试**新鲜事物**技能max\n\n能动手绝不**BB**\n\n---\n\n![](./img/cat.jpg)\n\n\n\nGithub: [CREEPERDCH](https://github.com/CREEPERDCH)\n\nEmail:   wwwwyn4240@gmail.com\n\nWeibo: [渡鸦0424](http://www.weibo.com/u/3015389937)\n\n---\n\n# **友链**\n\n- [BootstrapCDN加速](http://v3.bootcss.com/getting-started/#download)\n- [jQueryCDN加速](https://code.jquery.com/)\n- [ProcessOn在线制图工具](https://www.processon.com/)\n- [Youtube Downloader](http://www.clipconverter.cc/)\n- [在线外语词汇积累](https://learn.lingvist.com/)\n- [Cloudflare](https://www.cloudflare.com/)\n\n\n\n","updated":"2017-09-19T11:41:25.472Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj8zgah2b000anslfvza7gh1j","content":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a><strong>关于我</strong></h1><hr>\n<p>目前坐标<strong>广州</strong></p>\n<p><strong>Android</strong>工程师一枚</p>\n<p>爱好尝试<strong>新鲜事物</strong>技能max</p>\n<p>能动手绝不<strong>BB</strong></p>\n<hr>\n<p><img src=\"./img/cat.jpg\" alt=\"\"></p>\n<p>Github: <a href=\"https://github.com/CREEPERDCH\" target=\"_blank\" rel=\"external\">CREEPERDCH</a></p>\n<p>Email:   wwwwyn4240@gmail.com</p>\n<p>Weibo: <a href=\"http://www.weibo.com/u/3015389937\" target=\"_blank\" rel=\"external\">渡鸦0424</a></p>\n<hr>\n<h1 id=\"友链\"><a href=\"#友链\" class=\"headerlink\" title=\"友链\"></a><strong>友链</strong></h1><ul>\n<li><a href=\"http://v3.bootcss.com/getting-started/#download\" target=\"_blank\" rel=\"external\">BootstrapCDN加速</a></li>\n<li><a href=\"https://code.jquery.com/\" target=\"_blank\" rel=\"external\">jQueryCDN加速</a></li>\n<li><a href=\"https://www.processon.com/\" target=\"_blank\" rel=\"external\">ProcessOn在线制图工具</a></li>\n<li><a href=\"http://www.clipconverter.cc/\" target=\"_blank\" rel=\"external\">Youtube Downloader</a></li>\n<li><a href=\"https://learn.lingvist.com/\" target=\"_blank\" rel=\"external\">在线外语词汇积累</a></li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">Cloudflare</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a><strong>关于我</strong></h1><hr>\n<p>目前坐标<strong>广州</strong></p>\n<p><strong>Android</strong>工程师一枚</p>\n<p>爱好尝试<strong>新鲜事物</strong>技能max</p>\n<p>能动手绝不<strong>BB</strong></p>\n<hr>\n<p><img src=\"./img/cat.jpg\" alt=\"\"></p>\n<p>Github: <a href=\"https://github.com/CREEPERDCH\" target=\"_blank\" rel=\"external\">CREEPERDCH</a></p>\n<p>Email:   wwwwyn4240@gmail.com</p>\n<p>Weibo: <a href=\"http://www.weibo.com/u/3015389937\" target=\"_blank\" rel=\"external\">渡鸦0424</a></p>\n<hr>\n<h1 id=\"友链\"><a href=\"#友链\" class=\"headerlink\" title=\"友链\"></a><strong>友链</strong></h1><ul>\n<li><a href=\"http://v3.bootcss.com/getting-started/#download\" target=\"_blank\" rel=\"external\">BootstrapCDN加速</a></li>\n<li><a href=\"https://code.jquery.com/\" target=\"_blank\" rel=\"external\">jQueryCDN加速</a></li>\n<li><a href=\"https://www.processon.com/\" target=\"_blank\" rel=\"external\">ProcessOn在线制图工具</a></li>\n<li><a href=\"http://www.clipconverter.cc/\" target=\"_blank\" rel=\"external\">Youtube Downloader</a></li>\n<li><a href=\"https://learn.lingvist.com/\" target=\"_blank\" rel=\"external\">在线外语词汇积累</a></li>\n<li><a href=\"https://www.cloudflare.com/\" target=\"_blank\" rel=\"external\">Cloudflare</a></li>\n</ul>\n"},{"title":"分类","date":"2017-09-19T07:37:45.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-09-19 15:37:45\ntype: \"categories\"\n---\n","updated":"2017-09-19T09:52:00.485Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj8zgah2f000cnslf50to07zp","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-09-19T09:52:21.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-09-19 17:52:21\ntype: \"tags\"\n---\n","updated":"2017-09-19T09:52:48.093Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cj8zgah2m000fnslfzhcngwv1","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android基础(二)","date":"2017-09-19T09:42:10.000Z","_content":"\n### **1.静态内部类,内部类,匿名内部类分别是什么?为什么内部类会持有外部类的引用?持有的引用是this还是其他?**\n\n​\t**静态内部类：**使用static修饰的内部类\n\n​\t**内部类：**就是在某个类的内部又定义了一个类，内部类所嵌入的类称为外部类\n\n​\t**匿名内部类：**使用new生成的内部类\n\n \t内部类的产生依赖于外部类，持有的引用是类名.this\n\n### **2.Java中try catch finally的执行顺序?**\n\n​\t先执行try中代码，如果发生异常执行catch中代码，最后一定会执行finally中代码\n\n### **3.equals与==的区别?**\n\n​\t==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是\t\t 不是相等\n\n### **4.Java的四种引用的区别**\n\n​\t**强引用：**如果一个对象具有强引用，它就不会被垃圾回收器(GC)回收。即使当前内存空间不足，JVM 也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象\n\n​\t**软引用：**在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收\n\n​\t**弱引用：**具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象\n\n​\t**虚引用：**顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收\n\n\n\n# **Thread/AsyncTask相关面试题:**\n\n### **1.wait()和sleep()的区别**\n\n​\tsleep()来自Thread类,wait()来自Object类\n\n​\t调用sleep()方法的过程中,线程不会释放对象锁;而调用wait()方法,线程会释放对象锁\n\n​\tsleep睡眠后不出让系统资源,wait让出系统资源,其他线程可以占用CPU\n\n​\tsleep(milliseconds)需要传入一个睡眠时间的参数，时间一到会自动唤醒\n\n### **2.介绍下 AsyncTask的内部实现以及适用的场景**\n\n​\tAsyncTask 内部也是 Handler 机制来完成的，只不过 Android 提供了执行框架来提供线程池来执行相应地任务，因为线程池的大小问题，所以 AsyncTask 只应该用来执行耗时时间较短的任务，比如 HTTP 请求，大规模的下载和数据库的更改不适用于 AsyncTask，因为会导致线程池堵塞，没有线程来执行其他的任务，导致的情形是会发生 AsyncTask 根本执行不了的问题。\n\n\n\n\n\n# **网络相关面试题:**\n\n### **1.为什么说TCP是可靠的而UDP是不可靠的?为什么UDP比TCP快?**\n\n​\tTCP/IP协议高，因为其拥有三次握手双向机制，这一机制保证校验了数据，保证了他的可靠性。\n\n​\tUDP就没有了，UDP信息发出后,不验证是否到达对方,所以不可靠。\n\n​\t但是就速度来说，还是UDP协议更高，毕竟其无需重复返回验证，只是一次性的\n\n### **2.简述对Http与Https协议的了解**\n\n​\tHttp(超文本传输协议)是一个基于请求与响应模式的、无状态的、应用层的协议,Http请求由三部分组成，分别是：请求行、消息报头、请求正文,其中消息报头包括普通报头、请求报头、响应报头、实体报头\n\n​\tHTTPS(全称：Hyper Text Transfer Protocol over Secure Socket Layer)，是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL\n\n### **3.Http请求中GET和POST方法的区别**\n\n​\t**GET:**从指定的服务器中获取数据，明文发送内容\n\n​\t**POST :**提交数据给指定的服务器处理\n\n​\t**区别:**\tPOST请求不能被缓存下来\n\n​\t\t\tPOST请求不会保存在浏览器浏览记录中\n\n \t\t\t以POST请求的URL无法保存为浏览器书签\n\n​\t\t\tPOST请求没有长度限制\n\n# **Fragment相关面试题:**\n\n### **1.Fragment 如何实现类似 Activity 栈的压栈和出栈效果的**\n\n​\tFragment 的事物管理器内部维持了一个双向链表结构,该结构可以记录我们每次add的\n\nFragment 和 replace 的 Fragment，然后当我们点击 back 按钮的时候会自动帮我们实现退栈操作\n\n### **2.Fragment 的好处**\n\n​\tFragment 可以使你能够将 activity 分离成多个可重用的组件，每个都有它自己的生命周期和\n\nUI\n\n​\tFragment 可以轻松得创建动态灵活的 UI 设计，可以适应于不同的屏幕尺寸。从手机到平板电\n\n脑\n\n​\tFragment 是一个独立的模块,紧紧地与 activity 绑定在一起。可以运行中动态地移除、加入、\n\n交换等\n\n​\tFragment 提供一个新的方式让你在不同的安卓设备上统一你的 UI\n\n​\tFragment 解决 Activity 间的切换不流畅，轻量切换\n\n​\tFragment 替代 Tab Activity 做导航，性能更好(Tab Activity 已经过时了)\n\n​\tFragment 在 4.2.版本中新增嵌套 fragment 使用方法，能够生成更好的界面效果\n\n### **3.如何切换 Fragment,不重新实例化**\n\n​\t**正确的切换方式是:**\n\n​\tadd()，\n\n​\t切换时 hide()，add()另一个 Fragment;\n\n​\t再次切换时，只需 hide()当前，show()另一个\n\n# **View相关面试题:**\n\n### **1.onInterceptTouchEvent()和onTouchEvent()的区别**\n\n​\tonInterceptTouchEvent() 用于拦截触摸事件\n\n​\tonTouchEvent()\t\t     用于处理触摸事件\n\n### **2.SurfaceView和View的区别**\n\n​\tSurfaceView中采用了双缓存技术，在单独的线程中更新界面\n\n​\tView在UI线程中更新界面\n\n### **3.View的绘制过程**\n\n​\t一个View要显示在界面上，需要经历一个View树的遍历过程，这个过程又可以分为三个过程，也就是自定义View中的三要素：大小，位置，画什么，即onMesure()，onLayout(),onDraw()\n\n​\tonMesure()确定一个View的大小;\n\n​\tonLayout()确定View在父节点上的位置;\n\n​\tonDraw()绘制View 的内容;\n\n# **性能优化相关面试题:**\n\n### **1.ListView卡顿的原因与性能优化**\n\n​\t**重用convertView：**通过复用convertview来减少不必要的view的创建，另外Inflate操作会把xml文件实例化成相应的View实例，属于IO操作，是耗时操作\n\n​\t**减少findViewById()操作:**将xml文件中的元素封装成viewholder静态类，通过convertview的setTag和getTag方法将view与相应的holder对象绑定在一起，避免不必要的findviewbyid操作\n\n​\t**避免在 getView 方法中做耗时的操作**\n\n​\t**使用 RecycleView 代替listview**\n\n​\t**ListView 中元素避免半透明**\n\n### **2.三级缓存的原理**\n\n​\t从缓存中加载。\n\n​\t从本地文件中加载(数据库，SDcard)\n\n​\t从网络加载\n\n# **其他面试题:**\n\n### **1.android中进程的优先级**\n\n​\t前台进程\n\n​\t可见进程\n\n​\t服务进程\n\n​\t后台进程\n\n​\t空进程\n\n### **2.apk安装卸载的原理**\n\n​\t**安装过程：**复制apk安装包到data/app目录下，解压并扫描安装包，把dex文件(dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录\n\n​\t**卸载过程：**删除安装过程中在上述三个目录下创建的文件及目录\n\n**3.Android 中如何捕获未捕获的异常**\n\n​\t自定义一个Application 实 现UncaughExceptionHandler,覆写 UncaughtExceptionHandler 的 onCreate 和 uncaughtException 方法\n\n","source":"_posts/Android基础-二.md","raw":"---\ntitle: Android基础(二)\ndate: 2017-09-19 17:42:10\ntags:\ncategories: android\n---\n\n### **1.静态内部类,内部类,匿名内部类分别是什么?为什么内部类会持有外部类的引用?持有的引用是this还是其他?**\n\n​\t**静态内部类：**使用static修饰的内部类\n\n​\t**内部类：**就是在某个类的内部又定义了一个类，内部类所嵌入的类称为外部类\n\n​\t**匿名内部类：**使用new生成的内部类\n\n \t内部类的产生依赖于外部类，持有的引用是类名.this\n\n### **2.Java中try catch finally的执行顺序?**\n\n​\t先执行try中代码，如果发生异常执行catch中代码，最后一定会执行finally中代码\n\n### **3.equals与==的区别?**\n\n​\t==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是\t\t 不是相等\n\n### **4.Java的四种引用的区别**\n\n​\t**强引用：**如果一个对象具有强引用，它就不会被垃圾回收器(GC)回收。即使当前内存空间不足，JVM 也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象\n\n​\t**软引用：**在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收\n\n​\t**弱引用：**具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象\n\n​\t**虚引用：**顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收\n\n\n\n# **Thread/AsyncTask相关面试题:**\n\n### **1.wait()和sleep()的区别**\n\n​\tsleep()来自Thread类,wait()来自Object类\n\n​\t调用sleep()方法的过程中,线程不会释放对象锁;而调用wait()方法,线程会释放对象锁\n\n​\tsleep睡眠后不出让系统资源,wait让出系统资源,其他线程可以占用CPU\n\n​\tsleep(milliseconds)需要传入一个睡眠时间的参数，时间一到会自动唤醒\n\n### **2.介绍下 AsyncTask的内部实现以及适用的场景**\n\n​\tAsyncTask 内部也是 Handler 机制来完成的，只不过 Android 提供了执行框架来提供线程池来执行相应地任务，因为线程池的大小问题，所以 AsyncTask 只应该用来执行耗时时间较短的任务，比如 HTTP 请求，大规模的下载和数据库的更改不适用于 AsyncTask，因为会导致线程池堵塞，没有线程来执行其他的任务，导致的情形是会发生 AsyncTask 根本执行不了的问题。\n\n\n\n\n\n# **网络相关面试题:**\n\n### **1.为什么说TCP是可靠的而UDP是不可靠的?为什么UDP比TCP快?**\n\n​\tTCP/IP协议高，因为其拥有三次握手双向机制，这一机制保证校验了数据，保证了他的可靠性。\n\n​\tUDP就没有了，UDP信息发出后,不验证是否到达对方,所以不可靠。\n\n​\t但是就速度来说，还是UDP协议更高，毕竟其无需重复返回验证，只是一次性的\n\n### **2.简述对Http与Https协议的了解**\n\n​\tHttp(超文本传输协议)是一个基于请求与响应模式的、无状态的、应用层的协议,Http请求由三部分组成，分别是：请求行、消息报头、请求正文,其中消息报头包括普通报头、请求报头、响应报头、实体报头\n\n​\tHTTPS(全称：Hyper Text Transfer Protocol over Secure Socket Layer)，是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL\n\n### **3.Http请求中GET和POST方法的区别**\n\n​\t**GET:**从指定的服务器中获取数据，明文发送内容\n\n​\t**POST :**提交数据给指定的服务器处理\n\n​\t**区别:**\tPOST请求不能被缓存下来\n\n​\t\t\tPOST请求不会保存在浏览器浏览记录中\n\n \t\t\t以POST请求的URL无法保存为浏览器书签\n\n​\t\t\tPOST请求没有长度限制\n\n# **Fragment相关面试题:**\n\n### **1.Fragment 如何实现类似 Activity 栈的压栈和出栈效果的**\n\n​\tFragment 的事物管理器内部维持了一个双向链表结构,该结构可以记录我们每次add的\n\nFragment 和 replace 的 Fragment，然后当我们点击 back 按钮的时候会自动帮我们实现退栈操作\n\n### **2.Fragment 的好处**\n\n​\tFragment 可以使你能够将 activity 分离成多个可重用的组件，每个都有它自己的生命周期和\n\nUI\n\n​\tFragment 可以轻松得创建动态灵活的 UI 设计，可以适应于不同的屏幕尺寸。从手机到平板电\n\n脑\n\n​\tFragment 是一个独立的模块,紧紧地与 activity 绑定在一起。可以运行中动态地移除、加入、\n\n交换等\n\n​\tFragment 提供一个新的方式让你在不同的安卓设备上统一你的 UI\n\n​\tFragment 解决 Activity 间的切换不流畅，轻量切换\n\n​\tFragment 替代 Tab Activity 做导航，性能更好(Tab Activity 已经过时了)\n\n​\tFragment 在 4.2.版本中新增嵌套 fragment 使用方法，能够生成更好的界面效果\n\n### **3.如何切换 Fragment,不重新实例化**\n\n​\t**正确的切换方式是:**\n\n​\tadd()，\n\n​\t切换时 hide()，add()另一个 Fragment;\n\n​\t再次切换时，只需 hide()当前，show()另一个\n\n# **View相关面试题:**\n\n### **1.onInterceptTouchEvent()和onTouchEvent()的区别**\n\n​\tonInterceptTouchEvent() 用于拦截触摸事件\n\n​\tonTouchEvent()\t\t     用于处理触摸事件\n\n### **2.SurfaceView和View的区别**\n\n​\tSurfaceView中采用了双缓存技术，在单独的线程中更新界面\n\n​\tView在UI线程中更新界面\n\n### **3.View的绘制过程**\n\n​\t一个View要显示在界面上，需要经历一个View树的遍历过程，这个过程又可以分为三个过程，也就是自定义View中的三要素：大小，位置，画什么，即onMesure()，onLayout(),onDraw()\n\n​\tonMesure()确定一个View的大小;\n\n​\tonLayout()确定View在父节点上的位置;\n\n​\tonDraw()绘制View 的内容;\n\n# **性能优化相关面试题:**\n\n### **1.ListView卡顿的原因与性能优化**\n\n​\t**重用convertView：**通过复用convertview来减少不必要的view的创建，另外Inflate操作会把xml文件实例化成相应的View实例，属于IO操作，是耗时操作\n\n​\t**减少findViewById()操作:**将xml文件中的元素封装成viewholder静态类，通过convertview的setTag和getTag方法将view与相应的holder对象绑定在一起，避免不必要的findviewbyid操作\n\n​\t**避免在 getView 方法中做耗时的操作**\n\n​\t**使用 RecycleView 代替listview**\n\n​\t**ListView 中元素避免半透明**\n\n### **2.三级缓存的原理**\n\n​\t从缓存中加载。\n\n​\t从本地文件中加载(数据库，SDcard)\n\n​\t从网络加载\n\n# **其他面试题:**\n\n### **1.android中进程的优先级**\n\n​\t前台进程\n\n​\t可见进程\n\n​\t服务进程\n\n​\t后台进程\n\n​\t空进程\n\n### **2.apk安装卸载的原理**\n\n​\t**安装过程：**复制apk安装包到data/app目录下，解压并扫描安装包，把dex文件(dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录\n\n​\t**卸载过程：**删除安装过程中在上述三个目录下创建的文件及目录\n\n**3.Android 中如何捕获未捕获的异常**\n\n​\t自定义一个Application 实 现UncaughExceptionHandler,覆写 UncaughtExceptionHandler 的 onCreate 和 uncaughtException 方法\n\n","slug":"Android基础-二","published":1,"updated":"2017-09-19T09:42:46.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zgagyd0001nslfbaq4qj9s","content":"<h3 id=\"1-静态内部类-内部类-匿名内部类分别是什么-为什么内部类会持有外部类的引用-持有的引用是this还是其他\"><a href=\"#1-静态内部类-内部类-匿名内部类分别是什么-为什么内部类会持有外部类的引用-持有的引用是this还是其他\" class=\"headerlink\" title=\"1.静态内部类,内部类,匿名内部类分别是什么?为什么内部类会持有外部类的引用?持有的引用是this还是其他?\"></a><strong>1.静态内部类,内部类,匿名内部类分别是什么?为什么内部类会持有外部类的引用?持有的引用是this还是其他?</strong></h3><p>​    <strong>静态内部类：</strong>使用static修饰的内部类</p>\n<p>​    <strong>内部类：</strong>就是在某个类的内部又定义了一个类，内部类所嵌入的类称为外部类</p>\n<p>​    <strong>匿名内部类：</strong>使用new生成的内部类</p>\n<pre><code>内部类的产生依赖于外部类，持有的引用是类名.this\n</code></pre><h3 id=\"2-Java中try-catch-finally的执行顺序\"><a href=\"#2-Java中try-catch-finally的执行顺序\" class=\"headerlink\" title=\"2.Java中try catch finally的执行顺序?\"></a><strong>2.Java中try catch finally的执行顺序?</strong></h3><p>​    先执行try中代码，如果发生异常执行catch中代码，最后一定会执行finally中代码</p>\n<h3 id=\"3-equals与-的区别\"><a href=\"#3-equals与-的区别\" class=\"headerlink\" title=\"3.equals与==的区别?\"></a><strong>3.equals与==的区别?</strong></h3><p>​    ==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是         不是相等</p>\n<h3 id=\"4-Java的四种引用的区别\"><a href=\"#4-Java的四种引用的区别\" class=\"headerlink\" title=\"4.Java的四种引用的区别\"></a><strong>4.Java的四种引用的区别</strong></h3><p>​    <strong>强引用：</strong>如果一个对象具有强引用，它就不会被垃圾回收器(GC)回收。即使当前内存空间不足，JVM 也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象</p>\n<p>​    <strong>软引用：</strong>在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收</p>\n<p>​    <strong>弱引用：</strong>具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象</p>\n<p>​    <strong>虚引用：</strong>顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收</p>\n<h1 id=\"Thread-AsyncTask相关面试题\"><a href=\"#Thread-AsyncTask相关面试题\" class=\"headerlink\" title=\"Thread/AsyncTask相关面试题:\"></a><strong>Thread/AsyncTask相关面试题:</strong></h1><h3 id=\"1-wait-和sleep-的区别\"><a href=\"#1-wait-和sleep-的区别\" class=\"headerlink\" title=\"1.wait()和sleep()的区别\"></a><strong>1.wait()和sleep()的区别</strong></h3><p>​    sleep()来自Thread类,wait()来自Object类</p>\n<p>​    调用sleep()方法的过程中,线程不会释放对象锁;而调用wait()方法,线程会释放对象锁</p>\n<p>​    sleep睡眠后不出让系统资源,wait让出系统资源,其他线程可以占用CPU</p>\n<p>​    sleep(milliseconds)需要传入一个睡眠时间的参数，时间一到会自动唤醒</p>\n<h3 id=\"2-介绍下-AsyncTask的内部实现以及适用的场景\"><a href=\"#2-介绍下-AsyncTask的内部实现以及适用的场景\" class=\"headerlink\" title=\"2.介绍下 AsyncTask的内部实现以及适用的场景\"></a><strong>2.介绍下 AsyncTask的内部实现以及适用的场景</strong></h3><p>​    AsyncTask 内部也是 Handler 机制来完成的，只不过 Android 提供了执行框架来提供线程池来执行相应地任务，因为线程池的大小问题，所以 AsyncTask 只应该用来执行耗时时间较短的任务，比如 HTTP 请求，大规模的下载和数据库的更改不适用于 AsyncTask，因为会导致线程池堵塞，没有线程来执行其他的任务，导致的情形是会发生 AsyncTask 根本执行不了的问题。</p>\n<h1 id=\"网络相关面试题\"><a href=\"#网络相关面试题\" class=\"headerlink\" title=\"网络相关面试题:\"></a><strong>网络相关面试题:</strong></h1><h3 id=\"1-为什么说TCP是可靠的而UDP是不可靠的-为什么UDP比TCP快\"><a href=\"#1-为什么说TCP是可靠的而UDP是不可靠的-为什么UDP比TCP快\" class=\"headerlink\" title=\"1.为什么说TCP是可靠的而UDP是不可靠的?为什么UDP比TCP快?\"></a><strong>1.为什么说TCP是可靠的而UDP是不可靠的?为什么UDP比TCP快?</strong></h3><p>​    TCP/IP协议高，因为其拥有三次握手双向机制，这一机制保证校验了数据，保证了他的可靠性。</p>\n<p>​    UDP就没有了，UDP信息发出后,不验证是否到达对方,所以不可靠。</p>\n<p>​    但是就速度来说，还是UDP协议更高，毕竟其无需重复返回验证，只是一次性的</p>\n<h3 id=\"2-简述对Http与Https协议的了解\"><a href=\"#2-简述对Http与Https协议的了解\" class=\"headerlink\" title=\"2.简述对Http与Https协议的了解\"></a><strong>2.简述对Http与Https协议的了解</strong></h3><p>​    Http(超文本传输协议)是一个基于请求与响应模式的、无状态的、应用层的协议,Http请求由三部分组成，分别是：请求行、消息报头、请求正文,其中消息报头包括普通报头、请求报头、响应报头、实体报头</p>\n<p>​    HTTPS(全称：Hyper Text Transfer Protocol over Secure Socket Layer)，是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL</p>\n<h3 id=\"3-Http请求中GET和POST方法的区别\"><a href=\"#3-Http请求中GET和POST方法的区别\" class=\"headerlink\" title=\"3.Http请求中GET和POST方法的区别\"></a><strong>3.Http请求中GET和POST方法的区别</strong></h3><p>​    <strong>GET:</strong>从指定的服务器中获取数据，明文发送内容</p>\n<p>​    <strong>POST :</strong>提交数据给指定的服务器处理</p>\n<p>​    <strong>区别:</strong>    POST请求不能被缓存下来</p>\n<p>​            POST请求不会保存在浏览器浏览记录中</p>\n<pre><code>以POST请求的URL无法保存为浏览器书签\n</code></pre><p>​            POST请求没有长度限制</p>\n<h1 id=\"Fragment相关面试题\"><a href=\"#Fragment相关面试题\" class=\"headerlink\" title=\"Fragment相关面试题:\"></a><strong>Fragment相关面试题:</strong></h1><h3 id=\"1-Fragment-如何实现类似-Activity-栈的压栈和出栈效果的\"><a href=\"#1-Fragment-如何实现类似-Activity-栈的压栈和出栈效果的\" class=\"headerlink\" title=\"1.Fragment 如何实现类似 Activity 栈的压栈和出栈效果的\"></a><strong>1.Fragment 如何实现类似 Activity 栈的压栈和出栈效果的</strong></h3><p>​    Fragment 的事物管理器内部维持了一个双向链表结构,该结构可以记录我们每次add的</p>\n<p>Fragment 和 replace 的 Fragment，然后当我们点击 back 按钮的时候会自动帮我们实现退栈操作</p>\n<h3 id=\"2-Fragment-的好处\"><a href=\"#2-Fragment-的好处\" class=\"headerlink\" title=\"2.Fragment 的好处\"></a><strong>2.Fragment 的好处</strong></h3><p>​    Fragment 可以使你能够将 activity 分离成多个可重用的组件，每个都有它自己的生命周期和</p>\n<p>UI</p>\n<p>​    Fragment 可以轻松得创建动态灵活的 UI 设计，可以适应于不同的屏幕尺寸。从手机到平板电</p>\n<p>脑</p>\n<p>​    Fragment 是一个独立的模块,紧紧地与 activity 绑定在一起。可以运行中动态地移除、加入、</p>\n<p>交换等</p>\n<p>​    Fragment 提供一个新的方式让你在不同的安卓设备上统一你的 UI</p>\n<p>​    Fragment 解决 Activity 间的切换不流畅，轻量切换</p>\n<p>​    Fragment 替代 Tab Activity 做导航，性能更好(Tab Activity 已经过时了)</p>\n<p>​    Fragment 在 4.2.版本中新增嵌套 fragment 使用方法，能够生成更好的界面效果</p>\n<h3 id=\"3-如何切换-Fragment-不重新实例化\"><a href=\"#3-如何切换-Fragment-不重新实例化\" class=\"headerlink\" title=\"3.如何切换 Fragment,不重新实例化\"></a><strong>3.如何切换 Fragment,不重新实例化</strong></h3><p>​    <strong>正确的切换方式是:</strong></p>\n<p>​    add()，</p>\n<p>​    切换时 hide()，add()另一个 Fragment;</p>\n<p>​    再次切换时，只需 hide()当前，show()另一个</p>\n<h1 id=\"View相关面试题\"><a href=\"#View相关面试题\" class=\"headerlink\" title=\"View相关面试题:\"></a><strong>View相关面试题:</strong></h1><h3 id=\"1-onInterceptTouchEvent-和onTouchEvent-的区别\"><a href=\"#1-onInterceptTouchEvent-和onTouchEvent-的区别\" class=\"headerlink\" title=\"1.onInterceptTouchEvent()和onTouchEvent()的区别\"></a><strong>1.onInterceptTouchEvent()和onTouchEvent()的区别</strong></h3><p>​    onInterceptTouchEvent() 用于拦截触摸事件</p>\n<p>​    onTouchEvent()             用于处理触摸事件</p>\n<h3 id=\"2-SurfaceView和View的区别\"><a href=\"#2-SurfaceView和View的区别\" class=\"headerlink\" title=\"2.SurfaceView和View的区别\"></a><strong>2.SurfaceView和View的区别</strong></h3><p>​    SurfaceView中采用了双缓存技术，在单独的线程中更新界面</p>\n<p>​    View在UI线程中更新界面</p>\n<h3 id=\"3-View的绘制过程\"><a href=\"#3-View的绘制过程\" class=\"headerlink\" title=\"3.View的绘制过程\"></a><strong>3.View的绘制过程</strong></h3><p>​    一个View要显示在界面上，需要经历一个View树的遍历过程，这个过程又可以分为三个过程，也就是自定义View中的三要素：大小，位置，画什么，即onMesure()，onLayout(),onDraw()</p>\n<p>​    onMesure()确定一个View的大小;</p>\n<p>​    onLayout()确定View在父节点上的位置;</p>\n<p>​    onDraw()绘制View 的内容;</p>\n<h1 id=\"性能优化相关面试题\"><a href=\"#性能优化相关面试题\" class=\"headerlink\" title=\"性能优化相关面试题:\"></a><strong>性能优化相关面试题:</strong></h1><h3 id=\"1-ListView卡顿的原因与性能优化\"><a href=\"#1-ListView卡顿的原因与性能优化\" class=\"headerlink\" title=\"1.ListView卡顿的原因与性能优化\"></a><strong>1.ListView卡顿的原因与性能优化</strong></h3><p>​    <strong>重用convertView：</strong>通过复用convertview来减少不必要的view的创建，另外Inflate操作会把xml文件实例化成相应的View实例，属于IO操作，是耗时操作</p>\n<p>​    <strong>减少findViewById()操作:</strong>将xml文件中的元素封装成viewholder静态类，通过convertview的setTag和getTag方法将view与相应的holder对象绑定在一起，避免不必要的findviewbyid操作</p>\n<p>​    <strong>避免在 getView 方法中做耗时的操作</strong></p>\n<p>​    <strong>使用 RecycleView 代替listview</strong></p>\n<p>​    <strong>ListView 中元素避免半透明</strong></p>\n<h3 id=\"2-三级缓存的原理\"><a href=\"#2-三级缓存的原理\" class=\"headerlink\" title=\"2.三级缓存的原理\"></a><strong>2.三级缓存的原理</strong></h3><p>​    从缓存中加载。</p>\n<p>​    从本地文件中加载(数据库，SDcard)</p>\n<p>​    从网络加载</p>\n<h1 id=\"其他面试题\"><a href=\"#其他面试题\" class=\"headerlink\" title=\"其他面试题:\"></a><strong>其他面试题:</strong></h1><h3 id=\"1-android中进程的优先级\"><a href=\"#1-android中进程的优先级\" class=\"headerlink\" title=\"1.android中进程的优先级\"></a><strong>1.android中进程的优先级</strong></h3><p>​    前台进程</p>\n<p>​    可见进程</p>\n<p>​    服务进程</p>\n<p>​    后台进程</p>\n<p>​    空进程</p>\n<h3 id=\"2-apk安装卸载的原理\"><a href=\"#2-apk安装卸载的原理\" class=\"headerlink\" title=\"2.apk安装卸载的原理\"></a><strong>2.apk安装卸载的原理</strong></h3><p>​    <strong>安装过程：</strong>复制apk安装包到data/app目录下，解压并扫描安装包，把dex文件(dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录</p>\n<p>​    <strong>卸载过程：</strong>删除安装过程中在上述三个目录下创建的文件及目录</p>\n<p><strong>3.Android 中如何捕获未捕获的异常</strong></p>\n<p>​    自定义一个Application 实 现UncaughExceptionHandler,覆写 UncaughtExceptionHandler 的 onCreate 和 uncaughtException 方法</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"1-静态内部类-内部类-匿名内部类分别是什么-为什么内部类会持有外部类的引用-持有的引用是this还是其他\"><a href=\"#1-静态内部类-内部类-匿名内部类分别是什么-为什么内部类会持有外部类的引用-持有的引用是this还是其他\" class=\"headerlink\" title=\"1.静态内部类,内部类,匿名内部类分别是什么?为什么内部类会持有外部类的引用?持有的引用是this还是其他?\"></a><strong>1.静态内部类,内部类,匿名内部类分别是什么?为什么内部类会持有外部类的引用?持有的引用是this还是其他?</strong></h3><p>​    <strong>静态内部类：</strong>使用static修饰的内部类</p>\n<p>​    <strong>内部类：</strong>就是在某个类的内部又定义了一个类，内部类所嵌入的类称为外部类</p>\n<p>​    <strong>匿名内部类：</strong>使用new生成的内部类</p>\n<pre><code>内部类的产生依赖于外部类，持有的引用是类名.this\n</code></pre><h3 id=\"2-Java中try-catch-finally的执行顺序\"><a href=\"#2-Java中try-catch-finally的执行顺序\" class=\"headerlink\" title=\"2.Java中try catch finally的执行顺序?\"></a><strong>2.Java中try catch finally的执行顺序?</strong></h3><p>​    先执行try中代码，如果发生异常执行catch中代码，最后一定会执行finally中代码</p>\n<h3 id=\"3-equals与-的区别\"><a href=\"#3-equals与-的区别\" class=\"headerlink\" title=\"3.equals与==的区别?\"></a><strong>3.equals与==的区别?</strong></h3><p>​    ==是判断两个变量或实例是不是指向同一个内存空间 equals是判断两个变量或实例所指向的内存空间的值是         不是相等</p>\n<h3 id=\"4-Java的四种引用的区别\"><a href=\"#4-Java的四种引用的区别\" class=\"headerlink\" title=\"4.Java的四种引用的区别\"></a><strong>4.Java的四种引用的区别</strong></h3><p>​    <strong>强引用：</strong>如果一个对象具有强引用，它就不会被垃圾回收器(GC)回收。即使当前内存空间不足，JVM 也不会回收它，而是抛出 OutOfMemoryError 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为null，这样一来的话，JVM在合适的时间就会回收该对象</p>\n<p>​    <strong>软引用：</strong>在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收</p>\n<p>​    <strong>弱引用：</strong>具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象</p>\n<p>​    <strong>虚引用：</strong>顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收</p>\n<h1 id=\"Thread-AsyncTask相关面试题\"><a href=\"#Thread-AsyncTask相关面试题\" class=\"headerlink\" title=\"Thread/AsyncTask相关面试题:\"></a><strong>Thread/AsyncTask相关面试题:</strong></h1><h3 id=\"1-wait-和sleep-的区别\"><a href=\"#1-wait-和sleep-的区别\" class=\"headerlink\" title=\"1.wait()和sleep()的区别\"></a><strong>1.wait()和sleep()的区别</strong></h3><p>​    sleep()来自Thread类,wait()来自Object类</p>\n<p>​    调用sleep()方法的过程中,线程不会释放对象锁;而调用wait()方法,线程会释放对象锁</p>\n<p>​    sleep睡眠后不出让系统资源,wait让出系统资源,其他线程可以占用CPU</p>\n<p>​    sleep(milliseconds)需要传入一个睡眠时间的参数，时间一到会自动唤醒</p>\n<h3 id=\"2-介绍下-AsyncTask的内部实现以及适用的场景\"><a href=\"#2-介绍下-AsyncTask的内部实现以及适用的场景\" class=\"headerlink\" title=\"2.介绍下 AsyncTask的内部实现以及适用的场景\"></a><strong>2.介绍下 AsyncTask的内部实现以及适用的场景</strong></h3><p>​    AsyncTask 内部也是 Handler 机制来完成的，只不过 Android 提供了执行框架来提供线程池来执行相应地任务，因为线程池的大小问题，所以 AsyncTask 只应该用来执行耗时时间较短的任务，比如 HTTP 请求，大规模的下载和数据库的更改不适用于 AsyncTask，因为会导致线程池堵塞，没有线程来执行其他的任务，导致的情形是会发生 AsyncTask 根本执行不了的问题。</p>\n<h1 id=\"网络相关面试题\"><a href=\"#网络相关面试题\" class=\"headerlink\" title=\"网络相关面试题:\"></a><strong>网络相关面试题:</strong></h1><h3 id=\"1-为什么说TCP是可靠的而UDP是不可靠的-为什么UDP比TCP快\"><a href=\"#1-为什么说TCP是可靠的而UDP是不可靠的-为什么UDP比TCP快\" class=\"headerlink\" title=\"1.为什么说TCP是可靠的而UDP是不可靠的?为什么UDP比TCP快?\"></a><strong>1.为什么说TCP是可靠的而UDP是不可靠的?为什么UDP比TCP快?</strong></h3><p>​    TCP/IP协议高，因为其拥有三次握手双向机制，这一机制保证校验了数据，保证了他的可靠性。</p>\n<p>​    UDP就没有了，UDP信息发出后,不验证是否到达对方,所以不可靠。</p>\n<p>​    但是就速度来说，还是UDP协议更高，毕竟其无需重复返回验证，只是一次性的</p>\n<h3 id=\"2-简述对Http与Https协议的了解\"><a href=\"#2-简述对Http与Https协议的了解\" class=\"headerlink\" title=\"2.简述对Http与Https协议的了解\"></a><strong>2.简述对Http与Https协议的了解</strong></h3><p>​    Http(超文本传输协议)是一个基于请求与响应模式的、无状态的、应用层的协议,Http请求由三部分组成，分别是：请求行、消息报头、请求正文,其中消息报头包括普通报头、请求报头、响应报头、实体报头</p>\n<p>​    HTTPS(全称：Hyper Text Transfer Protocol over Secure Socket Layer)，是以安全为目标的HTTP通道，简单讲是HTTP的安全版。即HTTP下加入SSL层，HTTPS的安全基础是SSL，因此加密的详细内容就需要SSL</p>\n<h3 id=\"3-Http请求中GET和POST方法的区别\"><a href=\"#3-Http请求中GET和POST方法的区别\" class=\"headerlink\" title=\"3.Http请求中GET和POST方法的区别\"></a><strong>3.Http请求中GET和POST方法的区别</strong></h3><p>​    <strong>GET:</strong>从指定的服务器中获取数据，明文发送内容</p>\n<p>​    <strong>POST :</strong>提交数据给指定的服务器处理</p>\n<p>​    <strong>区别:</strong>    POST请求不能被缓存下来</p>\n<p>​            POST请求不会保存在浏览器浏览记录中</p>\n<pre><code>以POST请求的URL无法保存为浏览器书签\n</code></pre><p>​            POST请求没有长度限制</p>\n<h1 id=\"Fragment相关面试题\"><a href=\"#Fragment相关面试题\" class=\"headerlink\" title=\"Fragment相关面试题:\"></a><strong>Fragment相关面试题:</strong></h1><h3 id=\"1-Fragment-如何实现类似-Activity-栈的压栈和出栈效果的\"><a href=\"#1-Fragment-如何实现类似-Activity-栈的压栈和出栈效果的\" class=\"headerlink\" title=\"1.Fragment 如何实现类似 Activity 栈的压栈和出栈效果的\"></a><strong>1.Fragment 如何实现类似 Activity 栈的压栈和出栈效果的</strong></h3><p>​    Fragment 的事物管理器内部维持了一个双向链表结构,该结构可以记录我们每次add的</p>\n<p>Fragment 和 replace 的 Fragment，然后当我们点击 back 按钮的时候会自动帮我们实现退栈操作</p>\n<h3 id=\"2-Fragment-的好处\"><a href=\"#2-Fragment-的好处\" class=\"headerlink\" title=\"2.Fragment 的好处\"></a><strong>2.Fragment 的好处</strong></h3><p>​    Fragment 可以使你能够将 activity 分离成多个可重用的组件，每个都有它自己的生命周期和</p>\n<p>UI</p>\n<p>​    Fragment 可以轻松得创建动态灵活的 UI 设计，可以适应于不同的屏幕尺寸。从手机到平板电</p>\n<p>脑</p>\n<p>​    Fragment 是一个独立的模块,紧紧地与 activity 绑定在一起。可以运行中动态地移除、加入、</p>\n<p>交换等</p>\n<p>​    Fragment 提供一个新的方式让你在不同的安卓设备上统一你的 UI</p>\n<p>​    Fragment 解决 Activity 间的切换不流畅，轻量切换</p>\n<p>​    Fragment 替代 Tab Activity 做导航，性能更好(Tab Activity 已经过时了)</p>\n<p>​    Fragment 在 4.2.版本中新增嵌套 fragment 使用方法，能够生成更好的界面效果</p>\n<h3 id=\"3-如何切换-Fragment-不重新实例化\"><a href=\"#3-如何切换-Fragment-不重新实例化\" class=\"headerlink\" title=\"3.如何切换 Fragment,不重新实例化\"></a><strong>3.如何切换 Fragment,不重新实例化</strong></h3><p>​    <strong>正确的切换方式是:</strong></p>\n<p>​    add()，</p>\n<p>​    切换时 hide()，add()另一个 Fragment;</p>\n<p>​    再次切换时，只需 hide()当前，show()另一个</p>\n<h1 id=\"View相关面试题\"><a href=\"#View相关面试题\" class=\"headerlink\" title=\"View相关面试题:\"></a><strong>View相关面试题:</strong></h1><h3 id=\"1-onInterceptTouchEvent-和onTouchEvent-的区别\"><a href=\"#1-onInterceptTouchEvent-和onTouchEvent-的区别\" class=\"headerlink\" title=\"1.onInterceptTouchEvent()和onTouchEvent()的区别\"></a><strong>1.onInterceptTouchEvent()和onTouchEvent()的区别</strong></h3><p>​    onInterceptTouchEvent() 用于拦截触摸事件</p>\n<p>​    onTouchEvent()             用于处理触摸事件</p>\n<h3 id=\"2-SurfaceView和View的区别\"><a href=\"#2-SurfaceView和View的区别\" class=\"headerlink\" title=\"2.SurfaceView和View的区别\"></a><strong>2.SurfaceView和View的区别</strong></h3><p>​    SurfaceView中采用了双缓存技术，在单独的线程中更新界面</p>\n<p>​    View在UI线程中更新界面</p>\n<h3 id=\"3-View的绘制过程\"><a href=\"#3-View的绘制过程\" class=\"headerlink\" title=\"3.View的绘制过程\"></a><strong>3.View的绘制过程</strong></h3><p>​    一个View要显示在界面上，需要经历一个View树的遍历过程，这个过程又可以分为三个过程，也就是自定义View中的三要素：大小，位置，画什么，即onMesure()，onLayout(),onDraw()</p>\n<p>​    onMesure()确定一个View的大小;</p>\n<p>​    onLayout()确定View在父节点上的位置;</p>\n<p>​    onDraw()绘制View 的内容;</p>\n<h1 id=\"性能优化相关面试题\"><a href=\"#性能优化相关面试题\" class=\"headerlink\" title=\"性能优化相关面试题:\"></a><strong>性能优化相关面试题:</strong></h1><h3 id=\"1-ListView卡顿的原因与性能优化\"><a href=\"#1-ListView卡顿的原因与性能优化\" class=\"headerlink\" title=\"1.ListView卡顿的原因与性能优化\"></a><strong>1.ListView卡顿的原因与性能优化</strong></h3><p>​    <strong>重用convertView：</strong>通过复用convertview来减少不必要的view的创建，另外Inflate操作会把xml文件实例化成相应的View实例，属于IO操作，是耗时操作</p>\n<p>​    <strong>减少findViewById()操作:</strong>将xml文件中的元素封装成viewholder静态类，通过convertview的setTag和getTag方法将view与相应的holder对象绑定在一起，避免不必要的findviewbyid操作</p>\n<p>​    <strong>避免在 getView 方法中做耗时的操作</strong></p>\n<p>​    <strong>使用 RecycleView 代替listview</strong></p>\n<p>​    <strong>ListView 中元素避免半透明</strong></p>\n<h3 id=\"2-三级缓存的原理\"><a href=\"#2-三级缓存的原理\" class=\"headerlink\" title=\"2.三级缓存的原理\"></a><strong>2.三级缓存的原理</strong></h3><p>​    从缓存中加载。</p>\n<p>​    从本地文件中加载(数据库，SDcard)</p>\n<p>​    从网络加载</p>\n<h1 id=\"其他面试题\"><a href=\"#其他面试题\" class=\"headerlink\" title=\"其他面试题:\"></a><strong>其他面试题:</strong></h1><h3 id=\"1-android中进程的优先级\"><a href=\"#1-android中进程的优先级\" class=\"headerlink\" title=\"1.android中进程的优先级\"></a><strong>1.android中进程的优先级</strong></h3><p>​    前台进程</p>\n<p>​    可见进程</p>\n<p>​    服务进程</p>\n<p>​    后台进程</p>\n<p>​    空进程</p>\n<h3 id=\"2-apk安装卸载的原理\"><a href=\"#2-apk安装卸载的原理\" class=\"headerlink\" title=\"2.apk安装卸载的原理\"></a><strong>2.apk安装卸载的原理</strong></h3><p>​    <strong>安装过程：</strong>复制apk安装包到data/app目录下，解压并扫描安装包，把dex文件(dalvik字节码)保存到dalvik-cache目录，并data/data目录下创建对应的应用数据目录</p>\n<p>​    <strong>卸载过程：</strong>删除安装过程中在上述三个目录下创建的文件及目录</p>\n<p><strong>3.Android 中如何捕获未捕获的异常</strong></p>\n<p>​    自定义一个Application 实 现UncaughExceptionHandler,覆写 UncaughtExceptionHandler 的 onCreate 和 uncaughtException 方法</p>\n"},{"title":"Markdown基础语法","date":"2015-04-19T07:07:47.000Z","_content":"\n>Markdown is a lightweight markup language with plain text formatting syntax. It is designed so that it can be converted to HTML and many other formats using a tool by the same name.[8] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. As the initial description of Markdown contained ambiguities and unanswered questions, many implementations and extensions of Markdown appeared over the years to answer these issues.\n>\n>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-------------Wikipedia\n\n\n\n### 标题\n\n如果一段文字被定义为标题,只需要在这段文字前加 '#' 号.\n\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n...\n```\n\n\n\n以此类推,一共六级标题,建议在 '#' 后加一个空格,这是markdown的**标准写法**.\n\n---\n\n### 列表\n\n在markdown里,列表的显示只需要在文字前加上 '-' 或 '*' 即可变为无序列表.\n\n有序列表则直接在文字前加上 '1.'  '2.'  '3.' 注意空格\n\n- markdown\n- markdown\n\n1. markdown\n2. markdown\n\n---\n\n### 引用\n\n如果你需要引用一小段别处的句子,那么需要以下的格式.\n\n> 例如这样\n>\n> ​\t\t------creeperdch\n\n只需在文本前加上 '>' 即可.\n\n---\n\n### 图片与链接\n\n图片为:![](http://i2.hdslb.com/bfs/archive/73b87af92b5d87c3025f954b649fef08bdd36c8e.jpg)\n\n链接为: '[]()'\n\n例如:[实例](http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg)\n\n---\n\n### 粗体与斜体\n\n**这是粗体**: '**text**'\t\t*这是斜体*: '*text*'\t\t这是~~删掉~~\n\n---\n\n### 表格\n\n```markdown\n|one|two|three|\n|:--:|:--:|:--:|\n|\t|\t|\t|\n```\n\n| one  | two  | three |\n| :--: | :--: | :---: |\n|  1   |  2   |   3   |\n\n---\n\n\n\n","source":"_posts/Markdown基础语法.md","raw":"---\ntitle: Markdown基础语法\ndate: 2015-04-19 15:07:47\ntags: markdown\ncategories: markdown\n---\n\n>Markdown is a lightweight markup language with plain text formatting syntax. It is designed so that it can be converted to HTML and many other formats using a tool by the same name.[8] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. As the initial description of Markdown contained ambiguities and unanswered questions, many implementations and extensions of Markdown appeared over the years to answer these issues.\n>\n>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-------------Wikipedia\n\n\n\n### 标题\n\n如果一段文字被定义为标题,只需要在这段文字前加 '#' 号.\n\n```markdown\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n...\n```\n\n\n\n以此类推,一共六级标题,建议在 '#' 后加一个空格,这是markdown的**标准写法**.\n\n---\n\n### 列表\n\n在markdown里,列表的显示只需要在文字前加上 '-' 或 '*' 即可变为无序列表.\n\n有序列表则直接在文字前加上 '1.'  '2.'  '3.' 注意空格\n\n- markdown\n- markdown\n\n1. markdown\n2. markdown\n\n---\n\n### 引用\n\n如果你需要引用一小段别处的句子,那么需要以下的格式.\n\n> 例如这样\n>\n> ​\t\t------creeperdch\n\n只需在文本前加上 '>' 即可.\n\n---\n\n### 图片与链接\n\n图片为:![](http://i2.hdslb.com/bfs/archive/73b87af92b5d87c3025f954b649fef08bdd36c8e.jpg)\n\n链接为: '[]()'\n\n例如:[实例](http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg)\n\n---\n\n### 粗体与斜体\n\n**这是粗体**: '**text**'\t\t*这是斜体*: '*text*'\t\t这是~~删掉~~\n\n---\n\n### 表格\n\n```markdown\n|one|two|three|\n|:--:|:--:|:--:|\n|\t|\t|\t|\n```\n\n| one  | two  | three |\n| :--: | :--: | :---: |\n|  1   |  2   |   3   |\n\n---\n\n\n\n","slug":"Markdown基础语法","published":1,"updated":"2017-09-21T04:07:13.970Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zgagyp0002nslfd8kx2z6d","content":"<blockquote>\n<p>Markdown is a lightweight markup language with plain text formatting syntax. It is designed so that it can be converted to HTML and many other formats using a tool by the same name.[8] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. As the initial description of Markdown contained ambiguities and unanswered questions, many implementations and extensions of Markdown appeared over the years to answer these issues.</p>\n<p>​                                                                ————-Wikipedia</p>\n</blockquote>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>如果一段文字被定义为标题,只需要在这段文字前加 ‘#’ 号.</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># 一级标题</span></div><div class=\"line\"><span class=\"section\">## 二级标题</span></div><div class=\"line\"><span class=\"section\">### 三级标题</span></div><div class=\"line\"><span class=\"section\">#### 四级标题</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>以此类推,一共六级标题,建议在 ‘#’ 后加一个空格,这是markdown的<strong>标准写法</strong>.</p>\n<hr>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>在markdown里,列表的显示只需要在文字前加上 ‘-‘ 或 ‘*’ 即可变为无序列表.</p>\n<p>有序列表则直接在文字前加上 ‘1.’  ‘2.’  ‘3.’ 注意空格</p>\n<ul>\n<li>markdown</li>\n<li>markdown</li>\n</ul>\n<ol>\n<li>markdown</li>\n<li>markdown</li>\n</ol>\n<hr>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>如果你需要引用一小段别处的句子,那么需要以下的格式.</p>\n<blockquote>\n<p>例如这样</p>\n<p>​        ——creeperdch</p>\n</blockquote>\n<p>只需在文本前加上 ‘&gt;’ 即可.</p>\n<hr>\n<h3 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h3><p>图片为:<img src=\"http://i2.hdslb.com/bfs/archive/73b87af92b5d87c3025f954b649fef08bdd36c8e.jpg\" alt=\"\"></p>\n<p>链接为: ‘<a href=\"\"></a>‘</p>\n<p>例如:<a href=\"http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg\" target=\"_blank\" rel=\"external\">实例</a></p>\n<hr>\n<h3 id=\"粗体与斜体\"><a href=\"#粗体与斜体\" class=\"headerlink\" title=\"粗体与斜体\"></a>粗体与斜体</h3><p><strong>这是粗体</strong>: ‘<strong>text</strong>‘        <em>这是斜体</em>: ‘<em>text</em>‘        这是<del>删掉</del></p>\n<hr>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">|one|two|three|</div><div class=\"line\">|:--:|:--:|:--:|</div><div class=\"line\">|\t|\t|\t|</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">one</th>\n<th style=\"text-align:center\">two</th>\n<th style=\"text-align:center\">three</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n</tbody>\n</table>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>Markdown is a lightweight markup language with plain text formatting syntax. It is designed so that it can be converted to HTML and many other formats using a tool by the same name.[8] Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor. As the initial description of Markdown contained ambiguities and unanswered questions, many implementations and extensions of Markdown appeared over the years to answer these issues.</p>\n<p>​                                                                ————-Wikipedia</p>\n</blockquote>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><p>如果一段文字被定义为标题,只需要在这段文字前加 ‘#’ 号.</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"section\"># 一级标题</span></div><div class=\"line\"><span class=\"section\">## 二级标题</span></div><div class=\"line\"><span class=\"section\">### 三级标题</span></div><div class=\"line\"><span class=\"section\">#### 四级标题</span></div><div class=\"line\">...</div></pre></td></tr></table></figure>\n<p>以此类推,一共六级标题,建议在 ‘#’ 后加一个空格,这是markdown的<strong>标准写法</strong>.</p>\n<hr>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>在markdown里,列表的显示只需要在文字前加上 ‘-‘ 或 ‘*’ 即可变为无序列表.</p>\n<p>有序列表则直接在文字前加上 ‘1.’  ‘2.’  ‘3.’ 注意空格</p>\n<ul>\n<li>markdown</li>\n<li>markdown</li>\n</ul>\n<ol>\n<li>markdown</li>\n<li>markdown</li>\n</ol>\n<hr>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>如果你需要引用一小段别处的句子,那么需要以下的格式.</p>\n<blockquote>\n<p>例如这样</p>\n<p>​        ——creeperdch</p>\n</blockquote>\n<p>只需在文本前加上 ‘&gt;’ 即可.</p>\n<hr>\n<h3 id=\"图片与链接\"><a href=\"#图片与链接\" class=\"headerlink\" title=\"图片与链接\"></a>图片与链接</h3><p>图片为:<img src=\"http://i2.hdslb.com/bfs/archive/73b87af92b5d87c3025f954b649fef08bdd36c8e.jpg\" alt=\"\"></p>\n<p>链接为: ‘<a href=\"\"></a>‘</p>\n<p>例如:<a href=\"http://ww2.sinaimg.cn/large/6aee7dbbgw1efffa67voyj20ix0ctq3n.jpg\" target=\"_blank\" rel=\"external\">实例</a></p>\n<hr>\n<h3 id=\"粗体与斜体\"><a href=\"#粗体与斜体\" class=\"headerlink\" title=\"粗体与斜体\"></a>粗体与斜体</h3><p><strong>这是粗体</strong>: ‘<strong>text</strong>‘        <em>这是斜体</em>: ‘<em>text</em>‘        这是<del>删掉</del></p>\n<hr>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">|one|two|three|</div><div class=\"line\">|:--:|:--:|:--:|</div><div class=\"line\">|\t|\t|\t|</div></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">one</th>\n<th style=\"text-align:center\">two</th>\n<th style=\"text-align:center\">three</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">3</td>\n</tr>\n</tbody>\n</table>\n<hr>\n"},{"title":"Android百大框架排行榜","date":"2017-06-18T15:27:58.000Z","_content":"\n# 一.框架介绍\n\n排行榜包括四大类:\n\n**单一框架:**仅提供路由、网络层、UI层、通信层或其他**单一功能**的框架。\n\n**混合开发框架:**提供开发**hybrid app、H5与Webview结合能力、web App能力**的框架。\n\n**企业级开源项目:**可以独立运行的App，有极高的学习价值、思路借鉴意义。\n\n**书籍类开源项目:**类似Open-Source-Project这样的导航类项目；大型公司的Android课程的学习目录。\n\n榜单排序依据:\n\n1. 项目开源\n2. Github上项目的star数\n3. 开发团队、作者的实力\n\n适用读者范围:\n\n- 正在入门Android的新手---Android初级开发工程师\n\n- Android初级开发工程师---Android中级开发工程师\n\n- Android中、高级、资深开发工程师\n\n  **框架名次越靠前，值得使用的优先级就越高、研究原理得到的收获会更多、对读者启发的价值就越大**\n\n# 二.百大框架排行榜\n\n| 框架名称                             | 上榜关键字  |\n| :------------------------------- | :----: |\n| 1.retrofit                       |   网络   |\n| 2.okhttp                         |   网络   |\n| 3.Butter Knife                   |  代码模板  |\n| 4.MPAndroidChart                 |   图表   |\n| 5.Glide                          |   图片   |\n| 6.LeakCanary                     |   内存   |\n| 7.Android-Universal-Image_Loader |   图片   |\n| 8.EventBus                       |  事件消息  |\n| 9.zxing                          |  条码扫描  |\n| 10.Picasso                       |   图片   |\n| 11.lottie-android                |   动画   |\n| 12.fresco                        |   图片   |\n| 13.RxAndroid                     |   异步   |\n| 14.SlidingMenu                   |   菜单   |\n| 15.PhotoVIew                     |   图片   |\n| 16.Material-Dialogs              |   UI   |\n| 17.droid-async-http              |   网络   |\n| 18.androidanotations             |   注解   |\n| 19.fastjson                      |  json  |\n| 20.Material-Animations           |   动画   |\n| 21.tinker                        |  热修复   |\n| 22.ViewPagerIndicator            |   UI   |\n| 23.Android-CleanArchitecture     |   架构   |\n| 24.Android-PullToRefresh         |   刷新   |\n| 25.flexbox-layout                |   UI   |\n| 26.AndroidSwipeLayout            |   UI   |\n| 27.realm-java                    |  数据库   |\n| 28.greenDAO                      |   数据   |\n| 29.stetho                        |   调试   |\n| 30.BaseRecyclerViewAdapterHelper |   UI   |\n| 31.AndroidViewAnimations         |   动画   |\n| 32.MaterialDrawer                |   菜单   |\n| 33.Android-ObservableScrollView  |   UI   |\n| 34.CircleImageView               |   图片   |\n| 35.logger                        |   调试   |\n| 36.agera                         |   异步   |\n| 37.BottmBar                      |   菜单   |\n| 38.Calligraphy                   |   字体   |\n| 39.AndroidSlidingUpPanel         |   UI   |\n| 40.AppIntro                      |   UI   |\n| 41.recyclerview-animators        |   动画   |\n| 42.dagger                        |  依赖注入  |\n| 43.Android-Bootstrap             |   UI   |\n| 44.RxBinding                     |  响应式   |\n| 45.ListViewAnimations            |   动画   |\n| 46.UItimateRecyclerView          |   UI   |\n| 47.uCrop                         |   图片   |\n| 48.RxJava-Android-Samples        |   用例   |\n| 49.AndroidAutoLayout             |   适配   |\n| 50.EffectiveAndroidUI            |   性能   |\n| 51.Luban                         |   图片   |\n| 52.DroidPlugin                   |  插件化   |\n| 53.otto                          |  响应式   |\n| 54.u2020                         |   用例   |\n| 55.buck                          |   构建   |\n| 56.PermissionsDispatcher         |   权限   |\n| 57.android-gif-drawable          |  GIF   |\n| 58.Apktool                       |  反编译   |\n| 59.dynamic-load-apk              |  插件化   |\n| 60.atlas                         |  插件化   |\n| 61.Volley                        |   网络   |\n| 62.androidmvp                    |   用例   |\n| 63.SwipeBackLayout               |   手势   |\n| 64.FlycoTabLayout                |   UI   |\n| 65.android-testing               |   测试   |\n| 66.FileDownloader                |   下载   |\n| 67.JieCaoVideoPlayer             |  多媒体   |\n| 68.glide-transformations         |   图片   |\n| 69.android-gpuimage              |   图片   |\n| 70.RxPermissions                 |   权限   |\n| 71.freeline                      |   编译   |\n| 72.RxLifecycle                   |  生命周期  |\n| 73.classyshark                   |  反编译   |\n| 74.acra                          |  崩溃日志  |\n| 75.DiskLruCache                  |   文件   |\n| 76.dexposed                      |  热修复   |\n| 77.Litho                         |   性能   |\n| 78.mosby                         |  MVP   |\n| 79.AndResGuard                   |   混淆   |\n| 80.StatusBarUtil                 |  状态栏   |\n| 81.robolectric                   |   测试   |\n| 82.Fragmentation                 |   嵌套   |\n| 83.Small                         |  插件化   |\n| 84.JsBridge                      | hybrid |\n| 85.richeditor-android            |   UI   |\n| 86.Transitions-Everywhere        |   动画   |\n| 87.android-viewbadger            |   勋章   |\n| 88.AndroidWiFiADB                |   调试   |\n| 89.emojicon                      |  表情包   |\n| 90.packer-ng-plugin              |  多渠道   |\n| 91.android-priority-jobqueue     |  多线程   |\n| 92.Android-Debug-Database        |   调试   |\n| 93.conceal                       |   加密   |\n| 94.ARouter                       |  页面路由  |\n| 95.MagicaSakura                  |  多主题   |\n| 96.CustomActivityOnCrash         |   崩溃   |\n| 97.XhsEmoticonsKeyboard          |   键盘   |\n\n### 1.retrofit\n\n一句话介绍：Retrofit是一款类型安全的网络框架，基于HTTP协议，服务于Android和java语言\n\n上榜理由：Retrofit以21.8k的stars量雄踞github中android子标题榜首，第一当之无愧。\n\n官网地址 [http://square.github.io/retrofit/](http://square.github.io/retrofit/)\n\ngithub  [https://github.com/square/retrofit](https://github.com/square/retrofit)\n\n作者：square团队\n\n使用：\n\n```build.gradle\ncompile 'com.squareup.retrofit2:retrofit:2.3.0'\n```\n\n### 2.okhttp\n\n一句话介绍：okhttp是一款基于HTTP和HTTP2.0协议的网络框架，服务于java和android客户端\n\n上榜理由，okhttp以20.4k的stars量雄踞github中android子标题第二名。大型公司比如淘宝也封装的是okhttp。Retrofit2.0开始内置okhttp框架，Retrofit专注封装接口完成业务需求，okhttp专注网络请求的安全高效，笔者将两者区分开，是想让后来学习者知道，这是两套框架，学习框架原理时可以分开学习，以免理解混乱。\n\n官网地址   [http://square.github.io/okhttp/](https://github.com/JakeWharton/butterknife)\n\ngithub    [https://github.com/square/okhttp](https://github.com/square/okhttp)\n\n作者：square团队\n\n使用：\n\n```build.gradle\ncompile 'com.squareup.okhttp3:okhttp:3.8.0'\n```\n\n### 3.Butter Knife\n\n一句话介绍：Butter Knife所提供了一种能力——使用注解生成模板代码，将view与方法和参数绑定。\n\n上榜理由：github上16.5K个star，配合Androidstudio提供的Butter Knife插件，帮助开发者省却了频繁findviewbyid的烦恼，最新的Butter Knife还提供了onclick绑定以及字符串的初始化，初学者可以查阅Butter Knife以及Butter Knife插件进一步学习！\n\n官网地址：[http://jakewharton.github.io/butterknife/](http://jakewharton.github.io/butterknife/)\n\ngithub：[https://github.com/JakeWharton/butterknife](https://github.com/JakeWharton/butterknife)\n\n作者：JakeWharton ，也是square团队成员之一\n\n使用：\n\n```build.gradle\ndependencies {\n  compile 'com.jakewharton:butterknife:8.6.0'\n  annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'\n}\n```\n\n### 4.MPAndroidChart\n\n一句话介绍：MPAndroidChart是一款图表框架\n\n上榜理由：github上16.1K个star，以快速、简洁。强大著称的图表框架\n\n官网地址 [https://github.com/PhilJay/MPAndroidChart ](https://github.com/PhilJay/MPAndroidChart%20) \n\ngithub  [https://github.com/PhilJay/MPAndroidChart](https://github.com/PhilJay/MPAndroidChart)\n\n作者：PhilJay\n\n使用：\n\n**在AS中加入Gradle依赖**\n\n   - 在根目录的build.gradle加入:\n\n     ```build.gradle\n     allprojects {\n         repositories {\n             maven { url \"https://jitpack.io\" }\n         }\n     }\n     ```\n\n- 在根目录的build.gradle加入:\n\n  ```build.gradle\n  dependencies {\n      compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'\n  }\n  ```\n\n### 5.Glide\n\n一句话介绍：glide是一款专注于提供**流畅划动能力**的“图片加载和缓存框架”\n\n上榜理由：15.9k个star，图片加载类框架排名第一的框架，google 在2014开发者大会上演示的camera app就是基于gilde框架开发的\n\ngithub [https://github.com/bumptech/glide](https://github.com/bumptech/glide)\n\n作者 Bump Technologies团队\n\n使用：\n\n```build.gradle\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n    compile 'com.github.bumptech.glide:glide:3.8.0'\n    compile 'com.android.support:support-v4:19.1.0'\n}\n```\n\n### 6.Leak Canary\n\n一句话介绍：一款内存检测框架，服务于java和android客户端\n\n上榜理由：方便，简洁是leakcanary最大的特点，只需在应用的apllication中集成，就可以直接使用它；15.5k个star说明了它有多么受欢迎\n\ngithub https://github.com/square/leakcanary\n\n作者 square团队\n\n使用：\n\n```build.gradle\ndependencies {\n   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'\n   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'\n   testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'\n }\n```\n\n在Application中写入:\n\n```java\npublic class ExampleApplication extends Application {\n\n  @Override public void onCreate() {\n    super.onCreate();\n    if (LeakCanary.isInAnalyzerProcess(this)) {\n      // This process is dedicated to LeakCanary for heap analysis.\n      // You should not init your app in this process.\n      return;\n    }\n    LeakCanary.install(this);\n    // Normal app init code...\n  }\n}\n```\n\n### 7.Android-Universal-Image_Loader\n\n一句话介绍：曾经的图片加载框架王者，android开发老手都用过它\n\n上榜理由:android端图片加载框架的老大哥了，15.3k个star足以证明它的热门，UIL与gilde最大区别是可定制，UIL提供了大量配置方式，图片加载状态的回调（成功，失败，进行中），加载动画等；以及提供了移动端图片加载框架的缓存思路：三级缓存策略 sd卡-内存-网络；值得注意的是，UIL以及两年未更新了，但笔者仍推荐各位使用！\n\ngithub https://github.com/nostra13/Android-Universal-Image-Loader\n\n作者 nostra13\n\n使用：\n\n下载地址:[universal-image-loader-1.9.5.jar](https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/downloads/universal-image-loader-1.9.5.jar)\n\n### 8.EventBus \n\n一句话介绍：EventBus是一款本地组件间通信框架\n\n上榜理由：组件间通信框架star量第一：14.8k，在大型项目的Activities，fragments，Threads，Services都可以看到它的使用场景，尽管EventBus在向未创建的组件传递事件时有些局限，仅适合在“活着的”组件间传递消息，但仍不妨碍它活跃在各个大型项目各个场景里。\n\n官网地址 http://greenrobot.org/eventbus/documentation/how-to-get-started/\n\ngithub  https://github.com/greenrobot/EventBus\n\n作者 greenrobot \n\n使用：\n\n```build.gradle\ncompile 'org.greenrobot:eventbus:3.0.0'\n```\n\n### 9.zxing\n\n一句话介绍：条码图像处理库\n\n上榜理由：如果你用过二维码，你肯定已经间接使用过大名鼎鼎的zxing了。13.9K的star量，让它排在本榜单第九，实至名归，如果你有了解二维码的需求，不妨从了解、修改它源码入手。\n\ngithub [ https://github.com/zxing/zxing](https://github.com/zxing/zxing)\n\n作者  Sean Owen\n\n### 10.picasso\n\n一句话介绍：强力的图片下载、缓存框架\n\n上榜理由：本榜单出现的第三款图片类框架，不同的是picasso更强调图片下载，你可以将picasso集成进你的项目中，你也可以结合gilde和UIL与picasso，三者一齐封装至你的项目中，按需所用。\n\n官网地址 http://square.github.io/picasso/\n\ngithub  https://github.com/square/picasso\n\n作者 square团队\n\n使用：\n\n```build.gradle\ncompile 'com.squareup.picasso:picasso:2.5.2'\n```\n\n### 11.lottie-android\n\n一句话介绍：一款可以在Android端快速展示Adobe Afeter Effect（AE）工具所作动画的框架\n\n上榜理由：动画类框架第一名，github上13.3k个star证明了他的优越性，利用json文件快速实现动画效果是它最大的便利，而这个json文件也是由Adobe提供的After Effects（AE）工具制作的，在AE中装一个Bodymovin的插件，使用这个插件最终将动画效果生成json文件，这个json文件即可由LottieAnimationView解析并生成绚丽的动画效果。而且它还支持跨平台哟。\n\ngithub  https://github.com/airbnb/lottie-android\n\n作者：Airbnb 团队\n\n### 12.fresco\n\n一句话介绍：一款可以管理图片内存的框架\n\n上榜理由:github上12.8k个star，图片类排行榜第四名，facebook的出身证明了它并非是重复造的轮子，在管理图片内存领域上有着它的一片天地，渐进式加载、加载gif都是它与前三位相比独有的特性\n\n官网地址： https://www.fresco-cn.org/\n\ngithub  https://github.com/facebook/fresco\n\n作者 facebook\n\n使用：\n\n```build.gradle\ndependencies {\n  // 其他依赖\n  compile 'com.facebook.fresco:fresco:0.12.0'\n}\n```\n\n**下面的依赖需要根据需求添加：**\n\n```build.gradle\ndependencies {\n  // 在 API < 14 上的机器支持 WebP 时，需要添加\n  compile 'com.facebook.fresco:animated-base-support:0.12.0'\n\n  // 支持 GIF 动图，需要添加\n  compile 'com.facebook.fresco:animated-gif:0.12.0'\n\n  // 支持 WebP （静态图+动图），需要添加\n  compile 'com.facebook.fresco:animated-webp:0.12.0'\n  compile 'com.facebook.fresco:webpsupport:0.12.0'\n\n  // 仅支持 WebP 静态图，需要添加\n  compile 'com.facebook.fresco:webpsupport:0.12.0'\n}\n```\n\n### 13.RxAndroid\n\n一句话介绍：一款Android客户端组件间异步通信的框架\n\n上榜理由：github上12.7k个star，位居组件通信框架的第二名，仅在EventBus之后，如果要问两者的区别，Eventbus是用来取代组件间繁琐的interface，RxAndroid是用来取代AnsyTask的，并不冲突；当然RxAndroid的优点并不仅限于此，更多优雅的实现，可以去官网查阅！\n\ngithub  [https://github.com/ReactiveX/RxAndroid](https://github.com/ReactiveX/RxAndroid)\n\n作者 JakeWharton\n\n使用：\n\n```build.gradle\ncompile 'io.reactivex.rxjava2:rxandroid:2.0.1'\ncompile 'io.reactivex.rxjava2:rxjava:2.1.0'\n```\n\n### 14.SlidingMenu\n\n一句话介绍：侧滑菜单栏框架\n\n上榜理由：与Userval-Image-loader 齐名的上古神器框架——为你的app提供侧滑菜单栏的功能；github闪更有10.5k个star，证明了它的经久不衰，即使在Google推出了NavigationDrawer，仍然没有减少开发者对SildingMenu的拥簇，经典总是经得起考验的，这个上古神兽已经四年没有更新了；有太多太多的app使用过它，这些都可以在软件的开源许可上看到！\n\ngithub [https://github.com/jfeinstein10/SlidingMenu](https://github.com/jfeinstein10/SlidingMenu)\n\n作者 Jeremy Feinstein\n\n使用：\n\n在gihub上fork源码，集成进项目中\n\n### 15.PhotoView\n\n一句话介绍：一款ImageView展示框架，支持缩放，响应手势\n\n上榜理由：10.3k的star数量，位于图片类框架排行榜第五位，PhotoView与前四位不同的是这次带来的是图片的展示能力，你一定好奇微信的头像点击放大是如何实现的，很多App的图片显示响应手势按压是如何实现的，了解PhotoView，你一定会开心的！（笔者也不会告诉你ImageView的点击放大效果在Android的sample也有）\n\ngithub  [https://github.com/chrisbanes/PhotoView](https://github.com/chrisbanes/PhotoView)\n\n作者：chrisbanes\n\n使用：\n\n```build.gradle\n在app根目录的build.gradle中加入：\nallprojects {\n    repositories {\n        maven { url \"https://jitpack.io\" }\n    }\n}\n在app的module目录的build.gralde中加入：\n\ndependencies {\n    compile 'com.github.chrisbanes:PhotoView:latest.release.here'\n}\n```\n\n```xml\n<com.github.chrisbanes.photoview.PhotoView\n    android:id=\"@+id/photo_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"/>\n```\n\n```java\nPhotoView photoView = (PhotoView) findViewById(R.id.photo_view);\nphotoView.setImageResource(R.drawable.image);\n```\n\n### 16.material-dialogs\n\n一句话介绍：一款自定义dialog框架\n\n上榜理由：9.9k个star，也是继PhotoView，SlidingMenu之后第三款自定义View框架，也许你还是自定义View的新人，对Dialog使用的还有点生疏，你可以通过它提升你的Dilaog使用能力\n\ngithub  [https://github.com/afollestad/material-dialogs](https://github.com/afollestad/material-dialogs)\n\n作者：Aidan Follestad\n\n使用：\n\n```build.gradle\ndependencies {\n    // ... other dependencies here\n    compile 'com.afollestad.material-dialogs:core:0.9.4.5'\n}\n```\n\n### 17.droid-async-http\n\n 一句话介绍：一款基于Http协议的异步请求的网络框架，\n\n上榜理由：虽然你有无数个使用retrofit+okhttp的理由，但9.8k个star，证明它仍然值得你深入学习。值得注意的是，它也已经有两年没更新了，你尽管拿去当你懒惰的理由！\n\ngithub   [https://github.com/loopj/android-async-http](https://github.com/loopj/android-async-http)\n\n作者：James Smith\n\n使用：\n\n```build.gradle\nrepositories {\n  maven {\n    url 'https://oss.sonatype.org/content/repositories/snapshots/'\n  }\n}\ndependencies {\n  compile 'com.loopj.android:android-async-http:1.5.0-SNAPSHOT'\n}\n```\n\n### 18.androidannotations\n\n一句话介绍：一款基于注解的快速开发框架\n\n上榜理由：与Butterknife一样基于注解，利用注解快速完成view的初始化，不同的是androidannotations提供了更多的能力：简单的线程模型等；笔者只接触过Butterknife，无法更进一步叙述androidannotations的优势，如果你志在深入了解注解的妙用，可以尝试探索一下！\n\n官网地址 [http://androidannotations.org/](http://androidannotations.org/)\n\ngithub [https://github.com/androidannotations/androidannotations](https://github.com/androidannotations/androidannotations)\n\n作者： WonderCsabo\n\n### 19.fastjson\n\n一句话介绍:一款基于json解析、生成的框架\n\n上榜理由：从它的名字不难看出，快速是它最大的特性，阿里巴巴的出身保证了代码的质量和优越，9.4k的star数量，也是榜单里第一个出现的中国开源框架，涉及网络的app都会用到json，fastjson值得作为你的首选！\n\ngithub  [https://github.com/alibaba/fastjson](https://github.com/alibaba/fastjson)\n\n作者：alibaba\n\n使用：\n\n```build.gradle\ncompile 'com.alibaba:fastjson:1.1.58.android'\n```\n\n### 20.Material-Animations\n\n一句话介绍：一款提供场景转换过渡能力的动画框架\n\n上榜理由：Android动画框架排行榜第二名，9.3k个star数量，与动画框架榜单第一名lottie-android不同的是，Material-Animations提供的是场景切换的动画效果。Android 官网sample中已经提供了部分Transition （转场动画）的展示，作为初学者很难快速拓展到自己项目中，Material-Animations的示例出现为开发者省去了此类麻烦，直接照搬应用到自己的App中吧。\n\n github  [https://github.com/lgvalle/Material-Animations](https://github.com/lgvalle/Material-Animations)\n\n作者：Luis G. Valle\n\n使用：\n\ndown源码，修改学习\n\n### 21.tinker\n\n一句话介绍：它是微信官网的Android热补丁解决方案\n\n上榜理由：9.1k个star，微信在用的热补丁方案，心动不如行动\n\n官网地址  [http://www.tinkerpatch.com/Docs/intro](http://www.tinkerpatch.com/Docs/intro)\n\ngithub   [https://github.com/Tencent/tinker](https://github.com/Tencent/tinker)\n\n作者：Tencent\n\n### 22.ViewPagerIndicator\n\n一句话介绍：一款基于ViewPager的页面指示器开源框架\n\n上榜理由：上古神器，尽管已经五年未更新了，但你仍然可以在淘宝等app中看到它的使用场景，8.9K的star量让它不愠不火的在矗立在榜单里\n\n官网地址 [http://viewpagerindicator.com/](http://viewpagerindicator.com/)\n\ngithub  [https://github.com/JakeWharton/ViewPagerIndicator](https://github.com/JakeWharton/ViewPagerIndicator)\n\n作者：JakeWharton \n\n使用：\n\n 下载 地址[ https://github.com/JakeWharton/Android-ViewPagerIndicator/zipball/master](https://github.com/JakeWharton/Android-ViewPagerIndicator/zipball/master)\n\n### 23.Android-CleanArchitecture\n\n一句话介绍：一个讲解设计框架的demo\n\n上榜理由：它不是框架，你可以把它当作一本书，它将教会你如何设计简洁的架构，工程里有一个sample app，配合图文讲解，你将对Android客户端的架构有更深一层的认识。8.8k的star数量，证明了它是一本“好书”哟。\n\ngithub  [https://github.com/android10/Android-CleanArchitecture](https://github.com/android10/Android-CleanArchitecture)\n\n作者：Fernando Cejas\n\n### 24.Android-PullToRefresh\n\n一句话介绍：一款为普通视图提供刷新UI的视图框架\n\n上榜理由：8.2K的star数量使它位居刷新类UI框架榜首，强大的兼容能力，该框架支持ListView，GrdiView，WebViewScrollView，ViewPager等众多View增加刷新的能力，如果你有增加上拉加载，下拉加载的需求，你应该考虑它了！\n\ngithub [https://github.com/chrisbanes/Android-PullToRefresh](https://github.com/chrisbanes/Android-PullToRefresh)\n\n作者：Chris Banes\n\n使用：\n\ngithub fork源码，集成到项目中\n\n### 25.flexbox-layout\n\n一句话介绍：一款弹性伸缩布局\n\n上榜理由：8.1k个star，前端H5开发者转Android开发的福音，FlexboxLayout作为`LinearLayout`和`RelativeLayout的替代者，值得各位一试，与其一同推出的还有ConstraintLayout。`\n\ngithub  [https://github.com/google/flexbox-layout](https://github.com/google/flexbox-layout)\n\n作者：Google\n\n使用：\n\n```build.gradle\ndependencies {\n    compile 'com.google.android:flexbox:0.3.0-alpha3'\n}\n```\n\n**未完待续**\n\n","source":"_posts/Android百大框架排行榜.md","raw":"---\ntitle: Android百大框架排行榜\ndate: 2017-06-18 23:27:58\ntags: android\ncategories: android\n---\n\n# 一.框架介绍\n\n排行榜包括四大类:\n\n**单一框架:**仅提供路由、网络层、UI层、通信层或其他**单一功能**的框架。\n\n**混合开发框架:**提供开发**hybrid app、H5与Webview结合能力、web App能力**的框架。\n\n**企业级开源项目:**可以独立运行的App，有极高的学习价值、思路借鉴意义。\n\n**书籍类开源项目:**类似Open-Source-Project这样的导航类项目；大型公司的Android课程的学习目录。\n\n榜单排序依据:\n\n1. 项目开源\n2. Github上项目的star数\n3. 开发团队、作者的实力\n\n适用读者范围:\n\n- 正在入门Android的新手---Android初级开发工程师\n\n- Android初级开发工程师---Android中级开发工程师\n\n- Android中、高级、资深开发工程师\n\n  **框架名次越靠前，值得使用的优先级就越高、研究原理得到的收获会更多、对读者启发的价值就越大**\n\n# 二.百大框架排行榜\n\n| 框架名称                             | 上榜关键字  |\n| :------------------------------- | :----: |\n| 1.retrofit                       |   网络   |\n| 2.okhttp                         |   网络   |\n| 3.Butter Knife                   |  代码模板  |\n| 4.MPAndroidChart                 |   图表   |\n| 5.Glide                          |   图片   |\n| 6.LeakCanary                     |   内存   |\n| 7.Android-Universal-Image_Loader |   图片   |\n| 8.EventBus                       |  事件消息  |\n| 9.zxing                          |  条码扫描  |\n| 10.Picasso                       |   图片   |\n| 11.lottie-android                |   动画   |\n| 12.fresco                        |   图片   |\n| 13.RxAndroid                     |   异步   |\n| 14.SlidingMenu                   |   菜单   |\n| 15.PhotoVIew                     |   图片   |\n| 16.Material-Dialogs              |   UI   |\n| 17.droid-async-http              |   网络   |\n| 18.androidanotations             |   注解   |\n| 19.fastjson                      |  json  |\n| 20.Material-Animations           |   动画   |\n| 21.tinker                        |  热修复   |\n| 22.ViewPagerIndicator            |   UI   |\n| 23.Android-CleanArchitecture     |   架构   |\n| 24.Android-PullToRefresh         |   刷新   |\n| 25.flexbox-layout                |   UI   |\n| 26.AndroidSwipeLayout            |   UI   |\n| 27.realm-java                    |  数据库   |\n| 28.greenDAO                      |   数据   |\n| 29.stetho                        |   调试   |\n| 30.BaseRecyclerViewAdapterHelper |   UI   |\n| 31.AndroidViewAnimations         |   动画   |\n| 32.MaterialDrawer                |   菜单   |\n| 33.Android-ObservableScrollView  |   UI   |\n| 34.CircleImageView               |   图片   |\n| 35.logger                        |   调试   |\n| 36.agera                         |   异步   |\n| 37.BottmBar                      |   菜单   |\n| 38.Calligraphy                   |   字体   |\n| 39.AndroidSlidingUpPanel         |   UI   |\n| 40.AppIntro                      |   UI   |\n| 41.recyclerview-animators        |   动画   |\n| 42.dagger                        |  依赖注入  |\n| 43.Android-Bootstrap             |   UI   |\n| 44.RxBinding                     |  响应式   |\n| 45.ListViewAnimations            |   动画   |\n| 46.UItimateRecyclerView          |   UI   |\n| 47.uCrop                         |   图片   |\n| 48.RxJava-Android-Samples        |   用例   |\n| 49.AndroidAutoLayout             |   适配   |\n| 50.EffectiveAndroidUI            |   性能   |\n| 51.Luban                         |   图片   |\n| 52.DroidPlugin                   |  插件化   |\n| 53.otto                          |  响应式   |\n| 54.u2020                         |   用例   |\n| 55.buck                          |   构建   |\n| 56.PermissionsDispatcher         |   权限   |\n| 57.android-gif-drawable          |  GIF   |\n| 58.Apktool                       |  反编译   |\n| 59.dynamic-load-apk              |  插件化   |\n| 60.atlas                         |  插件化   |\n| 61.Volley                        |   网络   |\n| 62.androidmvp                    |   用例   |\n| 63.SwipeBackLayout               |   手势   |\n| 64.FlycoTabLayout                |   UI   |\n| 65.android-testing               |   测试   |\n| 66.FileDownloader                |   下载   |\n| 67.JieCaoVideoPlayer             |  多媒体   |\n| 68.glide-transformations         |   图片   |\n| 69.android-gpuimage              |   图片   |\n| 70.RxPermissions                 |   权限   |\n| 71.freeline                      |   编译   |\n| 72.RxLifecycle                   |  生命周期  |\n| 73.classyshark                   |  反编译   |\n| 74.acra                          |  崩溃日志  |\n| 75.DiskLruCache                  |   文件   |\n| 76.dexposed                      |  热修复   |\n| 77.Litho                         |   性能   |\n| 78.mosby                         |  MVP   |\n| 79.AndResGuard                   |   混淆   |\n| 80.StatusBarUtil                 |  状态栏   |\n| 81.robolectric                   |   测试   |\n| 82.Fragmentation                 |   嵌套   |\n| 83.Small                         |  插件化   |\n| 84.JsBridge                      | hybrid |\n| 85.richeditor-android            |   UI   |\n| 86.Transitions-Everywhere        |   动画   |\n| 87.android-viewbadger            |   勋章   |\n| 88.AndroidWiFiADB                |   调试   |\n| 89.emojicon                      |  表情包   |\n| 90.packer-ng-plugin              |  多渠道   |\n| 91.android-priority-jobqueue     |  多线程   |\n| 92.Android-Debug-Database        |   调试   |\n| 93.conceal                       |   加密   |\n| 94.ARouter                       |  页面路由  |\n| 95.MagicaSakura                  |  多主题   |\n| 96.CustomActivityOnCrash         |   崩溃   |\n| 97.XhsEmoticonsKeyboard          |   键盘   |\n\n### 1.retrofit\n\n一句话介绍：Retrofit是一款类型安全的网络框架，基于HTTP协议，服务于Android和java语言\n\n上榜理由：Retrofit以21.8k的stars量雄踞github中android子标题榜首，第一当之无愧。\n\n官网地址 [http://square.github.io/retrofit/](http://square.github.io/retrofit/)\n\ngithub  [https://github.com/square/retrofit](https://github.com/square/retrofit)\n\n作者：square团队\n\n使用：\n\n```build.gradle\ncompile 'com.squareup.retrofit2:retrofit:2.3.0'\n```\n\n### 2.okhttp\n\n一句话介绍：okhttp是一款基于HTTP和HTTP2.0协议的网络框架，服务于java和android客户端\n\n上榜理由，okhttp以20.4k的stars量雄踞github中android子标题第二名。大型公司比如淘宝也封装的是okhttp。Retrofit2.0开始内置okhttp框架，Retrofit专注封装接口完成业务需求，okhttp专注网络请求的安全高效，笔者将两者区分开，是想让后来学习者知道，这是两套框架，学习框架原理时可以分开学习，以免理解混乱。\n\n官网地址   [http://square.github.io/okhttp/](https://github.com/JakeWharton/butterknife)\n\ngithub    [https://github.com/square/okhttp](https://github.com/square/okhttp)\n\n作者：square团队\n\n使用：\n\n```build.gradle\ncompile 'com.squareup.okhttp3:okhttp:3.8.0'\n```\n\n### 3.Butter Knife\n\n一句话介绍：Butter Knife所提供了一种能力——使用注解生成模板代码，将view与方法和参数绑定。\n\n上榜理由：github上16.5K个star，配合Androidstudio提供的Butter Knife插件，帮助开发者省却了频繁findviewbyid的烦恼，最新的Butter Knife还提供了onclick绑定以及字符串的初始化，初学者可以查阅Butter Knife以及Butter Knife插件进一步学习！\n\n官网地址：[http://jakewharton.github.io/butterknife/](http://jakewharton.github.io/butterknife/)\n\ngithub：[https://github.com/JakeWharton/butterknife](https://github.com/JakeWharton/butterknife)\n\n作者：JakeWharton ，也是square团队成员之一\n\n使用：\n\n```build.gradle\ndependencies {\n  compile 'com.jakewharton:butterknife:8.6.0'\n  annotationProcessor 'com.jakewharton:butterknife-compiler:8.6.0'\n}\n```\n\n### 4.MPAndroidChart\n\n一句话介绍：MPAndroidChart是一款图表框架\n\n上榜理由：github上16.1K个star，以快速、简洁。强大著称的图表框架\n\n官网地址 [https://github.com/PhilJay/MPAndroidChart ](https://github.com/PhilJay/MPAndroidChart%20) \n\ngithub  [https://github.com/PhilJay/MPAndroidChart](https://github.com/PhilJay/MPAndroidChart)\n\n作者：PhilJay\n\n使用：\n\n**在AS中加入Gradle依赖**\n\n   - 在根目录的build.gradle加入:\n\n     ```build.gradle\n     allprojects {\n         repositories {\n             maven { url \"https://jitpack.io\" }\n         }\n     }\n     ```\n\n- 在根目录的build.gradle加入:\n\n  ```build.gradle\n  dependencies {\n      compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'\n  }\n  ```\n\n### 5.Glide\n\n一句话介绍：glide是一款专注于提供**流畅划动能力**的“图片加载和缓存框架”\n\n上榜理由：15.9k个star，图片加载类框架排名第一的框架，google 在2014开发者大会上演示的camera app就是基于gilde框架开发的\n\ngithub [https://github.com/bumptech/glide](https://github.com/bumptech/glide)\n\n作者 Bump Technologies团队\n\n使用：\n\n```build.gradle\nrepositories {\n  mavenCentral()\n}\n\ndependencies {\n    compile 'com.github.bumptech.glide:glide:3.8.0'\n    compile 'com.android.support:support-v4:19.1.0'\n}\n```\n\n### 6.Leak Canary\n\n一句话介绍：一款内存检测框架，服务于java和android客户端\n\n上榜理由：方便，简洁是leakcanary最大的特点，只需在应用的apllication中集成，就可以直接使用它；15.5k个star说明了它有多么受欢迎\n\ngithub https://github.com/square/leakcanary\n\n作者 square团队\n\n使用：\n\n```build.gradle\ndependencies {\n   debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.1'\n   releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'\n   testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5.1'\n }\n```\n\n在Application中写入:\n\n```java\npublic class ExampleApplication extends Application {\n\n  @Override public void onCreate() {\n    super.onCreate();\n    if (LeakCanary.isInAnalyzerProcess(this)) {\n      // This process is dedicated to LeakCanary for heap analysis.\n      // You should not init your app in this process.\n      return;\n    }\n    LeakCanary.install(this);\n    // Normal app init code...\n  }\n}\n```\n\n### 7.Android-Universal-Image_Loader\n\n一句话介绍：曾经的图片加载框架王者，android开发老手都用过它\n\n上榜理由:android端图片加载框架的老大哥了，15.3k个star足以证明它的热门，UIL与gilde最大区别是可定制，UIL提供了大量配置方式，图片加载状态的回调（成功，失败，进行中），加载动画等；以及提供了移动端图片加载框架的缓存思路：三级缓存策略 sd卡-内存-网络；值得注意的是，UIL以及两年未更新了，但笔者仍推荐各位使用！\n\ngithub https://github.com/nostra13/Android-Universal-Image-Loader\n\n作者 nostra13\n\n使用：\n\n下载地址:[universal-image-loader-1.9.5.jar](https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/downloads/universal-image-loader-1.9.5.jar)\n\n### 8.EventBus \n\n一句话介绍：EventBus是一款本地组件间通信框架\n\n上榜理由：组件间通信框架star量第一：14.8k，在大型项目的Activities，fragments，Threads，Services都可以看到它的使用场景，尽管EventBus在向未创建的组件传递事件时有些局限，仅适合在“活着的”组件间传递消息，但仍不妨碍它活跃在各个大型项目各个场景里。\n\n官网地址 http://greenrobot.org/eventbus/documentation/how-to-get-started/\n\ngithub  https://github.com/greenrobot/EventBus\n\n作者 greenrobot \n\n使用：\n\n```build.gradle\ncompile 'org.greenrobot:eventbus:3.0.0'\n```\n\n### 9.zxing\n\n一句话介绍：条码图像处理库\n\n上榜理由：如果你用过二维码，你肯定已经间接使用过大名鼎鼎的zxing了。13.9K的star量，让它排在本榜单第九，实至名归，如果你有了解二维码的需求，不妨从了解、修改它源码入手。\n\ngithub [ https://github.com/zxing/zxing](https://github.com/zxing/zxing)\n\n作者  Sean Owen\n\n### 10.picasso\n\n一句话介绍：强力的图片下载、缓存框架\n\n上榜理由：本榜单出现的第三款图片类框架，不同的是picasso更强调图片下载，你可以将picasso集成进你的项目中，你也可以结合gilde和UIL与picasso，三者一齐封装至你的项目中，按需所用。\n\n官网地址 http://square.github.io/picasso/\n\ngithub  https://github.com/square/picasso\n\n作者 square团队\n\n使用：\n\n```build.gradle\ncompile 'com.squareup.picasso:picasso:2.5.2'\n```\n\n### 11.lottie-android\n\n一句话介绍：一款可以在Android端快速展示Adobe Afeter Effect（AE）工具所作动画的框架\n\n上榜理由：动画类框架第一名，github上13.3k个star证明了他的优越性，利用json文件快速实现动画效果是它最大的便利，而这个json文件也是由Adobe提供的After Effects（AE）工具制作的，在AE中装一个Bodymovin的插件，使用这个插件最终将动画效果生成json文件，这个json文件即可由LottieAnimationView解析并生成绚丽的动画效果。而且它还支持跨平台哟。\n\ngithub  https://github.com/airbnb/lottie-android\n\n作者：Airbnb 团队\n\n### 12.fresco\n\n一句话介绍：一款可以管理图片内存的框架\n\n上榜理由:github上12.8k个star，图片类排行榜第四名，facebook的出身证明了它并非是重复造的轮子，在管理图片内存领域上有着它的一片天地，渐进式加载、加载gif都是它与前三位相比独有的特性\n\n官网地址： https://www.fresco-cn.org/\n\ngithub  https://github.com/facebook/fresco\n\n作者 facebook\n\n使用：\n\n```build.gradle\ndependencies {\n  // 其他依赖\n  compile 'com.facebook.fresco:fresco:0.12.0'\n}\n```\n\n**下面的依赖需要根据需求添加：**\n\n```build.gradle\ndependencies {\n  // 在 API < 14 上的机器支持 WebP 时，需要添加\n  compile 'com.facebook.fresco:animated-base-support:0.12.0'\n\n  // 支持 GIF 动图，需要添加\n  compile 'com.facebook.fresco:animated-gif:0.12.0'\n\n  // 支持 WebP （静态图+动图），需要添加\n  compile 'com.facebook.fresco:animated-webp:0.12.0'\n  compile 'com.facebook.fresco:webpsupport:0.12.0'\n\n  // 仅支持 WebP 静态图，需要添加\n  compile 'com.facebook.fresco:webpsupport:0.12.0'\n}\n```\n\n### 13.RxAndroid\n\n一句话介绍：一款Android客户端组件间异步通信的框架\n\n上榜理由：github上12.7k个star，位居组件通信框架的第二名，仅在EventBus之后，如果要问两者的区别，Eventbus是用来取代组件间繁琐的interface，RxAndroid是用来取代AnsyTask的，并不冲突；当然RxAndroid的优点并不仅限于此，更多优雅的实现，可以去官网查阅！\n\ngithub  [https://github.com/ReactiveX/RxAndroid](https://github.com/ReactiveX/RxAndroid)\n\n作者 JakeWharton\n\n使用：\n\n```build.gradle\ncompile 'io.reactivex.rxjava2:rxandroid:2.0.1'\ncompile 'io.reactivex.rxjava2:rxjava:2.1.0'\n```\n\n### 14.SlidingMenu\n\n一句话介绍：侧滑菜单栏框架\n\n上榜理由：与Userval-Image-loader 齐名的上古神器框架——为你的app提供侧滑菜单栏的功能；github闪更有10.5k个star，证明了它的经久不衰，即使在Google推出了NavigationDrawer，仍然没有减少开发者对SildingMenu的拥簇，经典总是经得起考验的，这个上古神兽已经四年没有更新了；有太多太多的app使用过它，这些都可以在软件的开源许可上看到！\n\ngithub [https://github.com/jfeinstein10/SlidingMenu](https://github.com/jfeinstein10/SlidingMenu)\n\n作者 Jeremy Feinstein\n\n使用：\n\n在gihub上fork源码，集成进项目中\n\n### 15.PhotoView\n\n一句话介绍：一款ImageView展示框架，支持缩放，响应手势\n\n上榜理由：10.3k的star数量，位于图片类框架排行榜第五位，PhotoView与前四位不同的是这次带来的是图片的展示能力，你一定好奇微信的头像点击放大是如何实现的，很多App的图片显示响应手势按压是如何实现的，了解PhotoView，你一定会开心的！（笔者也不会告诉你ImageView的点击放大效果在Android的sample也有）\n\ngithub  [https://github.com/chrisbanes/PhotoView](https://github.com/chrisbanes/PhotoView)\n\n作者：chrisbanes\n\n使用：\n\n```build.gradle\n在app根目录的build.gradle中加入：\nallprojects {\n    repositories {\n        maven { url \"https://jitpack.io\" }\n    }\n}\n在app的module目录的build.gralde中加入：\n\ndependencies {\n    compile 'com.github.chrisbanes:PhotoView:latest.release.here'\n}\n```\n\n```xml\n<com.github.chrisbanes.photoview.PhotoView\n    android:id=\"@+id/photo_view\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"/>\n```\n\n```java\nPhotoView photoView = (PhotoView) findViewById(R.id.photo_view);\nphotoView.setImageResource(R.drawable.image);\n```\n\n### 16.material-dialogs\n\n一句话介绍：一款自定义dialog框架\n\n上榜理由：9.9k个star，也是继PhotoView，SlidingMenu之后第三款自定义View框架，也许你还是自定义View的新人，对Dialog使用的还有点生疏，你可以通过它提升你的Dilaog使用能力\n\ngithub  [https://github.com/afollestad/material-dialogs](https://github.com/afollestad/material-dialogs)\n\n作者：Aidan Follestad\n\n使用：\n\n```build.gradle\ndependencies {\n    // ... other dependencies here\n    compile 'com.afollestad.material-dialogs:core:0.9.4.5'\n}\n```\n\n### 17.droid-async-http\n\n 一句话介绍：一款基于Http协议的异步请求的网络框架，\n\n上榜理由：虽然你有无数个使用retrofit+okhttp的理由，但9.8k个star，证明它仍然值得你深入学习。值得注意的是，它也已经有两年没更新了，你尽管拿去当你懒惰的理由！\n\ngithub   [https://github.com/loopj/android-async-http](https://github.com/loopj/android-async-http)\n\n作者：James Smith\n\n使用：\n\n```build.gradle\nrepositories {\n  maven {\n    url 'https://oss.sonatype.org/content/repositories/snapshots/'\n  }\n}\ndependencies {\n  compile 'com.loopj.android:android-async-http:1.5.0-SNAPSHOT'\n}\n```\n\n### 18.androidannotations\n\n一句话介绍：一款基于注解的快速开发框架\n\n上榜理由：与Butterknife一样基于注解，利用注解快速完成view的初始化，不同的是androidannotations提供了更多的能力：简单的线程模型等；笔者只接触过Butterknife，无法更进一步叙述androidannotations的优势，如果你志在深入了解注解的妙用，可以尝试探索一下！\n\n官网地址 [http://androidannotations.org/](http://androidannotations.org/)\n\ngithub [https://github.com/androidannotations/androidannotations](https://github.com/androidannotations/androidannotations)\n\n作者： WonderCsabo\n\n### 19.fastjson\n\n一句话介绍:一款基于json解析、生成的框架\n\n上榜理由：从它的名字不难看出，快速是它最大的特性，阿里巴巴的出身保证了代码的质量和优越，9.4k的star数量，也是榜单里第一个出现的中国开源框架，涉及网络的app都会用到json，fastjson值得作为你的首选！\n\ngithub  [https://github.com/alibaba/fastjson](https://github.com/alibaba/fastjson)\n\n作者：alibaba\n\n使用：\n\n```build.gradle\ncompile 'com.alibaba:fastjson:1.1.58.android'\n```\n\n### 20.Material-Animations\n\n一句话介绍：一款提供场景转换过渡能力的动画框架\n\n上榜理由：Android动画框架排行榜第二名，9.3k个star数量，与动画框架榜单第一名lottie-android不同的是，Material-Animations提供的是场景切换的动画效果。Android 官网sample中已经提供了部分Transition （转场动画）的展示，作为初学者很难快速拓展到自己项目中，Material-Animations的示例出现为开发者省去了此类麻烦，直接照搬应用到自己的App中吧。\n\n github  [https://github.com/lgvalle/Material-Animations](https://github.com/lgvalle/Material-Animations)\n\n作者：Luis G. Valle\n\n使用：\n\ndown源码，修改学习\n\n### 21.tinker\n\n一句话介绍：它是微信官网的Android热补丁解决方案\n\n上榜理由：9.1k个star，微信在用的热补丁方案，心动不如行动\n\n官网地址  [http://www.tinkerpatch.com/Docs/intro](http://www.tinkerpatch.com/Docs/intro)\n\ngithub   [https://github.com/Tencent/tinker](https://github.com/Tencent/tinker)\n\n作者：Tencent\n\n### 22.ViewPagerIndicator\n\n一句话介绍：一款基于ViewPager的页面指示器开源框架\n\n上榜理由：上古神器，尽管已经五年未更新了，但你仍然可以在淘宝等app中看到它的使用场景，8.9K的star量让它不愠不火的在矗立在榜单里\n\n官网地址 [http://viewpagerindicator.com/](http://viewpagerindicator.com/)\n\ngithub  [https://github.com/JakeWharton/ViewPagerIndicator](https://github.com/JakeWharton/ViewPagerIndicator)\n\n作者：JakeWharton \n\n使用：\n\n 下载 地址[ https://github.com/JakeWharton/Android-ViewPagerIndicator/zipball/master](https://github.com/JakeWharton/Android-ViewPagerIndicator/zipball/master)\n\n### 23.Android-CleanArchitecture\n\n一句话介绍：一个讲解设计框架的demo\n\n上榜理由：它不是框架，你可以把它当作一本书，它将教会你如何设计简洁的架构，工程里有一个sample app，配合图文讲解，你将对Android客户端的架构有更深一层的认识。8.8k的star数量，证明了它是一本“好书”哟。\n\ngithub  [https://github.com/android10/Android-CleanArchitecture](https://github.com/android10/Android-CleanArchitecture)\n\n作者：Fernando Cejas\n\n### 24.Android-PullToRefresh\n\n一句话介绍：一款为普通视图提供刷新UI的视图框架\n\n上榜理由：8.2K的star数量使它位居刷新类UI框架榜首，强大的兼容能力，该框架支持ListView，GrdiView，WebViewScrollView，ViewPager等众多View增加刷新的能力，如果你有增加上拉加载，下拉加载的需求，你应该考虑它了！\n\ngithub [https://github.com/chrisbanes/Android-PullToRefresh](https://github.com/chrisbanes/Android-PullToRefresh)\n\n作者：Chris Banes\n\n使用：\n\ngithub fork源码，集成到项目中\n\n### 25.flexbox-layout\n\n一句话介绍：一款弹性伸缩布局\n\n上榜理由：8.1k个star，前端H5开发者转Android开发的福音，FlexboxLayout作为`LinearLayout`和`RelativeLayout的替代者，值得各位一试，与其一同推出的还有ConstraintLayout。`\n\ngithub  [https://github.com/google/flexbox-layout](https://github.com/google/flexbox-layout)\n\n作者：Google\n\n使用：\n\n```build.gradle\ndependencies {\n    compile 'com.google.android:flexbox:0.3.0-alpha3'\n}\n```\n\n**未完待续**\n\n","slug":"Android百大框架排行榜","published":1,"updated":"2017-10-18T16:33:09.620Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zgah290009nslf8vfifd4x","content":"<h1 id=\"一-框架介绍\"><a href=\"#一-框架介绍\" class=\"headerlink\" title=\"一.框架介绍\"></a>一.框架介绍</h1><p>排行榜包括四大类:</p>\n<p><strong>单一框架:</strong>仅提供路由、网络层、UI层、通信层或其他<strong>单一功能</strong>的框架。</p>\n<p><strong>混合开发框架:</strong>提供开发<strong>hybrid app、H5与Webview结合能力、web App能力</strong>的框架。</p>\n<p><strong>企业级开源项目:</strong>可以独立运行的App，有极高的学习价值、思路借鉴意义。</p>\n<p><strong>书籍类开源项目:</strong>类似Open-Source-Project这样的导航类项目；大型公司的Android课程的学习目录。</p>\n<p>榜单排序依据:</p>\n<ol>\n<li>项目开源</li>\n<li>Github上项目的star数</li>\n<li>开发团队、作者的实力</li>\n</ol>\n<p>适用读者范围:</p>\n<ul>\n<li><p>正在入门Android的新手—Android初级开发工程师</p>\n</li>\n<li><p>Android初级开发工程师—Android中级开发工程师</p>\n</li>\n<li><p>Android中、高级、资深开发工程师</p>\n<p><strong>框架名次越靠前，值得使用的优先级就越高、研究原理得到的收获会更多、对读者启发的价值就越大</strong></p>\n</li>\n</ul>\n<h1 id=\"二-百大框架排行榜\"><a href=\"#二-百大框架排行榜\" class=\"headerlink\" title=\"二.百大框架排行榜\"></a>二.百大框架排行榜</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">框架名称</th>\n<th style=\"text-align:center\">上榜关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1.retrofit</td>\n<td style=\"text-align:center\">网络</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2.okhttp</td>\n<td style=\"text-align:center\">网络</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3.Butter Knife</td>\n<td style=\"text-align:center\">代码模板</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.MPAndroidChart</td>\n<td style=\"text-align:center\">图表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5.Glide</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6.LeakCanary</td>\n<td style=\"text-align:center\">内存</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7.Android-Universal-Image_Loader</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8.EventBus</td>\n<td style=\"text-align:center\">事件消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9.zxing</td>\n<td style=\"text-align:center\">条码扫描</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10.Picasso</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11.lottie-android</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12.fresco</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13.RxAndroid</td>\n<td style=\"text-align:center\">异步</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14.SlidingMenu</td>\n<td style=\"text-align:center\">菜单</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15.PhotoVIew</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16.Material-Dialogs</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17.droid-async-http</td>\n<td style=\"text-align:center\">网络</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18.androidanotations</td>\n<td style=\"text-align:center\">注解</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19.fastjson</td>\n<td style=\"text-align:center\">json</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20.Material-Animations</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">21.tinker</td>\n<td style=\"text-align:center\">热修复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">22.ViewPagerIndicator</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">23.Android-CleanArchitecture</td>\n<td style=\"text-align:center\">架构</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">24.Android-PullToRefresh</td>\n<td style=\"text-align:center\">刷新</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">25.flexbox-layout</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">26.AndroidSwipeLayout</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">27.realm-java</td>\n<td style=\"text-align:center\">数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">28.greenDAO</td>\n<td style=\"text-align:center\">数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">29.stetho</td>\n<td style=\"text-align:center\">调试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">30.BaseRecyclerViewAdapterHelper</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">31.AndroidViewAnimations</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">32.MaterialDrawer</td>\n<td style=\"text-align:center\">菜单</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">33.Android-ObservableScrollView</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">34.CircleImageView</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">35.logger</td>\n<td style=\"text-align:center\">调试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">36.agera</td>\n<td style=\"text-align:center\">异步</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">37.BottmBar</td>\n<td style=\"text-align:center\">菜单</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">38.Calligraphy</td>\n<td style=\"text-align:center\">字体</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">39.AndroidSlidingUpPanel</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">40.AppIntro</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">41.recyclerview-animators</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">42.dagger</td>\n<td style=\"text-align:center\">依赖注入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">43.Android-Bootstrap</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">44.RxBinding</td>\n<td style=\"text-align:center\">响应式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">45.ListViewAnimations</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">46.UItimateRecyclerView</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">47.uCrop</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">48.RxJava-Android-Samples</td>\n<td style=\"text-align:center\">用例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">49.AndroidAutoLayout</td>\n<td style=\"text-align:center\">适配</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">50.EffectiveAndroidUI</td>\n<td style=\"text-align:center\">性能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">51.Luban</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">52.DroidPlugin</td>\n<td style=\"text-align:center\">插件化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">53.otto</td>\n<td style=\"text-align:center\">响应式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">54.u2020</td>\n<td style=\"text-align:center\">用例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">55.buck</td>\n<td style=\"text-align:center\">构建</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">56.PermissionsDispatcher</td>\n<td style=\"text-align:center\">权限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">57.android-gif-drawable</td>\n<td style=\"text-align:center\">GIF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">58.Apktool</td>\n<td style=\"text-align:center\">反编译</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">59.dynamic-load-apk</td>\n<td style=\"text-align:center\">插件化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">60.atlas</td>\n<td style=\"text-align:center\">插件化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">61.Volley</td>\n<td style=\"text-align:center\">网络</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">62.androidmvp</td>\n<td style=\"text-align:center\">用例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">63.SwipeBackLayout</td>\n<td style=\"text-align:center\">手势</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">64.FlycoTabLayout</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">65.android-testing</td>\n<td style=\"text-align:center\">测试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">66.FileDownloader</td>\n<td style=\"text-align:center\">下载</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">67.JieCaoVideoPlayer</td>\n<td style=\"text-align:center\">多媒体</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">68.glide-transformations</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">69.android-gpuimage</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">70.RxPermissions</td>\n<td style=\"text-align:center\">权限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">71.freeline</td>\n<td style=\"text-align:center\">编译</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">72.RxLifecycle</td>\n<td style=\"text-align:center\">生命周期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">73.classyshark</td>\n<td style=\"text-align:center\">反编译</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">74.acra</td>\n<td style=\"text-align:center\">崩溃日志</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">75.DiskLruCache</td>\n<td style=\"text-align:center\">文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">76.dexposed</td>\n<td style=\"text-align:center\">热修复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">77.Litho</td>\n<td style=\"text-align:center\">性能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">78.mosby</td>\n<td style=\"text-align:center\">MVP</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">79.AndResGuard</td>\n<td style=\"text-align:center\">混淆</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">80.StatusBarUtil</td>\n<td style=\"text-align:center\">状态栏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">81.robolectric</td>\n<td style=\"text-align:center\">测试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">82.Fragmentation</td>\n<td style=\"text-align:center\">嵌套</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">83.Small</td>\n<td style=\"text-align:center\">插件化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">84.JsBridge</td>\n<td style=\"text-align:center\">hybrid</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">85.richeditor-android</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">86.Transitions-Everywhere</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">87.android-viewbadger</td>\n<td style=\"text-align:center\">勋章</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">88.AndroidWiFiADB</td>\n<td style=\"text-align:center\">调试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">89.emojicon</td>\n<td style=\"text-align:center\">表情包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">90.packer-ng-plugin</td>\n<td style=\"text-align:center\">多渠道</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">91.android-priority-jobqueue</td>\n<td style=\"text-align:center\">多线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">92.Android-Debug-Database</td>\n<td style=\"text-align:center\">调试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">93.conceal</td>\n<td style=\"text-align:center\">加密</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">94.ARouter</td>\n<td style=\"text-align:center\">页面路由</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">95.MagicaSakura</td>\n<td style=\"text-align:center\">多主题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">96.CustomActivityOnCrash</td>\n<td style=\"text-align:center\">崩溃</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">97.XhsEmoticonsKeyboard</td>\n<td style=\"text-align:center\">键盘</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-retrofit\"><a href=\"#1-retrofit\" class=\"headerlink\" title=\"1.retrofit\"></a>1.retrofit</h3><p>一句话介绍：Retrofit是一款类型安全的网络框架，基于HTTP协议，服务于Android和java语言</p>\n<p>上榜理由：Retrofit以21.8k的stars量雄踞github中android子标题榜首，第一当之无愧。</p>\n<p>官网地址 <a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"external\">http://square.github.io/retrofit/</a></p>\n<p>github  <a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">https://github.com/square/retrofit</a></p>\n<p>作者：square团队</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.squareup.retrofit2:retrofit:2.3.0&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"2-okhttp\"><a href=\"#2-okhttp\" class=\"headerlink\" title=\"2.okhttp\"></a>2.okhttp</h3><p>一句话介绍：okhttp是一款基于HTTP和HTTP2.0协议的网络框架，服务于java和android客户端</p>\n<p>上榜理由，okhttp以20.4k的stars量雄踞github中android子标题第二名。大型公司比如淘宝也封装的是okhttp。Retrofit2.0开始内置okhttp框架，Retrofit专注封装接口完成业务需求，okhttp专注网络请求的安全高效，笔者将两者区分开，是想让后来学习者知道，这是两套框架，学习框架原理时可以分开学习，以免理解混乱。</p>\n<p>官网地址   <a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">http://square.github.io/okhttp/</a></p>\n<p>github    <a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">https://github.com/square/okhttp</a></p>\n<p>作者：square团队</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.squareup.okhttp3:okhttp:3.8.0&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"3-Butter-Knife\"><a href=\"#3-Butter-Knife\" class=\"headerlink\" title=\"3.Butter Knife\"></a>3.Butter Knife</h3><p>一句话介绍：Butter Knife所提供了一种能力——使用注解生成模板代码，将view与方法和参数绑定。</p>\n<p>上榜理由：github上16.5K个star，配合Androidstudio提供的Butter Knife插件，帮助开发者省却了频繁findviewbyid的烦恼，最新的Butter Knife还提供了onclick绑定以及字符串的初始化，初学者可以查阅Butter Knife以及Butter Knife插件进一步学习！</p>\n<p>官网地址：<a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\" rel=\"external\">http://jakewharton.github.io/butterknife/</a></p>\n<p>github：<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/butterknife</a></p>\n<p>作者：JakeWharton ，也是square团队成员之一</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile &apos;com.jakewharton:butterknife:8.6.0&apos;</div><div class=\"line\">  annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.6.0&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-MPAndroidChart\"><a href=\"#4-MPAndroidChart\" class=\"headerlink\" title=\"4.MPAndroidChart\"></a>4.MPAndroidChart</h3><p>一句话介绍：MPAndroidChart是一款图表框架</p>\n<p>上榜理由：github上16.1K个star，以快速、简洁。强大著称的图表框架</p>\n<p>官网地址 <a href=\"https://github.com/PhilJay/MPAndroidChart%20\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart </a> </p>\n<p>github  <a href=\"https://github.com/PhilJay/MPAndroidChart\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart</a></p>\n<p>作者：PhilJay</p>\n<p>使用：</p>\n<p><strong>在AS中加入Gradle依赖</strong></p>\n<ul>\n<li><p>在根目录的build.gradle加入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        maven &#123; url &quot;https://jitpack.io&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>在根目录的build.gradle加入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;com.github.PhilJay:MPAndroidChart:v3.0.2&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-Glide\"><a href=\"#5-Glide\" class=\"headerlink\" title=\"5.Glide\"></a>5.Glide</h3><p>一句话介绍：glide是一款专注于提供<strong>流畅划动能力</strong>的“图片加载和缓存框架”</p>\n<p>上榜理由：15.9k个star，图片加载类框架排名第一的框架，google 在2014开发者大会上演示的camera app就是基于gilde框架开发的</p>\n<p>github <a href=\"https://github.com/bumptech/glide\" target=\"_blank\" rel=\"external\">https://github.com/bumptech/glide</a></p>\n<p>作者 Bump Technologies团队</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">  mavenCentral()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;com.github.bumptech.glide:glide:3.8.0&apos;</div><div class=\"line\">    compile &apos;com.android.support:support-v4:19.1.0&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-Leak-Canary\"><a href=\"#6-Leak-Canary\" class=\"headerlink\" title=\"6.Leak Canary\"></a>6.Leak Canary</h3><p>一句话介绍：一款内存检测框架，服务于java和android客户端</p>\n<p>上榜理由：方便，简洁是leakcanary最大的特点，只需在应用的apllication中集成，就可以直接使用它；15.5k个star说明了它有多么受欢迎</p>\n<p>github <a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">https://github.com/square/leakcanary</a></p>\n<p>作者 square团队</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">   debugCompile &apos;com.squareup.leakcanary:leakcanary-android:1.5.1&apos;</div><div class=\"line\">   releaseCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.5.1&apos;</div><div class=\"line\">   testCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.5.1&apos;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>在Application中写入:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    <span class=\"keyword\">if</span> (LeakCanary.isInAnalyzerProcess(<span class=\"keyword\">this</span>)) &#123;</div><div class=\"line\">      <span class=\"comment\">// This process is dedicated to LeakCanary for heap analysis.</span></div><div class=\"line\">      <span class=\"comment\">// You should not init your app in this process.</span></div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    LeakCanary.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// Normal app init code...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"7-Android-Universal-Image-Loader\"><a href=\"#7-Android-Universal-Image-Loader\" class=\"headerlink\" title=\"7.Android-Universal-Image_Loader\"></a>7.Android-Universal-Image_Loader</h3><p>一句话介绍：曾经的图片加载框架王者，android开发老手都用过它</p>\n<p>上榜理由:android端图片加载框架的老大哥了，15.3k个star足以证明它的热门，UIL与gilde最大区别是可定制，UIL提供了大量配置方式，图片加载状态的回调（成功，失败，进行中），加载动画等；以及提供了移动端图片加载框架的缓存思路：三级缓存策略 sd卡-内存-网络；值得注意的是，UIL以及两年未更新了，但笔者仍推荐各位使用！</p>\n<p>github <a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\" target=\"_blank\" rel=\"external\">https://github.com/nostra13/Android-Universal-Image-Loader</a></p>\n<p>作者 nostra13</p>\n<p>使用：</p>\n<p>下载地址:<a href=\"https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/downloads/universal-image-loader-1.9.5.jar\" target=\"_blank\" rel=\"external\">universal-image-loader-1.9.5.jar</a></p>\n<h3 id=\"8-EventBus\"><a href=\"#8-EventBus\" class=\"headerlink\" title=\"8.EventBus\"></a>8.EventBus</h3><p>一句话介绍：EventBus是一款本地组件间通信框架</p>\n<p>上榜理由：组件间通信框架star量第一：14.8k，在大型项目的Activities，fragments，Threads，Services都可以看到它的使用场景，尽管EventBus在向未创建的组件传递事件时有些局限，仅适合在“活着的”组件间传递消息，但仍不妨碍它活跃在各个大型项目各个场景里。</p>\n<p>官网地址 <a href=\"http://greenrobot.org/eventbus/documentation/how-to-get-started/\" target=\"_blank\" rel=\"external\">http://greenrobot.org/eventbus/documentation/how-to-get-started/</a></p>\n<p>github  <a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/EventBus</a></p>\n<p>作者 greenrobot </p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;org.greenrobot:eventbus:3.0.0&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"9-zxing\"><a href=\"#9-zxing\" class=\"headerlink\" title=\"9.zxing\"></a>9.zxing</h3><p>一句话介绍：条码图像处理库</p>\n<p>上榜理由：如果你用过二维码，你肯定已经间接使用过大名鼎鼎的zxing了。13.9K的star量，让它排在本榜单第九，实至名归，如果你有了解二维码的需求，不妨从了解、修改它源码入手。</p>\n<p>github <a href=\"https://github.com/zxing/zxing\" target=\"_blank\" rel=\"external\"> https://github.com/zxing/zxing</a></p>\n<p>作者  Sean Owen</p>\n<h3 id=\"10-picasso\"><a href=\"#10-picasso\" class=\"headerlink\" title=\"10.picasso\"></a>10.picasso</h3><p>一句话介绍：强力的图片下载、缓存框架</p>\n<p>上榜理由：本榜单出现的第三款图片类框架，不同的是picasso更强调图片下载，你可以将picasso集成进你的项目中，你也可以结合gilde和UIL与picasso，三者一齐封装至你的项目中，按需所用。</p>\n<p>官网地址 <a href=\"http://square.github.io/picasso/\" target=\"_blank\" rel=\"external\">http://square.github.io/picasso/</a></p>\n<p>github  <a href=\"https://github.com/square/picasso\" target=\"_blank\" rel=\"external\">https://github.com/square/picasso</a></p>\n<p>作者 square团队</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.squareup.picasso:picasso:2.5.2&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"11-lottie-android\"><a href=\"#11-lottie-android\" class=\"headerlink\" title=\"11.lottie-android\"></a>11.lottie-android</h3><p>一句话介绍：一款可以在Android端快速展示Adobe Afeter Effect（AE）工具所作动画的框架</p>\n<p>上榜理由：动画类框架第一名，github上13.3k个star证明了他的优越性，利用json文件快速实现动画效果是它最大的便利，而这个json文件也是由Adobe提供的After Effects（AE）工具制作的，在AE中装一个Bodymovin的插件，使用这个插件最终将动画效果生成json文件，这个json文件即可由LottieAnimationView解析并生成绚丽的动画效果。而且它还支持跨平台哟。</p>\n<p>github  <a href=\"https://github.com/airbnb/lottie-android\" target=\"_blank\" rel=\"external\">https://github.com/airbnb/lottie-android</a></p>\n<p>作者：Airbnb 团队</p>\n<h3 id=\"12-fresco\"><a href=\"#12-fresco\" class=\"headerlink\" title=\"12.fresco\"></a>12.fresco</h3><p>一句话介绍：一款可以管理图片内存的框架</p>\n<p>上榜理由:github上12.8k个star，图片类排行榜第四名，facebook的出身证明了它并非是重复造的轮子，在管理图片内存领域上有着它的一片天地，渐进式加载、加载gif都是它与前三位相比独有的特性</p>\n<p>官网地址： <a href=\"https://www.fresco-cn.org/\" target=\"_blank\" rel=\"external\">https://www.fresco-cn.org/</a></p>\n<p>github  <a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"external\">https://github.com/facebook/fresco</a></p>\n<p>作者 facebook</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">  // 其他依赖</div><div class=\"line\">  compile &apos;com.facebook.fresco:fresco:0.12.0&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>下面的依赖需要根据需求添加：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">  // 在 API &lt; 14 上的机器支持 WebP 时，需要添加</div><div class=\"line\">  compile &apos;com.facebook.fresco:animated-base-support:0.12.0&apos;</div><div class=\"line\"></div><div class=\"line\">  // 支持 GIF 动图，需要添加</div><div class=\"line\">  compile &apos;com.facebook.fresco:animated-gif:0.12.0&apos;</div><div class=\"line\"></div><div class=\"line\">  // 支持 WebP （静态图+动图），需要添加</div><div class=\"line\">  compile &apos;com.facebook.fresco:animated-webp:0.12.0&apos;</div><div class=\"line\">  compile &apos;com.facebook.fresco:webpsupport:0.12.0&apos;</div><div class=\"line\"></div><div class=\"line\">  // 仅支持 WebP 静态图，需要添加</div><div class=\"line\">  compile &apos;com.facebook.fresco:webpsupport:0.12.0&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"13-RxAndroid\"><a href=\"#13-RxAndroid\" class=\"headerlink\" title=\"13.RxAndroid\"></a>13.RxAndroid</h3><p>一句话介绍：一款Android客户端组件间异步通信的框架</p>\n<p>上榜理由：github上12.7k个star，位居组件通信框架的第二名，仅在EventBus之后，如果要问两者的区别，Eventbus是用来取代组件间繁琐的interface，RxAndroid是用来取代AnsyTask的，并不冲突；当然RxAndroid的优点并不仅限于此，更多优雅的实现，可以去官网查阅！</p>\n<p>github  <a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"external\">https://github.com/ReactiveX/RxAndroid</a></p>\n<p>作者 JakeWharton</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</div><div class=\"line\">compile &apos;io.reactivex.rxjava2:rxjava:2.1.0&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"14-SlidingMenu\"><a href=\"#14-SlidingMenu\" class=\"headerlink\" title=\"14.SlidingMenu\"></a>14.SlidingMenu</h3><p>一句话介绍：侧滑菜单栏框架</p>\n<p>上榜理由：与Userval-Image-loader 齐名的上古神器框架——为你的app提供侧滑菜单栏的功能；github闪更有10.5k个star，证明了它的经久不衰，即使在Google推出了NavigationDrawer，仍然没有减少开发者对SildingMenu的拥簇，经典总是经得起考验的，这个上古神兽已经四年没有更新了；有太多太多的app使用过它，这些都可以在软件的开源许可上看到！</p>\n<p>github <a href=\"https://github.com/jfeinstein10/SlidingMenu\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/SlidingMenu</a></p>\n<p>作者 Jeremy Feinstein</p>\n<p>使用：</p>\n<p>在gihub上fork源码，集成进项目中</p>\n<h3 id=\"15-PhotoView\"><a href=\"#15-PhotoView\" class=\"headerlink\" title=\"15.PhotoView\"></a>15.PhotoView</h3><p>一句话介绍：一款ImageView展示框架，支持缩放，响应手势</p>\n<p>上榜理由：10.3k的star数量，位于图片类框架排行榜第五位，PhotoView与前四位不同的是这次带来的是图片的展示能力，你一定好奇微信的头像点击放大是如何实现的，很多App的图片显示响应手势按压是如何实现的，了解PhotoView，你一定会开心的！（笔者也不会告诉你ImageView的点击放大效果在Android的sample也有）</p>\n<p>github  <a href=\"https://github.com/chrisbanes/PhotoView\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/PhotoView</a></p>\n<p>作者：chrisbanes</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">在app根目录的build.gradle中加入：</div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        maven &#123; url &quot;https://jitpack.io&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">在app的module目录的build.gralde中加入：</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;com.github.chrisbanes:PhotoView:latest.release.here&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.github.chrisbanes.photoview.PhotoView</span></span></div><div class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/photo_view\"</span></span></div><div class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PhotoView photoView = (PhotoView) findViewById(R.id.photo_view);</div><div class=\"line\">photoView.setImageResource(R.drawable.image);</div></pre></td></tr></table></figure>\n<h3 id=\"16-material-dialogs\"><a href=\"#16-material-dialogs\" class=\"headerlink\" title=\"16.material-dialogs\"></a>16.material-dialogs</h3><p>一句话介绍：一款自定义dialog框架</p>\n<p>上榜理由：9.9k个star，也是继PhotoView，SlidingMenu之后第三款自定义View框架，也许你还是自定义View的新人，对Dialog使用的还有点生疏，你可以通过它提升你的Dilaog使用能力</p>\n<p>github  <a href=\"https://github.com/afollestad/material-dialogs\" target=\"_blank\" rel=\"external\">https://github.com/afollestad/material-dialogs</a></p>\n<p>作者：Aidan Follestad</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    // ... other dependencies here</div><div class=\"line\">    compile &apos;com.afollestad.material-dialogs:core:0.9.4.5&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"17-droid-async-http\"><a href=\"#17-droid-async-http\" class=\"headerlink\" title=\"17.droid-async-http\"></a>17.droid-async-http</h3><p> 一句话介绍：一款基于Http协议的异步请求的网络框架，</p>\n<p>上榜理由：虽然你有无数个使用retrofit+okhttp的理由，但9.8k个star，证明它仍然值得你深入学习。值得注意的是，它也已经有两年没更新了，你尽管拿去当你懒惰的理由！</p>\n<p>github   <a href=\"https://github.com/loopj/android-async-http\" target=\"_blank\" rel=\"external\">https://github.com/loopj/android-async-http</a></p>\n<p>作者：James Smith</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">  maven &#123;</div><div class=\"line\">    url &apos;https://oss.sonatype.org/content/repositories/snapshots/&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile &apos;com.loopj.android:android-async-http:1.5.0-SNAPSHOT&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"18-androidannotations\"><a href=\"#18-androidannotations\" class=\"headerlink\" title=\"18.androidannotations\"></a>18.androidannotations</h3><p>一句话介绍：一款基于注解的快速开发框架</p>\n<p>上榜理由：与Butterknife一样基于注解，利用注解快速完成view的初始化，不同的是androidannotations提供了更多的能力：简单的线程模型等；笔者只接触过Butterknife，无法更进一步叙述androidannotations的优势，如果你志在深入了解注解的妙用，可以尝试探索一下！</p>\n<p>官网地址 <a href=\"http://androidannotations.org/\" target=\"_blank\" rel=\"external\">http://androidannotations.org/</a></p>\n<p>github <a href=\"https://github.com/androidannotations/androidannotations\" target=\"_blank\" rel=\"external\">https://github.com/androidannotations/androidannotations</a></p>\n<p>作者： WonderCsabo</p>\n<h3 id=\"19-fastjson\"><a href=\"#19-fastjson\" class=\"headerlink\" title=\"19.fastjson\"></a>19.fastjson</h3><p>一句话介绍:一款基于json解析、生成的框架</p>\n<p>上榜理由：从它的名字不难看出，快速是它最大的特性，阿里巴巴的出身保证了代码的质量和优越，9.4k的star数量，也是榜单里第一个出现的中国开源框架，涉及网络的app都会用到json，fastjson值得作为你的首选！</p>\n<p>github  <a href=\"https://github.com/alibaba/fastjson\" target=\"_blank\" rel=\"external\">https://github.com/alibaba/fastjson</a></p>\n<p>作者：alibaba</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.alibaba:fastjson:1.1.58.android&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"20-Material-Animations\"><a href=\"#20-Material-Animations\" class=\"headerlink\" title=\"20.Material-Animations\"></a>20.Material-Animations</h3><p>一句话介绍：一款提供场景转换过渡能力的动画框架</p>\n<p>上榜理由：Android动画框架排行榜第二名，9.3k个star数量，与动画框架榜单第一名lottie-android不同的是，Material-Animations提供的是场景切换的动画效果。Android 官网sample中已经提供了部分Transition （转场动画）的展示，作为初学者很难快速拓展到自己项目中，Material-Animations的示例出现为开发者省去了此类麻烦，直接照搬应用到自己的App中吧。</p>\n<p> github  <a href=\"https://github.com/lgvalle/Material-Animations\" target=\"_blank\" rel=\"external\">https://github.com/lgvalle/Material-Animations</a></p>\n<p>作者：Luis G. Valle</p>\n<p>使用：</p>\n<p>down源码，修改学习</p>\n<h3 id=\"21-tinker\"><a href=\"#21-tinker\" class=\"headerlink\" title=\"21.tinker\"></a>21.tinker</h3><p>一句话介绍：它是微信官网的Android热补丁解决方案</p>\n<p>上榜理由：9.1k个star，微信在用的热补丁方案，心动不如行动</p>\n<p>官网地址  <a href=\"http://www.tinkerpatch.com/Docs/intro\" target=\"_blank\" rel=\"external\">http://www.tinkerpatch.com/Docs/intro</a></p>\n<p>github   <a href=\"https://github.com/Tencent/tinker\" target=\"_blank\" rel=\"external\">https://github.com/Tencent/tinker</a></p>\n<p>作者：Tencent</p>\n<h3 id=\"22-ViewPagerIndicator\"><a href=\"#22-ViewPagerIndicator\" class=\"headerlink\" title=\"22.ViewPagerIndicator\"></a>22.ViewPagerIndicator</h3><p>一句话介绍：一款基于ViewPager的页面指示器开源框架</p>\n<p>上榜理由：上古神器，尽管已经五年未更新了，但你仍然可以在淘宝等app中看到它的使用场景，8.9K的star量让它不愠不火的在矗立在榜单里</p>\n<p>官网地址 <a href=\"http://viewpagerindicator.com/\" target=\"_blank\" rel=\"external\">http://viewpagerindicator.com/</a></p>\n<p>github  <a href=\"https://github.com/JakeWharton/ViewPagerIndicator\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/ViewPagerIndicator</a></p>\n<p>作者：JakeWharton </p>\n<p>使用：</p>\n<p> 下载 地址<a href=\"https://github.com/JakeWharton/Android-ViewPagerIndicator/zipball/master\" target=\"_blank\" rel=\"external\"> https://github.com/JakeWharton/Android-ViewPagerIndicator/zipball/master</a></p>\n<h3 id=\"23-Android-CleanArchitecture\"><a href=\"#23-Android-CleanArchitecture\" class=\"headerlink\" title=\"23.Android-CleanArchitecture\"></a>23.Android-CleanArchitecture</h3><p>一句话介绍：一个讲解设计框架的demo</p>\n<p>上榜理由：它不是框架，你可以把它当作一本书，它将教会你如何设计简洁的架构，工程里有一个sample app，配合图文讲解，你将对Android客户端的架构有更深一层的认识。8.8k的star数量，证明了它是一本“好书”哟。</p>\n<p>github  <a href=\"https://github.com/android10/Android-CleanArchitecture\" target=\"_blank\" rel=\"external\">https://github.com/android10/Android-CleanArchitecture</a></p>\n<p>作者：Fernando Cejas</p>\n<h3 id=\"24-Android-PullToRefresh\"><a href=\"#24-Android-PullToRefresh\" class=\"headerlink\" title=\"24.Android-PullToRefresh\"></a>24.Android-PullToRefresh</h3><p>一句话介绍：一款为普通视图提供刷新UI的视图框架</p>\n<p>上榜理由：8.2K的star数量使它位居刷新类UI框架榜首，强大的兼容能力，该框架支持ListView，GrdiView，WebViewScrollView，ViewPager等众多View增加刷新的能力，如果你有增加上拉加载，下拉加载的需求，你应该考虑它了！</p>\n<p>github <a href=\"https://github.com/chrisbanes/Android-PullToRefresh\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/Android-PullToRefresh</a></p>\n<p>作者：Chris Banes</p>\n<p>使用：</p>\n<p>github fork源码，集成到项目中</p>\n<h3 id=\"25-flexbox-layout\"><a href=\"#25-flexbox-layout\" class=\"headerlink\" title=\"25.flexbox-layout\"></a>25.flexbox-layout</h3><p>一句话介绍：一款弹性伸缩布局</p>\n<p>上榜理由：8.1k个star，前端H5开发者转Android开发的福音，FlexboxLayout作为<code>LinearLayout</code>和<code>RelativeLayout的替代者，值得各位一试，与其一同推出的还有ConstraintLayout。</code></p>\n<p>github  <a href=\"https://github.com/google/flexbox-layout\" target=\"_blank\" rel=\"external\">https://github.com/google/flexbox-layout</a></p>\n<p>作者：Google</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;com.google.android:flexbox:0.3.0-alpha3&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>未完待续</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"一-框架介绍\"><a href=\"#一-框架介绍\" class=\"headerlink\" title=\"一.框架介绍\"></a>一.框架介绍</h1><p>排行榜包括四大类:</p>\n<p><strong>单一框架:</strong>仅提供路由、网络层、UI层、通信层或其他<strong>单一功能</strong>的框架。</p>\n<p><strong>混合开发框架:</strong>提供开发<strong>hybrid app、H5与Webview结合能力、web App能力</strong>的框架。</p>\n<p><strong>企业级开源项目:</strong>可以独立运行的App，有极高的学习价值、思路借鉴意义。</p>\n<p><strong>书籍类开源项目:</strong>类似Open-Source-Project这样的导航类项目；大型公司的Android课程的学习目录。</p>\n<p>榜单排序依据:</p>\n<ol>\n<li>项目开源</li>\n<li>Github上项目的star数</li>\n<li>开发团队、作者的实力</li>\n</ol>\n<p>适用读者范围:</p>\n<ul>\n<li><p>正在入门Android的新手—Android初级开发工程师</p>\n</li>\n<li><p>Android初级开发工程师—Android中级开发工程师</p>\n</li>\n<li><p>Android中、高级、资深开发工程师</p>\n<p><strong>框架名次越靠前，值得使用的优先级就越高、研究原理得到的收获会更多、对读者启发的价值就越大</strong></p>\n</li>\n</ul>\n<h1 id=\"二-百大框架排行榜\"><a href=\"#二-百大框架排行榜\" class=\"headerlink\" title=\"二.百大框架排行榜\"></a>二.百大框架排行榜</h1><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">框架名称</th>\n<th style=\"text-align:center\">上榜关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1.retrofit</td>\n<td style=\"text-align:center\">网络</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2.okhttp</td>\n<td style=\"text-align:center\">网络</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3.Butter Knife</td>\n<td style=\"text-align:center\">代码模板</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4.MPAndroidChart</td>\n<td style=\"text-align:center\">图表</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5.Glide</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6.LeakCanary</td>\n<td style=\"text-align:center\">内存</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7.Android-Universal-Image_Loader</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8.EventBus</td>\n<td style=\"text-align:center\">事件消息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">9.zxing</td>\n<td style=\"text-align:center\">条码扫描</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">10.Picasso</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">11.lottie-android</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">12.fresco</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">13.RxAndroid</td>\n<td style=\"text-align:center\">异步</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">14.SlidingMenu</td>\n<td style=\"text-align:center\">菜单</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">15.PhotoVIew</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">16.Material-Dialogs</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">17.droid-async-http</td>\n<td style=\"text-align:center\">网络</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">18.androidanotations</td>\n<td style=\"text-align:center\">注解</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">19.fastjson</td>\n<td style=\"text-align:center\">json</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">20.Material-Animations</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">21.tinker</td>\n<td style=\"text-align:center\">热修复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">22.ViewPagerIndicator</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">23.Android-CleanArchitecture</td>\n<td style=\"text-align:center\">架构</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">24.Android-PullToRefresh</td>\n<td style=\"text-align:center\">刷新</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">25.flexbox-layout</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">26.AndroidSwipeLayout</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">27.realm-java</td>\n<td style=\"text-align:center\">数据库</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">28.greenDAO</td>\n<td style=\"text-align:center\">数据</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">29.stetho</td>\n<td style=\"text-align:center\">调试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">30.BaseRecyclerViewAdapterHelper</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">31.AndroidViewAnimations</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">32.MaterialDrawer</td>\n<td style=\"text-align:center\">菜单</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">33.Android-ObservableScrollView</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">34.CircleImageView</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">35.logger</td>\n<td style=\"text-align:center\">调试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">36.agera</td>\n<td style=\"text-align:center\">异步</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">37.BottmBar</td>\n<td style=\"text-align:center\">菜单</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">38.Calligraphy</td>\n<td style=\"text-align:center\">字体</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">39.AndroidSlidingUpPanel</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">40.AppIntro</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">41.recyclerview-animators</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">42.dagger</td>\n<td style=\"text-align:center\">依赖注入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">43.Android-Bootstrap</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">44.RxBinding</td>\n<td style=\"text-align:center\">响应式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">45.ListViewAnimations</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">46.UItimateRecyclerView</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">47.uCrop</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">48.RxJava-Android-Samples</td>\n<td style=\"text-align:center\">用例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">49.AndroidAutoLayout</td>\n<td style=\"text-align:center\">适配</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">50.EffectiveAndroidUI</td>\n<td style=\"text-align:center\">性能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">51.Luban</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">52.DroidPlugin</td>\n<td style=\"text-align:center\">插件化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">53.otto</td>\n<td style=\"text-align:center\">响应式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">54.u2020</td>\n<td style=\"text-align:center\">用例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">55.buck</td>\n<td style=\"text-align:center\">构建</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">56.PermissionsDispatcher</td>\n<td style=\"text-align:center\">权限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">57.android-gif-drawable</td>\n<td style=\"text-align:center\">GIF</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">58.Apktool</td>\n<td style=\"text-align:center\">反编译</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">59.dynamic-load-apk</td>\n<td style=\"text-align:center\">插件化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">60.atlas</td>\n<td style=\"text-align:center\">插件化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">61.Volley</td>\n<td style=\"text-align:center\">网络</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">62.androidmvp</td>\n<td style=\"text-align:center\">用例</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">63.SwipeBackLayout</td>\n<td style=\"text-align:center\">手势</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">64.FlycoTabLayout</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">65.android-testing</td>\n<td style=\"text-align:center\">测试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">66.FileDownloader</td>\n<td style=\"text-align:center\">下载</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">67.JieCaoVideoPlayer</td>\n<td style=\"text-align:center\">多媒体</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">68.glide-transformations</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">69.android-gpuimage</td>\n<td style=\"text-align:center\">图片</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">70.RxPermissions</td>\n<td style=\"text-align:center\">权限</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">71.freeline</td>\n<td style=\"text-align:center\">编译</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">72.RxLifecycle</td>\n<td style=\"text-align:center\">生命周期</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">73.classyshark</td>\n<td style=\"text-align:center\">反编译</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">74.acra</td>\n<td style=\"text-align:center\">崩溃日志</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">75.DiskLruCache</td>\n<td style=\"text-align:center\">文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">76.dexposed</td>\n<td style=\"text-align:center\">热修复</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">77.Litho</td>\n<td style=\"text-align:center\">性能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">78.mosby</td>\n<td style=\"text-align:center\">MVP</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">79.AndResGuard</td>\n<td style=\"text-align:center\">混淆</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">80.StatusBarUtil</td>\n<td style=\"text-align:center\">状态栏</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">81.robolectric</td>\n<td style=\"text-align:center\">测试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">82.Fragmentation</td>\n<td style=\"text-align:center\">嵌套</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">83.Small</td>\n<td style=\"text-align:center\">插件化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">84.JsBridge</td>\n<td style=\"text-align:center\">hybrid</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">85.richeditor-android</td>\n<td style=\"text-align:center\">UI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">86.Transitions-Everywhere</td>\n<td style=\"text-align:center\">动画</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">87.android-viewbadger</td>\n<td style=\"text-align:center\">勋章</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">88.AndroidWiFiADB</td>\n<td style=\"text-align:center\">调试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">89.emojicon</td>\n<td style=\"text-align:center\">表情包</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">90.packer-ng-plugin</td>\n<td style=\"text-align:center\">多渠道</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">91.android-priority-jobqueue</td>\n<td style=\"text-align:center\">多线程</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">92.Android-Debug-Database</td>\n<td style=\"text-align:center\">调试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">93.conceal</td>\n<td style=\"text-align:center\">加密</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">94.ARouter</td>\n<td style=\"text-align:center\">页面路由</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">95.MagicaSakura</td>\n<td style=\"text-align:center\">多主题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">96.CustomActivityOnCrash</td>\n<td style=\"text-align:center\">崩溃</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">97.XhsEmoticonsKeyboard</td>\n<td style=\"text-align:center\">键盘</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-retrofit\"><a href=\"#1-retrofit\" class=\"headerlink\" title=\"1.retrofit\"></a>1.retrofit</h3><p>一句话介绍：Retrofit是一款类型安全的网络框架，基于HTTP协议，服务于Android和java语言</p>\n<p>上榜理由：Retrofit以21.8k的stars量雄踞github中android子标题榜首，第一当之无愧。</p>\n<p>官网地址 <a href=\"http://square.github.io/retrofit/\" target=\"_blank\" rel=\"external\">http://square.github.io/retrofit/</a></p>\n<p>github  <a href=\"https://github.com/square/retrofit\" target=\"_blank\" rel=\"external\">https://github.com/square/retrofit</a></p>\n<p>作者：square团队</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.squareup.retrofit2:retrofit:2.3.0&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"2-okhttp\"><a href=\"#2-okhttp\" class=\"headerlink\" title=\"2.okhttp\"></a>2.okhttp</h3><p>一句话介绍：okhttp是一款基于HTTP和HTTP2.0协议的网络框架，服务于java和android客户端</p>\n<p>上榜理由，okhttp以20.4k的stars量雄踞github中android子标题第二名。大型公司比如淘宝也封装的是okhttp。Retrofit2.0开始内置okhttp框架，Retrofit专注封装接口完成业务需求，okhttp专注网络请求的安全高效，笔者将两者区分开，是想让后来学习者知道，这是两套框架，学习框架原理时可以分开学习，以免理解混乱。</p>\n<p>官网地址   <a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">http://square.github.io/okhttp/</a></p>\n<p>github    <a href=\"https://github.com/square/okhttp\" target=\"_blank\" rel=\"external\">https://github.com/square/okhttp</a></p>\n<p>作者：square团队</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.squareup.okhttp3:okhttp:3.8.0&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"3-Butter-Knife\"><a href=\"#3-Butter-Knife\" class=\"headerlink\" title=\"3.Butter Knife\"></a>3.Butter Knife</h3><p>一句话介绍：Butter Knife所提供了一种能力——使用注解生成模板代码，将view与方法和参数绑定。</p>\n<p>上榜理由：github上16.5K个star，配合Androidstudio提供的Butter Knife插件，帮助开发者省却了频繁findviewbyid的烦恼，最新的Butter Knife还提供了onclick绑定以及字符串的初始化，初学者可以查阅Butter Knife以及Butter Knife插件进一步学习！</p>\n<p>官网地址：<a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\" rel=\"external\">http://jakewharton.github.io/butterknife/</a></p>\n<p>github：<a href=\"https://github.com/JakeWharton/butterknife\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/butterknife</a></p>\n<p>作者：JakeWharton ，也是square团队成员之一</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile &apos;com.jakewharton:butterknife:8.6.0&apos;</div><div class=\"line\">  annotationProcessor &apos;com.jakewharton:butterknife-compiler:8.6.0&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"4-MPAndroidChart\"><a href=\"#4-MPAndroidChart\" class=\"headerlink\" title=\"4.MPAndroidChart\"></a>4.MPAndroidChart</h3><p>一句话介绍：MPAndroidChart是一款图表框架</p>\n<p>上榜理由：github上16.1K个star，以快速、简洁。强大著称的图表框架</p>\n<p>官网地址 <a href=\"https://github.com/PhilJay/MPAndroidChart%20\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart </a> </p>\n<p>github  <a href=\"https://github.com/PhilJay/MPAndroidChart\" target=\"_blank\" rel=\"external\">https://github.com/PhilJay/MPAndroidChart</a></p>\n<p>作者：PhilJay</p>\n<p>使用：</p>\n<p><strong>在AS中加入Gradle依赖</strong></p>\n<ul>\n<li><p>在根目录的build.gradle加入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        maven &#123; url &quot;https://jitpack.io&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p>在根目录的build.gradle加入:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;com.github.PhilJay:MPAndroidChart:v3.0.2&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"5-Glide\"><a href=\"#5-Glide\" class=\"headerlink\" title=\"5.Glide\"></a>5.Glide</h3><p>一句话介绍：glide是一款专注于提供<strong>流畅划动能力</strong>的“图片加载和缓存框架”</p>\n<p>上榜理由：15.9k个star，图片加载类框架排名第一的框架，google 在2014开发者大会上演示的camera app就是基于gilde框架开发的</p>\n<p>github <a href=\"https://github.com/bumptech/glide\" target=\"_blank\" rel=\"external\">https://github.com/bumptech/glide</a></p>\n<p>作者 Bump Technologies团队</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">  mavenCentral()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;com.github.bumptech.glide:glide:3.8.0&apos;</div><div class=\"line\">    compile &apos;com.android.support:support-v4:19.1.0&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"6-Leak-Canary\"><a href=\"#6-Leak-Canary\" class=\"headerlink\" title=\"6.Leak Canary\"></a>6.Leak Canary</h3><p>一句话介绍：一款内存检测框架，服务于java和android客户端</p>\n<p>上榜理由：方便，简洁是leakcanary最大的特点，只需在应用的apllication中集成，就可以直接使用它；15.5k个star说明了它有多么受欢迎</p>\n<p>github <a href=\"https://github.com/square/leakcanary\" target=\"_blank\" rel=\"external\">https://github.com/square/leakcanary</a></p>\n<p>作者 square团队</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">   debugCompile &apos;com.squareup.leakcanary:leakcanary-android:1.5.1&apos;</div><div class=\"line\">   releaseCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.5.1&apos;</div><div class=\"line\">   testCompile &apos;com.squareup.leakcanary:leakcanary-android-no-op:1.5.1&apos;</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>\n<p>在Application中写入:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleApplication</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    <span class=\"keyword\">if</span> (LeakCanary.isInAnalyzerProcess(<span class=\"keyword\">this</span>)) &#123;</div><div class=\"line\">      <span class=\"comment\">// This process is dedicated to LeakCanary for heap analysis.</span></div><div class=\"line\">      <span class=\"comment\">// You should not init your app in this process.</span></div><div class=\"line\">      <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    LeakCanary.install(<span class=\"keyword\">this</span>);</div><div class=\"line\">    <span class=\"comment\">// Normal app init code...</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"7-Android-Universal-Image-Loader\"><a href=\"#7-Android-Universal-Image-Loader\" class=\"headerlink\" title=\"7.Android-Universal-Image_Loader\"></a>7.Android-Universal-Image_Loader</h3><p>一句话介绍：曾经的图片加载框架王者，android开发老手都用过它</p>\n<p>上榜理由:android端图片加载框架的老大哥了，15.3k个star足以证明它的热门，UIL与gilde最大区别是可定制，UIL提供了大量配置方式，图片加载状态的回调（成功，失败，进行中），加载动画等；以及提供了移动端图片加载框架的缓存思路：三级缓存策略 sd卡-内存-网络；值得注意的是，UIL以及两年未更新了，但笔者仍推荐各位使用！</p>\n<p>github <a href=\"https://github.com/nostra13/Android-Universal-Image-Loader\" target=\"_blank\" rel=\"external\">https://github.com/nostra13/Android-Universal-Image-Loader</a></p>\n<p>作者 nostra13</p>\n<p>使用：</p>\n<p>下载地址:<a href=\"https://github.com/nostra13/Android-Universal-Image-Loader/raw/master/downloads/universal-image-loader-1.9.5.jar\" target=\"_blank\" rel=\"external\">universal-image-loader-1.9.5.jar</a></p>\n<h3 id=\"8-EventBus\"><a href=\"#8-EventBus\" class=\"headerlink\" title=\"8.EventBus\"></a>8.EventBus</h3><p>一句话介绍：EventBus是一款本地组件间通信框架</p>\n<p>上榜理由：组件间通信框架star量第一：14.8k，在大型项目的Activities，fragments，Threads，Services都可以看到它的使用场景，尽管EventBus在向未创建的组件传递事件时有些局限，仅适合在“活着的”组件间传递消息，但仍不妨碍它活跃在各个大型项目各个场景里。</p>\n<p>官网地址 <a href=\"http://greenrobot.org/eventbus/documentation/how-to-get-started/\" target=\"_blank\" rel=\"external\">http://greenrobot.org/eventbus/documentation/how-to-get-started/</a></p>\n<p>github  <a href=\"https://github.com/greenrobot/EventBus\" target=\"_blank\" rel=\"external\">https://github.com/greenrobot/EventBus</a></p>\n<p>作者 greenrobot </p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;org.greenrobot:eventbus:3.0.0&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"9-zxing\"><a href=\"#9-zxing\" class=\"headerlink\" title=\"9.zxing\"></a>9.zxing</h3><p>一句话介绍：条码图像处理库</p>\n<p>上榜理由：如果你用过二维码，你肯定已经间接使用过大名鼎鼎的zxing了。13.9K的star量，让它排在本榜单第九，实至名归，如果你有了解二维码的需求，不妨从了解、修改它源码入手。</p>\n<p>github <a href=\"https://github.com/zxing/zxing\" target=\"_blank\" rel=\"external\"> https://github.com/zxing/zxing</a></p>\n<p>作者  Sean Owen</p>\n<h3 id=\"10-picasso\"><a href=\"#10-picasso\" class=\"headerlink\" title=\"10.picasso\"></a>10.picasso</h3><p>一句话介绍：强力的图片下载、缓存框架</p>\n<p>上榜理由：本榜单出现的第三款图片类框架，不同的是picasso更强调图片下载，你可以将picasso集成进你的项目中，你也可以结合gilde和UIL与picasso，三者一齐封装至你的项目中，按需所用。</p>\n<p>官网地址 <a href=\"http://square.github.io/picasso/\" target=\"_blank\" rel=\"external\">http://square.github.io/picasso/</a></p>\n<p>github  <a href=\"https://github.com/square/picasso\" target=\"_blank\" rel=\"external\">https://github.com/square/picasso</a></p>\n<p>作者 square团队</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.squareup.picasso:picasso:2.5.2&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"11-lottie-android\"><a href=\"#11-lottie-android\" class=\"headerlink\" title=\"11.lottie-android\"></a>11.lottie-android</h3><p>一句话介绍：一款可以在Android端快速展示Adobe Afeter Effect（AE）工具所作动画的框架</p>\n<p>上榜理由：动画类框架第一名，github上13.3k个star证明了他的优越性，利用json文件快速实现动画效果是它最大的便利，而这个json文件也是由Adobe提供的After Effects（AE）工具制作的，在AE中装一个Bodymovin的插件，使用这个插件最终将动画效果生成json文件，这个json文件即可由LottieAnimationView解析并生成绚丽的动画效果。而且它还支持跨平台哟。</p>\n<p>github  <a href=\"https://github.com/airbnb/lottie-android\" target=\"_blank\" rel=\"external\">https://github.com/airbnb/lottie-android</a></p>\n<p>作者：Airbnb 团队</p>\n<h3 id=\"12-fresco\"><a href=\"#12-fresco\" class=\"headerlink\" title=\"12.fresco\"></a>12.fresco</h3><p>一句话介绍：一款可以管理图片内存的框架</p>\n<p>上榜理由:github上12.8k个star，图片类排行榜第四名，facebook的出身证明了它并非是重复造的轮子，在管理图片内存领域上有着它的一片天地，渐进式加载、加载gif都是它与前三位相比独有的特性</p>\n<p>官网地址： <a href=\"https://www.fresco-cn.org/\" target=\"_blank\" rel=\"external\">https://www.fresco-cn.org/</a></p>\n<p>github  <a href=\"https://github.com/facebook/fresco\" target=\"_blank\" rel=\"external\">https://github.com/facebook/fresco</a></p>\n<p>作者 facebook</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">  // 其他依赖</div><div class=\"line\">  compile &apos;com.facebook.fresco:fresco:0.12.0&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>下面的依赖需要根据需求添加：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">  // 在 API &lt; 14 上的机器支持 WebP 时，需要添加</div><div class=\"line\">  compile &apos;com.facebook.fresco:animated-base-support:0.12.0&apos;</div><div class=\"line\"></div><div class=\"line\">  // 支持 GIF 动图，需要添加</div><div class=\"line\">  compile &apos;com.facebook.fresco:animated-gif:0.12.0&apos;</div><div class=\"line\"></div><div class=\"line\">  // 支持 WebP （静态图+动图），需要添加</div><div class=\"line\">  compile &apos;com.facebook.fresco:animated-webp:0.12.0&apos;</div><div class=\"line\">  compile &apos;com.facebook.fresco:webpsupport:0.12.0&apos;</div><div class=\"line\"></div><div class=\"line\">  // 仅支持 WebP 静态图，需要添加</div><div class=\"line\">  compile &apos;com.facebook.fresco:webpsupport:0.12.0&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"13-RxAndroid\"><a href=\"#13-RxAndroid\" class=\"headerlink\" title=\"13.RxAndroid\"></a>13.RxAndroid</h3><p>一句话介绍：一款Android客户端组件间异步通信的框架</p>\n<p>上榜理由：github上12.7k个star，位居组件通信框架的第二名，仅在EventBus之后，如果要问两者的区别，Eventbus是用来取代组件间繁琐的interface，RxAndroid是用来取代AnsyTask的，并不冲突；当然RxAndroid的优点并不仅限于此，更多优雅的实现，可以去官网查阅！</p>\n<p>github  <a href=\"https://github.com/ReactiveX/RxAndroid\" target=\"_blank\" rel=\"external\">https://github.com/ReactiveX/RxAndroid</a></p>\n<p>作者 JakeWharton</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;io.reactivex.rxjava2:rxandroid:2.0.1&apos;</div><div class=\"line\">compile &apos;io.reactivex.rxjava2:rxjava:2.1.0&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"14-SlidingMenu\"><a href=\"#14-SlidingMenu\" class=\"headerlink\" title=\"14.SlidingMenu\"></a>14.SlidingMenu</h3><p>一句话介绍：侧滑菜单栏框架</p>\n<p>上榜理由：与Userval-Image-loader 齐名的上古神器框架——为你的app提供侧滑菜单栏的功能；github闪更有10.5k个star，证明了它的经久不衰，即使在Google推出了NavigationDrawer，仍然没有减少开发者对SildingMenu的拥簇，经典总是经得起考验的，这个上古神兽已经四年没有更新了；有太多太多的app使用过它，这些都可以在软件的开源许可上看到！</p>\n<p>github <a href=\"https://github.com/jfeinstein10/SlidingMenu\" target=\"_blank\" rel=\"external\">https://github.com/jfeinstein10/SlidingMenu</a></p>\n<p>作者 Jeremy Feinstein</p>\n<p>使用：</p>\n<p>在gihub上fork源码，集成进项目中</p>\n<h3 id=\"15-PhotoView\"><a href=\"#15-PhotoView\" class=\"headerlink\" title=\"15.PhotoView\"></a>15.PhotoView</h3><p>一句话介绍：一款ImageView展示框架，支持缩放，响应手势</p>\n<p>上榜理由：10.3k的star数量，位于图片类框架排行榜第五位，PhotoView与前四位不同的是这次带来的是图片的展示能力，你一定好奇微信的头像点击放大是如何实现的，很多App的图片显示响应手势按压是如何实现的，了解PhotoView，你一定会开心的！（笔者也不会告诉你ImageView的点击放大效果在Android的sample也有）</p>\n<p>github  <a href=\"https://github.com/chrisbanes/PhotoView\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/PhotoView</a></p>\n<p>作者：chrisbanes</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">在app根目录的build.gradle中加入：</div><div class=\"line\">allprojects &#123;</div><div class=\"line\">    repositories &#123;</div><div class=\"line\">        maven &#123; url &quot;https://jitpack.io&quot; &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">在app的module目录的build.gralde中加入：</div><div class=\"line\"></div><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;com.github.chrisbanes:PhotoView:latest.release.here&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.github.chrisbanes.photoview.PhotoView</span></span></div><div class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/photo_view\"</span></span></div><div class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></div><div class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span>/&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">PhotoView photoView = (PhotoView) findViewById(R.id.photo_view);</div><div class=\"line\">photoView.setImageResource(R.drawable.image);</div></pre></td></tr></table></figure>\n<h3 id=\"16-material-dialogs\"><a href=\"#16-material-dialogs\" class=\"headerlink\" title=\"16.material-dialogs\"></a>16.material-dialogs</h3><p>一句话介绍：一款自定义dialog框架</p>\n<p>上榜理由：9.9k个star，也是继PhotoView，SlidingMenu之后第三款自定义View框架，也许你还是自定义View的新人，对Dialog使用的还有点生疏，你可以通过它提升你的Dilaog使用能力</p>\n<p>github  <a href=\"https://github.com/afollestad/material-dialogs\" target=\"_blank\" rel=\"external\">https://github.com/afollestad/material-dialogs</a></p>\n<p>作者：Aidan Follestad</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    // ... other dependencies here</div><div class=\"line\">    compile &apos;com.afollestad.material-dialogs:core:0.9.4.5&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"17-droid-async-http\"><a href=\"#17-droid-async-http\" class=\"headerlink\" title=\"17.droid-async-http\"></a>17.droid-async-http</h3><p> 一句话介绍：一款基于Http协议的异步请求的网络框架，</p>\n<p>上榜理由：虽然你有无数个使用retrofit+okhttp的理由，但9.8k个star，证明它仍然值得你深入学习。值得注意的是，它也已经有两年没更新了，你尽管拿去当你懒惰的理由！</p>\n<p>github   <a href=\"https://github.com/loopj/android-async-http\" target=\"_blank\" rel=\"external\">https://github.com/loopj/android-async-http</a></p>\n<p>作者：James Smith</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">repositories &#123;</div><div class=\"line\">  maven &#123;</div><div class=\"line\">    url &apos;https://oss.sonatype.org/content/repositories/snapshots/&apos;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">dependencies &#123;</div><div class=\"line\">  compile &apos;com.loopj.android:android-async-http:1.5.0-SNAPSHOT&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"18-androidannotations\"><a href=\"#18-androidannotations\" class=\"headerlink\" title=\"18.androidannotations\"></a>18.androidannotations</h3><p>一句话介绍：一款基于注解的快速开发框架</p>\n<p>上榜理由：与Butterknife一样基于注解，利用注解快速完成view的初始化，不同的是androidannotations提供了更多的能力：简单的线程模型等；笔者只接触过Butterknife，无法更进一步叙述androidannotations的优势，如果你志在深入了解注解的妙用，可以尝试探索一下！</p>\n<p>官网地址 <a href=\"http://androidannotations.org/\" target=\"_blank\" rel=\"external\">http://androidannotations.org/</a></p>\n<p>github <a href=\"https://github.com/androidannotations/androidannotations\" target=\"_blank\" rel=\"external\">https://github.com/androidannotations/androidannotations</a></p>\n<p>作者： WonderCsabo</p>\n<h3 id=\"19-fastjson\"><a href=\"#19-fastjson\" class=\"headerlink\" title=\"19.fastjson\"></a>19.fastjson</h3><p>一句话介绍:一款基于json解析、生成的框架</p>\n<p>上榜理由：从它的名字不难看出，快速是它最大的特性，阿里巴巴的出身保证了代码的质量和优越，9.4k的star数量，也是榜单里第一个出现的中国开源框架，涉及网络的app都会用到json，fastjson值得作为你的首选！</p>\n<p>github  <a href=\"https://github.com/alibaba/fastjson\" target=\"_blank\" rel=\"external\">https://github.com/alibaba/fastjson</a></p>\n<p>作者：alibaba</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">compile &apos;com.alibaba:fastjson:1.1.58.android&apos;</div></pre></td></tr></table></figure>\n<h3 id=\"20-Material-Animations\"><a href=\"#20-Material-Animations\" class=\"headerlink\" title=\"20.Material-Animations\"></a>20.Material-Animations</h3><p>一句话介绍：一款提供场景转换过渡能力的动画框架</p>\n<p>上榜理由：Android动画框架排行榜第二名，9.3k个star数量，与动画框架榜单第一名lottie-android不同的是，Material-Animations提供的是场景切换的动画效果。Android 官网sample中已经提供了部分Transition （转场动画）的展示，作为初学者很难快速拓展到自己项目中，Material-Animations的示例出现为开发者省去了此类麻烦，直接照搬应用到自己的App中吧。</p>\n<p> github  <a href=\"https://github.com/lgvalle/Material-Animations\" target=\"_blank\" rel=\"external\">https://github.com/lgvalle/Material-Animations</a></p>\n<p>作者：Luis G. Valle</p>\n<p>使用：</p>\n<p>down源码，修改学习</p>\n<h3 id=\"21-tinker\"><a href=\"#21-tinker\" class=\"headerlink\" title=\"21.tinker\"></a>21.tinker</h3><p>一句话介绍：它是微信官网的Android热补丁解决方案</p>\n<p>上榜理由：9.1k个star，微信在用的热补丁方案，心动不如行动</p>\n<p>官网地址  <a href=\"http://www.tinkerpatch.com/Docs/intro\" target=\"_blank\" rel=\"external\">http://www.tinkerpatch.com/Docs/intro</a></p>\n<p>github   <a href=\"https://github.com/Tencent/tinker\" target=\"_blank\" rel=\"external\">https://github.com/Tencent/tinker</a></p>\n<p>作者：Tencent</p>\n<h3 id=\"22-ViewPagerIndicator\"><a href=\"#22-ViewPagerIndicator\" class=\"headerlink\" title=\"22.ViewPagerIndicator\"></a>22.ViewPagerIndicator</h3><p>一句话介绍：一款基于ViewPager的页面指示器开源框架</p>\n<p>上榜理由：上古神器，尽管已经五年未更新了，但你仍然可以在淘宝等app中看到它的使用场景，8.9K的star量让它不愠不火的在矗立在榜单里</p>\n<p>官网地址 <a href=\"http://viewpagerindicator.com/\" target=\"_blank\" rel=\"external\">http://viewpagerindicator.com/</a></p>\n<p>github  <a href=\"https://github.com/JakeWharton/ViewPagerIndicator\" target=\"_blank\" rel=\"external\">https://github.com/JakeWharton/ViewPagerIndicator</a></p>\n<p>作者：JakeWharton </p>\n<p>使用：</p>\n<p> 下载 地址<a href=\"https://github.com/JakeWharton/Android-ViewPagerIndicator/zipball/master\" target=\"_blank\" rel=\"external\"> https://github.com/JakeWharton/Android-ViewPagerIndicator/zipball/master</a></p>\n<h3 id=\"23-Android-CleanArchitecture\"><a href=\"#23-Android-CleanArchitecture\" class=\"headerlink\" title=\"23.Android-CleanArchitecture\"></a>23.Android-CleanArchitecture</h3><p>一句话介绍：一个讲解设计框架的demo</p>\n<p>上榜理由：它不是框架，你可以把它当作一本书，它将教会你如何设计简洁的架构，工程里有一个sample app，配合图文讲解，你将对Android客户端的架构有更深一层的认识。8.8k的star数量，证明了它是一本“好书”哟。</p>\n<p>github  <a href=\"https://github.com/android10/Android-CleanArchitecture\" target=\"_blank\" rel=\"external\">https://github.com/android10/Android-CleanArchitecture</a></p>\n<p>作者：Fernando Cejas</p>\n<h3 id=\"24-Android-PullToRefresh\"><a href=\"#24-Android-PullToRefresh\" class=\"headerlink\" title=\"24.Android-PullToRefresh\"></a>24.Android-PullToRefresh</h3><p>一句话介绍：一款为普通视图提供刷新UI的视图框架</p>\n<p>上榜理由：8.2K的star数量使它位居刷新类UI框架榜首，强大的兼容能力，该框架支持ListView，GrdiView，WebViewScrollView，ViewPager等众多View增加刷新的能力，如果你有增加上拉加载，下拉加载的需求，你应该考虑它了！</p>\n<p>github <a href=\"https://github.com/chrisbanes/Android-PullToRefresh\" target=\"_blank\" rel=\"external\">https://github.com/chrisbanes/Android-PullToRefresh</a></p>\n<p>作者：Chris Banes</p>\n<p>使用：</p>\n<p>github fork源码，集成到项目中</p>\n<h3 id=\"25-flexbox-layout\"><a href=\"#25-flexbox-layout\" class=\"headerlink\" title=\"25.flexbox-layout\"></a>25.flexbox-layout</h3><p>一句话介绍：一款弹性伸缩布局</p>\n<p>上榜理由：8.1k个star，前端H5开发者转Android开发的福音，FlexboxLayout作为<code>LinearLayout</code>和<code>RelativeLayout的替代者，值得各位一试，与其一同推出的还有ConstraintLayout。</code></p>\n<p>github  <a href=\"https://github.com/google/flexbox-layout\" target=\"_blank\" rel=\"external\">https://github.com/google/flexbox-layout</a></p>\n<p>作者：Google</p>\n<p>使用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">dependencies &#123;</div><div class=\"line\">    compile &apos;com.google.android:flexbox:0.3.0-alpha3&apos;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>未完待续</strong></p>\n"},{"title":"面向对象编程的特殊理解","date":"2016-02-10T05:15:40.000Z","_content":"\n总结了几种给人眼前一亮的对于面向对象编程的理解。\n\n- 首先放几张图O(∩_∩)O\n\n![](https://pic1.zhimg.com/50/664ba37eeee9f4623c06c066867f1d38_hd.jpg)\n\n> 感觉贼形象!😄\n\n![](https://pic2.zhimg.com/50/65047b8d9db314a5c777cc0bfb4069a1_hd.jpg)\n\n> ​\t上图的解释是：京都动画自《轻音》以来几乎所有动画角色都用同一张脸，比方说《玉子市场》的北百川玉子的人设就“继承”了京都脸，再加入发型和瞳色等个性化元素，这就是类继承，如图中间那个光头就是父类，北百川玉子就是子类，搬上屏幕后可以演绎剧本就是实例化的对象，如果剧情需要想让玉子COSPLAY千反田爱瑠，那就可以同时继承玉子类和千反田类，变成一个玉子千反田类，同时具备了两者特性，千反田得到了玉子的发型，这就是多重继承。而每个角色都有符合各自的性格特征的设定，同样的剧情也可以有不同的演绎方式，就算不符合本身性格特征行为有时也可以表现出反差萌，这就体现了多态性。\n\n- 一句话介绍\n\n> ​\t把一组数据结构和处理它们的方法组成对象,把相同行为的对象归纳为类,通过类的封装隐藏内部细节,通过继承实现类的特化/泛化,通过多态实现基于对象类型的动态分派.\n\n- 再精炼一点，那只剩下三个词了\n\n> ​\t**封装、继承、多态**\n\n","source":"_posts/面向对象编程的特殊理解.md","raw":"---\ntitle: 面向对象编程的特殊理解\ndate: 2016-02-10 13:15:40\ntags: java\ncategories: java\n---\n\n总结了几种给人眼前一亮的对于面向对象编程的理解。\n\n- 首先放几张图O(∩_∩)O\n\n![](https://pic1.zhimg.com/50/664ba37eeee9f4623c06c066867f1d38_hd.jpg)\n\n> 感觉贼形象!😄\n\n![](https://pic2.zhimg.com/50/65047b8d9db314a5c777cc0bfb4069a1_hd.jpg)\n\n> ​\t上图的解释是：京都动画自《轻音》以来几乎所有动画角色都用同一张脸，比方说《玉子市场》的北百川玉子的人设就“继承”了京都脸，再加入发型和瞳色等个性化元素，这就是类继承，如图中间那个光头就是父类，北百川玉子就是子类，搬上屏幕后可以演绎剧本就是实例化的对象，如果剧情需要想让玉子COSPLAY千反田爱瑠，那就可以同时继承玉子类和千反田类，变成一个玉子千反田类，同时具备了两者特性，千反田得到了玉子的发型，这就是多重继承。而每个角色都有符合各自的性格特征的设定，同样的剧情也可以有不同的演绎方式，就算不符合本身性格特征行为有时也可以表现出反差萌，这就体现了多态性。\n\n- 一句话介绍\n\n> ​\t把一组数据结构和处理它们的方法组成对象,把相同行为的对象归纳为类,通过类的封装隐藏内部细节,通过继承实现类的特化/泛化,通过多态实现基于对象类型的动态分派.\n\n- 再精炼一点，那只剩下三个词了\n\n> ​\t**封装、继承、多态**\n\n","slug":"面向对象编程的特殊理解","published":1,"updated":"2017-10-20T05:23:56.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zgah2d000bnslf135pyod8","content":"<p>总结了几种给人眼前一亮的对于面向对象编程的理解。</p>\n<ul>\n<li>首先放几张图O(∩_∩)O</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/50/664ba37eeee9f4623c06c066867f1d38_hd.jpg\" alt=\"\"></p>\n<blockquote>\n<p>感觉贼形象!😄</p>\n</blockquote>\n<p><img src=\"https://pic2.zhimg.com/50/65047b8d9db314a5c777cc0bfb4069a1_hd.jpg\" alt=\"\"></p>\n<blockquote>\n<p>​    上图的解释是：京都动画自《轻音》以来几乎所有动画角色都用同一张脸，比方说《玉子市场》的北百川玉子的人设就“继承”了京都脸，再加入发型和瞳色等个性化元素，这就是类继承，如图中间那个光头就是父类，北百川玉子就是子类，搬上屏幕后可以演绎剧本就是实例化的对象，如果剧情需要想让玉子COSPLAY千反田爱瑠，那就可以同时继承玉子类和千反田类，变成一个玉子千反田类，同时具备了两者特性，千反田得到了玉子的发型，这就是多重继承。而每个角色都有符合各自的性格特征的设定，同样的剧情也可以有不同的演绎方式，就算不符合本身性格特征行为有时也可以表现出反差萌，这就体现了多态性。</p>\n</blockquote>\n<ul>\n<li>一句话介绍</li>\n</ul>\n<blockquote>\n<p>​    把一组数据结构和处理它们的方法组成对象,把相同行为的对象归纳为类,通过类的封装隐藏内部细节,通过继承实现类的特化/泛化,通过多态实现基于对象类型的动态分派.</p>\n</blockquote>\n<ul>\n<li>再精炼一点，那只剩下三个词了</li>\n</ul>\n<blockquote>\n<p>​    <strong>封装、继承、多态</strong></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>总结了几种给人眼前一亮的对于面向对象编程的理解。</p>\n<ul>\n<li>首先放几张图O(∩_∩)O</li>\n</ul>\n<p><img src=\"https://pic1.zhimg.com/50/664ba37eeee9f4623c06c066867f1d38_hd.jpg\" alt=\"\"></p>\n<blockquote>\n<p>感觉贼形象!😄</p>\n</blockquote>\n<p><img src=\"https://pic2.zhimg.com/50/65047b8d9db314a5c777cc0bfb4069a1_hd.jpg\" alt=\"\"></p>\n<blockquote>\n<p>​    上图的解释是：京都动画自《轻音》以来几乎所有动画角色都用同一张脸，比方说《玉子市场》的北百川玉子的人设就“继承”了京都脸，再加入发型和瞳色等个性化元素，这就是类继承，如图中间那个光头就是父类，北百川玉子就是子类，搬上屏幕后可以演绎剧本就是实例化的对象，如果剧情需要想让玉子COSPLAY千反田爱瑠，那就可以同时继承玉子类和千反田类，变成一个玉子千反田类，同时具备了两者特性，千反田得到了玉子的发型，这就是多重继承。而每个角色都有符合各自的性格特征的设定，同样的剧情也可以有不同的演绎方式，就算不符合本身性格特征行为有时也可以表现出反差萌，这就体现了多态性。</p>\n</blockquote>\n<ul>\n<li>一句话介绍</li>\n</ul>\n<blockquote>\n<p>​    把一组数据结构和处理它们的方法组成对象,把相同行为的对象归纳为类,通过类的封装隐藏内部细节,通过继承实现类的特化/泛化,通过多态实现基于对象类型的动态分派.</p>\n</blockquote>\n<ul>\n<li>再精炼一点，那只剩下三个词了</li>\n</ul>\n<blockquote>\n<p>​    <strong>封装、继承、多态</strong></p>\n</blockquote>\n"},{"title":"最后的问题","date":"2017-09-21T08:45:22.000Z","_content":"\n> ​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t阿西莫夫\n\n　　最后的问题，是在公元二〇六一年五月二十一日，在半开玩笑的情况下首次被提出来的。那时正值人类在星光熠耀的舞台上首次登场。起因是酒酣之中，以五块钱作赌注的一次打赌。事情的经过是这样的： \n\n　　亚历山大-雅道尔及保杉-鲁波夫是“茂的模”的两个忠实仆从。那巨大的电脑一哩又一哩长的表面，那冰冷、卡嗒作响而又不停闪着亮光的表面，背后究竟进行着什么样的活动？这两位料理员比世界上任何人都知得清楚。他们至少对那整个电讯传递及所有回路的基本蓝图，有一大致的概念。这个体系的复杂性与日俱增，在很久之前，即已超过任何个别的人所能全盘掌握的地步。 \n\n　　“茂的模”可以自我调整和自我修正。它必须具有这种能力，因为没有任何人为的力量，可以足够迅速或堪以适当地为它作出调整和修正。故此，雅道尔和鲁波夫只是对这庞然怪物作出一些很轻微和表面的看管和料理。不过，他们倒是尽心尽力地去做的，没有人能比他们做得更好的了。他们输入资料，把问题修改以适合“茂的模”的需求，最后把输出的答案翻译和整理。很显然，他们跟其它所有同业的人员一样，都极有资格分享“茂的模”的光荣。 \n\n　　数十年来，“茂的模”帮助人们设计船支，测定轨迹，使人类能抵达月球、金星和火星。但再远一点，地球那贫脊的资源，便再不能提供宇宙飞船所需的燃料。这些冗长的旅程需要太多的能量。人类已经以越来越高的效率来开采地球上的煤矿及铀矿。可是，地球上的煤和铀都是有限的。 \n\n　　但一步一步地，“茂的模”搜集了足够的资料，能对更深奥的一些问题，作出更为彻底的解答。就在公元二〇六一年五月十四日，以往一度曾是理论的构想，终于变成了事实。 \n\n　　太阳的能量被储存、转化及直接地利用，规模遍彻整个行星。地球熄灭了她的煤火，关掉了它的铀反应炉，随而开启了一个特殊的电钮，把自己连接到一个小型的供应站那儿。这个直径一哩的供应站，以地月间一半的距离环绕着我们这个行星。整个地球就依赖着一些看不见的太阳能光束来行走。 \n\n　　七天的时间，并不足以使那光采和热闹黯淡或沉寂下来。但雅道尔和鲁波夫终于能避开那些公众应酬，在一处没有人会想到的地方，静静地相聚在一起。这地方是地底下一个弃置了的密室。在那儿，“茂的模”露出了它那深深地埋藏着的巨大躯体的一小部份。既没有人管理而又优悠地闲着，“茂的模”作出懒洋洋的卡嗒声，正从容地整理着一些例行的资料。它也同样正获得休假。两个小伙子也乐得如此，他们本来就没有意思去打扰这位大人物。 \n\n　　他们带来了一瓶酒。在这一刻，两人惟一想做的，就是齐齐松驰一下，把酒聊天。 \n\n　　“想想呀！那真是奇妙。”雅道尔说。他宽阔的脸上露出了疲倦的痕迹，正用一根玻璃棒慢慢地搅拌面前的酒，注视着那缓缓地旋转的冰块。“我们今生今世也用不完的能量，不用花费一分一毛便源源不绝的滚滚而来。只要我们愿意的话，我们有足够的能量，把整个地球熔为一滴含有杂质的铁水，而且事后对这花去的能量可以毫不在乎！今生今世也用不完的能量，我们所需要所有所有的能量，至直永远、永远、永远！” \n\n　　鲁波夫把头斜斜的歪向一旁。这是他在预备提出相反意见以反驳他人时常做的怪动作。他现在正想提出相反的意见，反驳雅道尔。一小部分原因是他要负责携来那些冰块和酒杯。“不是永远。”他说。 \n\n　　“噢！去你的！就算不是永远也差不多啦！起码直至太阳油尽灯枯之时，老雅。” \n\n　　“那就不是永远。” \n\n　　“好啦！那么起码是千万年，亿万年吧！就算它是二十亿年左右，好了吧？” \n\n　　鲁波夫扬起手指，抚弄着他那稀疏的头发，像在告诉自己还有不少剩在那儿。他慢慢地轻吮自己的冻酒，道：“二十亿年比起永远，可差得多了。” \n\n　　“但至少它满够我们用了，你说不是吗？” \n\n　　“这样说，煤和铀也不一样可以吗？” \n\n　　“好啦！但现在我们可以把每一艘宇宙飞船直接驳上我们的太阳电力站。它可以来回冥王星数百万次，而无燃料短缺之虞。若果用煤和铀，这可肯定办不到。不信你去问问‘茂的模’。” \n\n　　“我不用问‘茂的模’。我可知得清楚。” \n\n　　“那就请你不要再挑三剔四，小觑‘茂的模’为我们所立的功劳。”雅道尔激动地叫道：“它做得已挺好的了。” \n\n　　“谁说它做得不好？我只是说：太阳不可能永远的燃烧下去。我所讲的，一直就只是这一点。我们在二十亿年内的确是高枕无忧，但之后呢？”鲁波夫的一支手指微微颤抖地指着对方。“请不要告诉我，人类将转向其它的星球汲取能源。” \n\n　　接着的一阵子，大家都默不作声。雅道尔只一两次把酒杯提到唇边。鲁波夫则慢慢地闭上眼睛。两人都在休息。 \n\n　　鲁波夫突然张开了双眼。“你是在想，太阳熄灭了，还有其它的恒星。是不是？” \n\n　　“我没有这样想。” \n\n　　“一定是，你一定是在这样的想。你的问题就是不懂逻辑。你就像故事中那傻小子，半途遇着大雨。他走进丛林里，在一棵树下躲避。他半点儿也不着急，因为他以为自己这棵树若湿透了，他可以再找另外一棵。” \n\n　　“我明白，我明白。”雅道尔说：“你不用说得这么大声。太阳完蛋时，其余的星球也一样完蛋了，不是吗？” \n\n　　“这个当然。”鲁波夫喃喃地说：“宇宙间万物的起源，都可追溯到最先的那次大爆炸，无论那是怎样子的一回事。同样，所有星星都有燃烧殆尽的时候。到那时，万物皆化为乌有，整个宇宙也就完蛋大吉啦。当然，有些星球比其它的烧得快，去他的！-例如那些红巨星蓝巨星就只有数千万年的光景。太阳将还有五十亿年，至于那些白矮星红矮星等，大概能再多支撑数百亿年└w憬h勿论它们到时有啥用！但顶多是一千亿年吧，一切将归于黑暗。熵就是要增长到一个最大值，那就是了。” \n\n　　“我十分清楚熵这回事。”雅道尔认真地说，似乎这与他的尊严很有关系。 \n\n　　“你知个屁！” \n\n　　“我起码知得不比你少！” \n\n　　“那么你就该明白，任何事物最后都有消散殒灭的一天。” \n\n　　“好啦！有谁说它们不会呢？” \n\n　　“正是你嘛！你这可怜虫。你说我们有永远也用不完的能量。你说‘永远’。” \n\n　　这回轮到雅道尔要唱反调。“也许有一天，万物会从头开始呢！”他说。 \n\n　　“绝不可能！” \n\n　　“为什么？总会有这样的一天的。” \n\n　　“永无可能！” \n\n　　“问问‘茂的模’呢！” \n\n　　“你去问‘茂的模’！我敢输赌。若‘茂的模’说一声‘可以’，我输给你五块钱。” \n\n　　雅道尔刚好醉得肯接受这打赌，却也刚好清醒得可以进行所需的操作。他用符号和一大堆运作指示，把问题重新草拟。按照日常的用语，那问题大概是这样：“人类可否在太阳老死之后，无需净耗一丝一毫的能量，而终有一天把太阳恢复年轻时的旺盛？” \n\n　　整个问题又或者可以更简单地读成：“怎样才能使整个宇宙的净熵大幅度地减低？” \n\n　　“茂的模”突然变得死寂静谧。那徐徐闪动的亮光熄灭了，远处电讯传送的卡嗒声也停止了。 \n\n　　就在两个吓得半死的技师，感到再也按捺不住之际，附属于“茂的模”某处的电讯机忽然恢复了生气，在吐出的纸带上，打了八个大字：“资料不足，无可奉告。” \n\n　　“赌不成啦。”鲁波夫轻声地说。两人跟着便匆匆离去。 \n\n　　第二天早晨，两人头痛如绞，口舌胶苦，早已把整件事忘得一干二净了。 \n\n　　※※※ \n\n　　谢路、谢路婷和谢路儿一、谢路儿二等四人一同看着星光满布的萤幕。随着宇宙飞船完成了穿越“超太空”的“非时间”旅程，萤幕忽然起了变化，一息间，那均匀错落，星辰闪耀的影像，变成了一幅由一个孤独的、像子弹般大的绚烂圆盘策居中央、踞视一切的慑人图景。\n\n　　“那就是X-23。”谢路充满信心地说。他背负着瘦长的双手，指节因握得过份用力而微微发白。 \n\n　　小谢路儿——两个都是女孩子——刚好经历了她们生平第一次的“超太空穿越”。两人都十分感到在穿越其间，那种有若内外倒置或是从内反转过来的怪异感觉。她们掩嘴偷笑，同时疯狂地绕着她们的妈妈互相追逐，一边大喊：“我们到了X-23！我们到了X-23！我们——” \n\n　　“静点！孩子！”谢路婷截然地喝道。“谢路，你肯定了吗？” \n\n　　“还有什么不肯定呢？”谢路反问，抬头望了望天花板上，表面平滑无瑕的突起的金属构造。这结构伸延整个房间，分别没入对角的两处墙壁。事实上，它有整艘船那般长。 \n\n　　谢路对这粗粗的金属长杆所知甚少。他只知道它的名字叫“微型模”，而且谁有任何问题或疑难，都可以问它。不过就是没有人向它问问题，它仍负有为宇宙飞船导航，并把宇宙飞船带引至某一预定的目的地这一重大任务。它从不同的“次星河动力供应站”那儿汲取能量，并为“超太空纵跃”的数学公式计算答案。 \n\n　　谢路和他的家人，只需在船那舒适的起居舱内休嬉及静心等待。 \n\n　　以往曾有人告知谢路，“微型模”最后的那个“模”字，在古老的地球语中，是“模拟式电脑”的意思。但谢路就是连这一点也差点儿忘了。 \n\n　　谢路婷看着萤幕，两眼湿濡濡的。“我忍不住。我一旦想起舍弃家乡，远离地球，心中总是感到不知怎样似的。” \n\n　　“你真傻！地球有什么值得留恋？”谢路问道：“我们在那一无所有。在这，在X-23，我们将拥有一切。你不会感到寂寞。你又不是那些先锋的拓荒者。这星球上已有超过一百万人。哈！我们的曾子曾孙，可能因为到时X-23也已经过份挤迫，而要另外探求新的世界呢！”接着，谢路若有所思的顿了一顿：“可不是吗？那些电脑能随着人口的增长，发展出相应的星际旅行方法，这真是我们的好运气。” \n\n　　“我知道，我知道！”谢路婷仍是禁不住心中的哀愁。 \n\n　　谢路儿一抢着说：“我们的‘微型模’是世界上最好的‘微型模’。” \n\n　　“是的，我想是的。”谢路抚摸着她的头发。 \n\n　　拥有一副属于自己的“微型模”，真是一件令人快慰的事。谢路十分庆幸他正处于现有的年代，而不是其它的世纪。他父亲年轻时，所有电脑都是一些延绵近百平方哩的庞然大物。而且每一个行星只拥有一副，叫做“行星模”。一千年以来，它们越变越大。可是，进步突如其来，改变了一切。分子活塞代替了晶体管，最大的“行星模”也变得只占一艘宇宙飞船一半的空间。 \n\n　　谢路感到很是兴奋。他每次想到这问题都有同一的感觉：他现时个人拥有的“微型模”，比起那首次驯服太阳，既古老又原始的“茂的模”，不知复杂多少倍。比起那首次解决了超太空飞行的难题，使星辰间的旅程成为可能的地球“行星模”（历来最大的“行星模”。）其复杂性也不相伯仲。 \n\n　　“这么多的星球，这么多的行星。”谢路婷感叹道，心中思潮起伏。“我想一家一家的人，将会好象我们现时一般，永远不停地移往新的行星居住。” \n\n　　“不是永远。”谢路带着微笑，说：“终有一天，所有东西会停下来。当然，那至少是数十亿年之后的事。很久很久以后的事。你知道吗？就是星辰的光辉也有耗尽的一日。熵一定要不断地增长下去。” \n\n　　“爸爸，熵是什么？”谢路儿二尖叫道。 \n\n　　“小甜儿。熵就是代表宇宙消耗了多少能量的一个名字。每一样东西都会用尽的，就像你那会走会叫的小型通信机械人一样，你记得吗？” \n\n　　“我们不可以换上新的电池，就像我与小机械人换电一样吗？” \n\n　　“小宝贝，星星本身就是电池。它们一用光了，那儿还有新的电池呢？” \n\n　　谢路儿一随即撒起娇来：“爸爸，不要让它们用光，不要让那些星星用光吧！” \n\n　　“看你的，弄成这个样子。”谢路婷低声说，有点气愤而又不知所措。 \n\n　　“我怎知会使她们害怕起来？”谢路低声回答。 \n\n　　“问问‘微型模’吧！”谢路儿一大声地说：“问问它怎样才能使星星再亮起来吧。” \n\n　　“去吧。”谢路婷说：“这会使她们安静下来。”谢路儿二这时也哭起来了。 \n\n　　谢路耸了耸肩。“好啦，好啦，我亲爱的。我去问问‘微型模’。它会告诉我们。你不用担心！” \n\n　　他询问“微型模”，又急急的补上：“把答案印出来。” \n\n　　谢路两手拿着那幼薄的纸条，装着很高兴的样子说：“看！‘微型模’说到那个时候，它自有办法照顾一切。你们不用再担心啦。” \n\n　　谢路婷说：“现在呢，够钟上床睡觉了。我们不久便要到达我们的新家园啦。” \n\n　　谢路在毁掉那纸条之前，把上面的字读了一遍：“资料不足，无可奉告。” \n\n　　他耸了耸肩，转看那萤幕。Ｘ-23正就在前方。 \n\n　　※※※ \n\n　　临马府的ＶＪ-23Ｘ凝视着那立体的、小比例的银河投影图之中的漆黑深空，说：“我有时会想到，我们对这件事情看得这么严重，是不是有点无聊荒谬？” \n\n　　呖镐廊的ＭＱ-17Ｊ摇了摇头。“我认为不。你也知道，依目前的扩展速度，整个银河系不出五年便会全部挤满了人。” \n\n　　他们两人看来都是二十出头。两个都身形高大而且体态优美。 \n\n　　“不过，”ＶＪ-23Ｘ说，“我仍是不大愿意向银河评议会递交一个如此悲观的报告。” \n\n　　“我认为这样做最恰当不过。他们就是需要点冲击，我们应该使那班高高在上的大官认真起来，看清楚一下问题。” \n\n　　ＶＪ-23Ｘ叹了口气。“太空是无限的。外边还有成千上万的银河等待着我们，随我们任意发展下去。想想呀，所有银河的数目实在何止万千！” \n\n　　“就是一亿一兆也仍然不是无限。而且总的数目比之无限，是越来越小得可怜。试想想！二万年前，人类首次解决了直接利用恒星能源的难题；数世纪后，恒星际飞行得以实现。人类经历了数百万年才挤满了一个小小的世界，却只需一万五千年便挤满了其余的整个银河。如今，我们的人口每十年就增加一倍——” \n\n　　ＶＪ-23Ｘ打岔说：“我们要知，长生不死是一个主要的因素。” \n\n　　“很好。我们现在可以长生不死。不错我们应该把它归入考虑之列。我总觉得这长生不死有它令人不悦的一面。‘银河模’的确替我们解决了不少问题，但就防止衰老及死亡这一问题而言，它以往的成绩都因此而付诸流水了。” \n\n　　“然而，我想你不会打算放弃你的生命吧！” \n\n　　“不！不！”ＭＱ-17Ｊ急急的断然回答，可是随即又转为温柔委婉的说：“起码不是现在。我还挺年轻呢。你呢？你多大了？” \n\n　　“二百二十三岁。你呢？” \n\n　　“我还未到二百岁——不过，让我们回到原先的话题吧。人口每十年增长一倍。一天当这个银河被住满了，不出十年我们便可挤满第二个银河。再过十年我们可挤满另外两个。另一个十年、四个。不出一百年的光景，我们将挤满了一百万个银河。只消一万年，整个宇宙便会肩并肩的挤满了人。之后又怎样呢？” \n\n　　ＶＪ-23Ｘ说：“还有一点要考虑的，就是运输的问题。我怀疑若把整个星河的居民从一个星河移往第二个星河，将需要多少的太阳能源单位。” \n\n　　“提得好。就是如今，人类每年就消耗两个阳能单位。” \n\n　　“大部份的能量都浪费了。试想想，单是我们自己的星河，每年就输出整千个阳能单位，而我们只用了其中的两个。” \n\n　　“不错。可是我们就是能够百份之一百地利用这些能量，都只不过使终结来得迟些吧了。我们的能量需求，正以几何级数地上升，比人口的增长还厉害。我们在所有星河未熄灭之前，一早便会耗尽一切可能利用的能量。有意思，一个真正有意思的观点。” \n\n　　“不过，我们可以从星际气体中重新制造新的恒星。” \n\n　　“或是从扩散了的热能中制造出新的恒星？”ＭＱ-17Ｊ带着嘲弄的口吻问道。 \n\n　　“可能有某种方法，我们能把熵的趋势倒转过来。我们应该问问‘银河模’。” \n\n　　ＶＪ-23Ｘ实在并非认真的这样想。但ＭＱ-17Ｊ已从他口袋中取出了他的“银河模”通信仪，放在他前面的桌上。 \n\n　　“我一早便想这样做。”他说：“这是人类迟早要面对的一个问题。” \n\n　　他严肃地注视着那通信仪。这通信仪只是一个两寸见方的正立方体，而且中间差不多空无一物。但它透过超太空，与那为着全人类服务的伟大“银河模”连结在一起。我们如果把超太空也计算在内，它实在是“银河模”庞大躯体的一部份。 \n\n　　ＭＱ-17Ｊ顿了一顿，正揣测着在他长生不老的未在岁月中，究竟有没有一天能亲眼目睹“银河模”。这“银河模”位于一个特别为它而设的小小世界之上。如蛛网般的力场光束纵横交错、来回穿插。一股一股的亚介子流，在光束所支持着的特种物质中飞跃奔驰，以代替以往古老而又笨拙的分子活塞。然而，就是拥有这些“亚以太”先进技术的“银河模”其整个躯体也足足有二千英尺之长。 \n\n　　倏然地，ＭＱ-17Ｊ向着“银河模”通信仪发问：“熵可以被逆转吗？” \n\n　　ＶＪ-23Ｘ吓了一跳，急忙说：“噢！我不是真的要你问这样的一个问题。” \n\n　　“为什么不？” \n\n　　“我们大家都很清楚，熵是不可能逆转的。我们不能把烧剩下来的烟尘和灰烬变回一棵大树。” \n\n　　“你的世界那儿有很多树的吗？”ＭＱ-17Ｊ问道。 \n\n　　“银河模”的声响，把两人吓了一跳，两个人随即静了下来，不敢作声。从上那精巧细小的通信仪中，传来了一丝清脆悦耳的声音，说：“资料不足，无可奉告。” \n\n　　ＶＪ-23Ｘ说：“可不是吗！” \n\n　　两人随即又回到即将呈交银河评议会的报告那一话题上。 \n\n　　※※※ \n\n　　思尊者的心灵伸延及于整个新的星河，对那些维持星河的璀灿光辉、在银河中绕转成流的无数星辰，表现出一丝微微的兴趣。他从未探访过这个星河。他有可能探访所有的星河吗？它们是如此的众多，而且每一个都载满了人——但这个负载已差不多成为一种无用的累赘。一步一步的。人类真正的精髓，已移往这里，在这太空的深处。 \n\n　　是心灵，不是肉体！那些不朽的躯壳仍然留在行星上，“洋洋乎与浩气俱”。有些时，它们会起来作一些实质的活动，不过，那是越来越少的了。此外，长久以来，已经越来越少新的自我出现，以加入这个无比强大的行列。但那又有什么关系呢？反正宇宙中已越来越少空间可供新的个体居住。 \n\n　　思尊者在他的沉思冥想中，被另一个移近的心灵的飘渺触角所惊醒。 \n\n　　“我是思尊者。”思尊者说：“你呢？” \n\n　　“我是大十晕。你的银河叫什么名字？” \n\n　　“我们就叫它做银河？你的呢？” \n\n　　“我们也是这样叫。所有人都称他们的银河做‘他们的银河’，仅此而已。不过，这也是挺自然的。” \n\n　　“是呀。反正所有的银河都是一样。” \n\n　　“并非所有银河都是一样的。在某一个独特的银河之中，必定有一处地方是人类的发源地。那不是使这个银河与别不同吗？” \n\n　　思尊者说：“那么是那一个呢？” \n\n　　“我也不大清楚。不过，‘宇宙模’会知道的。” \n\n　　“我们不如问问它吧。我突然感到很好奇。” \n\n　　思尊者扩大了他的感觉范围，直至那些银河越缩越小，成为一个更大更漆黑的背景上的散落光点；这盈亿上兆的星河，载着那些不朽的居客、那些智能的形体，而这些形体的心灵，却都在深空之中自由飘泊。然而，其中有一个银河是独一无二的，因为人类就是从这银河发轫和茁壮长大。在那朦胧的遥远岁月之中，曾经有一段时期，这是惟一有人类居住的地方。 \n\n　　思尊者受好奇之火熬炙着，极欲看看这银河是怎么的一个模样。他叫道：“‘宇宙模’！人类是从那个银河中起源的？” \n\n　　“宇宙模”立即便已听到这一呼唤，因为在每一个世界及太空中每一个角落，“宇宙模”都有它的接收器在默默地守待。而每一个接收器通过了超太空，都直接驳到一处不为人知的地点——“宇宙模”孤伶独处，踞策一切的地方。 \n\n　　思尊者所认识的人之中，只有一个的思维曾经穿透至“宇宙模”的可见范围内。按照他后来所说，所见到的就只是一个耀眼的、直径大概只有两英尺的球体，而且还是模糊不清的。\n\n　　“但那怎可能是‘宇宙模’的全部呢？”思尊者曾经问道。 \n\n　　“‘宇宙模’的大部份都在超太空。不过，它究竟以一种怎样的状态在那儿存在，我实在难以想象。”这就是思尊者所得到的回答。 \n\n　　事实上，不单回答的人难以想象，任何人也同样无法想象。思尊者知道，这是因为在很久以前，人类已没有参予任何一副“宇宙模”制造过程中的任何部份。每一副“宇宙模”都亲自设计并建造它的继承者。 \n\n　　每一副电脑，在其存在的上百万年的岁月中，都不断搜集及累积必需的资料，用以造成一个更好、更精巧、更能干的继承者。它所有的知识及自我的意识，将融入这继承电脑之中，混成一体。 \n\n　　“宇宙模”打断了思尊者的游荡心思，但不是用语言，而是通过引导。思尊者的心神，被带领至一幅黯淡星河海洋的图景，在这图景中，其中一个星河扩大起来，直至其内的星辰清晰可辨。 \n\n　　一个思想随即而来。无比的遥远，却又无比的清晰：“这就是人类原先的星河。” \n\n　　但不论怎样看，也看不出这星河与其它的有什么分别。思尊者抑遏着心中的失望。 \n\n　　大十晕一路伴随着思尊者的心灵，现在突然说：“而其中的一颗星就是人类起源时的星体吗？” \n\n　　“宇宙模”说：“人类原先的星球已变成了新星。现在它是一颗白矮星。” \n\n　　“那上面的人都死了吗？”思尊者错愕地，不加思索地问。 \n\n　　“宇宙模”说：“像其余类似的情况一样，我们及时造了一个新的世界，好让他们的肉体有所栖息。” \n\n　　“唔！当然。”思尊者说。但就在他如此说的当儿，一阵失落的感觉涌上心头。他的心神放开了对人类那原先星河的掌握，让它跳回那星河海洋之中，再度成为朦胧的光点。他永不想再看见这星河了。 \n\n　　大十晕说：“干吗？” \n\n　　“星辰逐一的消逝。那原先的星球已死掉了。” \n\n　　“它们横竖都要死的嘛。有什么不妥呢？” \n\n　　“但当所有能量都耗尽了，我们的躯体最终也会死亡。就是我和你也不能幸免。” \n\n　　“那要经过数十亿年呢。” \n\n　　“就是数十亿年以后，我也不想这事发生。‘宇宙模’！我们怎样才可以使星辰长生不灭呢？” \n\n　　大十晕觉得很有趣，说：“你是在问，熵的方向是否可以被逆转？” \n\n　　“宇宙模”随着回答：“资料不足，无可奉告。” \n\n　　思尊者的思维头也不回的飞返他自己的星河。他再也没有理会大十晕，无论大十晕的躯体是在亿兆光年外的一个星河那儿等待，抑或只是在思尊者星球旁边的那颗星球之上。那实在没有什么关系。 \n\n　　悒悒不乐地，思尊者开始搜集星空间的氢气，去制造属于他自己的一颗小星。假若所有星星真的终有一天全部死去，至少，如今还可以有些星球被建造起来。 \n\n　　※※※ \n\n　　人类顾影自度。在某一意义而言，人类的心灵已混然成为一体。他由无数亿万兆的万古长青的躯体所组成。每一躯体都不衰不朽的卧在它所处的地方，静静地休息着。每个皆由一些完美无瑕，同样不衰不朽的机械人侍奉左右。所有这些躯体的心灵，则自由自在地慢慢融会在一起，变成你中有我，我中有你，难分彼此。 \n\n　　人类说：“宇宙要死了。” \n\n　　人类环顾四周昏黯的星河。所有的巨族星球，那些挥霍无度的浪费者，在最最暗淡遥远的过去，便早已消失得无影无踪。差不多所有的星辰都已成了白矮星，在暮景余年中苟延残喘。 \n\n　　星辰与星辰之间，有些新的星星从尘埃中诞生，有些是通过自然的途径，有些则是人类的制作。然而，就是这些也在逐步走向死亡。若把几颗白矮星纠集起来，叫它们碰撞在一起。其中释出的巨大能量，可用来制造一些新的恒星。可是大约要一千颗白矮星，才能造成一颗新的星球。而且就是这些“新星”，也有寿终正寝的一日。 \n\n　　人类说：“只要好好地使用，藉着‘万宗模’的监督和指示，宇宙间现时仍剩下的能量，也能持续数十亿年。” \n\n　　“就是这样。”人类说：“终有一天，一切都尽归尘土。无论怎样的巧妙利用，怎样的延长节约，能量一经花费，就逃逸四散，不可捕回。熵必须永恒地增长，直至它可能达到的最大值。” \n\n　　人类说：“熵不可以逆转的吗？让我们问问‘万宗模’。” \n\n　　“万宗模”包围着人类，却不在太空那儿。事实上，“万宗模”没有一丝一毫在太空之中，它整个的在超太空那，由一些既非物质也非能量的东西所组成。它的大小及本质等问题，以人类所知的语言及思维来说，已是毫无意义的了。 \n\n　　“‘万宗模’，”人类说：“熵怎样才可以逆转过来？” \n\n　　“万宗模”说：“资料不足，无可奉告。” \n\n　　人类说：“搜集多些资料吧！” \n\n　　“万宗模”说：“我会的。我做这工作已有一百亿年。我的祖先及我自己曾经多次被问及这一个问题。可是就所有资料，仍是不足以回答。” \n\n　　“会不会有那一天，”人类说：“资料终于足够。又或是在任何情况之下，这个问题也是无可解决的？” \n\n　　“万宗模”说：“没有问题是在任何情况下也不能解决的。” \n\n　　人类说：“你将于何时才有足够的资料去回答这个问题呢？” \n\n　　“万宗模”说：“资料不足，无可奉告。” \n\n　　“你会继续为这个问题寻求答案吗？”人类问。 \n\n　　“万宗模”说：“我会的。” \n\n　　人类说：“我们会耐心等待。” \n\n　　※※※＊ \n\n　　所有的恒星和星河，逐一地泯灭消亡。经过了一亿兆年的运行虚耗，太空变得漆黑一片，黯然没有一丝亮光。 \n\n　　人类一个一个的融入“模”之中。每一实质的躯体，在融合的过程中失掉了思想上的自我，但结果并不是一次损失，反而是一种很大的增益。 \n\n　　人类最后的心灵，在融合之前停将下来。他遥视太空深处。渊薮中除一颗最后的黑暗星球外，其余一无所有，有的就只是一丝半缕极为稀薄的物质，空虚无定地被余温尽散、无限地接近绝对零度的热量所激动。 \n\n　　“人”说：“‘模’，这就是终结了吗？这些纷乱混沌，不可以在宇宙中重新倒转过来吗？做得到吗？” \n\n　　“模”说：“资料不足，无可奉告。” \n\n　　“人”最后一丝的心灵与“模”融合为一，最后就只有“模”独自存在——在超太空中孤单地存在。 \n\n　　物质和能量消灭了，空间与时间亦因此随着消失。就是“模”的存在，也只不过为了要回答那最后的问题。这一问题，自从一亿兆年以前，一个半醉的电脑操作员向一副电脑发问以来，“模”就一直未能作出正确的回答。当然，那副电脑比起“模”来说，还远不及一个人比之与“人”。 \n\n　　所有的问题都回答了。但只要这问题一朝未被作答，“模”也就一朝未能放松它的自我意识。 \n\n　　一切存在的资料终于搜集齐全。没有任何资料没有被列入。 \n\n　　但所有搜集得来的资料，还需要全部综合起来，并依其所可能有的关系，逐一的分类、排列和组合。 \n\n　　这一工作花费了一个没有时间间隔的“顷刻”。 \n\n　　终于，“模”学会了怎样去逆转熵的方向。 \n\n　　但面对这最后问题的答案，“模”找不着任何人来告知。不过，那不打紧。这一答案——通过实践来表达——将连这一点也照顾在内。 \n\n　　又过了另一无时间的顷刻，“模”思索着最好的着手方法。小心翼翼地，“模”建立起整个程序。 \n\n　　“模”的意念统摄着一切，包括以往曾一度存在的宇宙；而对着现在“混沌”一片的存在，则正在沉思冥想。一步一步地，这程序必须被贯彻执行。 \n\n　　“模”说：“有光吧！” \n\n　　于是就有了光—— ","source":"_posts/最后的问题.md","raw":"---\ntitle: 最后的问题\ndate: 2017-09-21 16:45:22\ntags: 阿西莫夫\ncategories: novel\n---\n\n> ​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t阿西莫夫\n\n　　最后的问题，是在公元二〇六一年五月二十一日，在半开玩笑的情况下首次被提出来的。那时正值人类在星光熠耀的舞台上首次登场。起因是酒酣之中，以五块钱作赌注的一次打赌。事情的经过是这样的： \n\n　　亚历山大-雅道尔及保杉-鲁波夫是“茂的模”的两个忠实仆从。那巨大的电脑一哩又一哩长的表面，那冰冷、卡嗒作响而又不停闪着亮光的表面，背后究竟进行着什么样的活动？这两位料理员比世界上任何人都知得清楚。他们至少对那整个电讯传递及所有回路的基本蓝图，有一大致的概念。这个体系的复杂性与日俱增，在很久之前，即已超过任何个别的人所能全盘掌握的地步。 \n\n　　“茂的模”可以自我调整和自我修正。它必须具有这种能力，因为没有任何人为的力量，可以足够迅速或堪以适当地为它作出调整和修正。故此，雅道尔和鲁波夫只是对这庞然怪物作出一些很轻微和表面的看管和料理。不过，他们倒是尽心尽力地去做的，没有人能比他们做得更好的了。他们输入资料，把问题修改以适合“茂的模”的需求，最后把输出的答案翻译和整理。很显然，他们跟其它所有同业的人员一样，都极有资格分享“茂的模”的光荣。 \n\n　　数十年来，“茂的模”帮助人们设计船支，测定轨迹，使人类能抵达月球、金星和火星。但再远一点，地球那贫脊的资源，便再不能提供宇宙飞船所需的燃料。这些冗长的旅程需要太多的能量。人类已经以越来越高的效率来开采地球上的煤矿及铀矿。可是，地球上的煤和铀都是有限的。 \n\n　　但一步一步地，“茂的模”搜集了足够的资料，能对更深奥的一些问题，作出更为彻底的解答。就在公元二〇六一年五月十四日，以往一度曾是理论的构想，终于变成了事实。 \n\n　　太阳的能量被储存、转化及直接地利用，规模遍彻整个行星。地球熄灭了她的煤火，关掉了它的铀反应炉，随而开启了一个特殊的电钮，把自己连接到一个小型的供应站那儿。这个直径一哩的供应站，以地月间一半的距离环绕着我们这个行星。整个地球就依赖着一些看不见的太阳能光束来行走。 \n\n　　七天的时间，并不足以使那光采和热闹黯淡或沉寂下来。但雅道尔和鲁波夫终于能避开那些公众应酬，在一处没有人会想到的地方，静静地相聚在一起。这地方是地底下一个弃置了的密室。在那儿，“茂的模”露出了它那深深地埋藏着的巨大躯体的一小部份。既没有人管理而又优悠地闲着，“茂的模”作出懒洋洋的卡嗒声，正从容地整理着一些例行的资料。它也同样正获得休假。两个小伙子也乐得如此，他们本来就没有意思去打扰这位大人物。 \n\n　　他们带来了一瓶酒。在这一刻，两人惟一想做的，就是齐齐松驰一下，把酒聊天。 \n\n　　“想想呀！那真是奇妙。”雅道尔说。他宽阔的脸上露出了疲倦的痕迹，正用一根玻璃棒慢慢地搅拌面前的酒，注视着那缓缓地旋转的冰块。“我们今生今世也用不完的能量，不用花费一分一毛便源源不绝的滚滚而来。只要我们愿意的话，我们有足够的能量，把整个地球熔为一滴含有杂质的铁水，而且事后对这花去的能量可以毫不在乎！今生今世也用不完的能量，我们所需要所有所有的能量，至直永远、永远、永远！” \n\n　　鲁波夫把头斜斜的歪向一旁。这是他在预备提出相反意见以反驳他人时常做的怪动作。他现在正想提出相反的意见，反驳雅道尔。一小部分原因是他要负责携来那些冰块和酒杯。“不是永远。”他说。 \n\n　　“噢！去你的！就算不是永远也差不多啦！起码直至太阳油尽灯枯之时，老雅。” \n\n　　“那就不是永远。” \n\n　　“好啦！那么起码是千万年，亿万年吧！就算它是二十亿年左右，好了吧？” \n\n　　鲁波夫扬起手指，抚弄着他那稀疏的头发，像在告诉自己还有不少剩在那儿。他慢慢地轻吮自己的冻酒，道：“二十亿年比起永远，可差得多了。” \n\n　　“但至少它满够我们用了，你说不是吗？” \n\n　　“这样说，煤和铀也不一样可以吗？” \n\n　　“好啦！但现在我们可以把每一艘宇宙飞船直接驳上我们的太阳电力站。它可以来回冥王星数百万次，而无燃料短缺之虞。若果用煤和铀，这可肯定办不到。不信你去问问‘茂的模’。” \n\n　　“我不用问‘茂的模’。我可知得清楚。” \n\n　　“那就请你不要再挑三剔四，小觑‘茂的模’为我们所立的功劳。”雅道尔激动地叫道：“它做得已挺好的了。” \n\n　　“谁说它做得不好？我只是说：太阳不可能永远的燃烧下去。我所讲的，一直就只是这一点。我们在二十亿年内的确是高枕无忧，但之后呢？”鲁波夫的一支手指微微颤抖地指着对方。“请不要告诉我，人类将转向其它的星球汲取能源。” \n\n　　接着的一阵子，大家都默不作声。雅道尔只一两次把酒杯提到唇边。鲁波夫则慢慢地闭上眼睛。两人都在休息。 \n\n　　鲁波夫突然张开了双眼。“你是在想，太阳熄灭了，还有其它的恒星。是不是？” \n\n　　“我没有这样想。” \n\n　　“一定是，你一定是在这样的想。你的问题就是不懂逻辑。你就像故事中那傻小子，半途遇着大雨。他走进丛林里，在一棵树下躲避。他半点儿也不着急，因为他以为自己这棵树若湿透了，他可以再找另外一棵。” \n\n　　“我明白，我明白。”雅道尔说：“你不用说得这么大声。太阳完蛋时，其余的星球也一样完蛋了，不是吗？” \n\n　　“这个当然。”鲁波夫喃喃地说：“宇宙间万物的起源，都可追溯到最先的那次大爆炸，无论那是怎样子的一回事。同样，所有星星都有燃烧殆尽的时候。到那时，万物皆化为乌有，整个宇宙也就完蛋大吉啦。当然，有些星球比其它的烧得快，去他的！-例如那些红巨星蓝巨星就只有数千万年的光景。太阳将还有五十亿年，至于那些白矮星红矮星等，大概能再多支撑数百亿年└w憬h勿论它们到时有啥用！但顶多是一千亿年吧，一切将归于黑暗。熵就是要增长到一个最大值，那就是了。” \n\n　　“我十分清楚熵这回事。”雅道尔认真地说，似乎这与他的尊严很有关系。 \n\n　　“你知个屁！” \n\n　　“我起码知得不比你少！” \n\n　　“那么你就该明白，任何事物最后都有消散殒灭的一天。” \n\n　　“好啦！有谁说它们不会呢？” \n\n　　“正是你嘛！你这可怜虫。你说我们有永远也用不完的能量。你说‘永远’。” \n\n　　这回轮到雅道尔要唱反调。“也许有一天，万物会从头开始呢！”他说。 \n\n　　“绝不可能！” \n\n　　“为什么？总会有这样的一天的。” \n\n　　“永无可能！” \n\n　　“问问‘茂的模’呢！” \n\n　　“你去问‘茂的模’！我敢输赌。若‘茂的模’说一声‘可以’，我输给你五块钱。” \n\n　　雅道尔刚好醉得肯接受这打赌，却也刚好清醒得可以进行所需的操作。他用符号和一大堆运作指示，把问题重新草拟。按照日常的用语，那问题大概是这样：“人类可否在太阳老死之后，无需净耗一丝一毫的能量，而终有一天把太阳恢复年轻时的旺盛？” \n\n　　整个问题又或者可以更简单地读成：“怎样才能使整个宇宙的净熵大幅度地减低？” \n\n　　“茂的模”突然变得死寂静谧。那徐徐闪动的亮光熄灭了，远处电讯传送的卡嗒声也停止了。 \n\n　　就在两个吓得半死的技师，感到再也按捺不住之际，附属于“茂的模”某处的电讯机忽然恢复了生气，在吐出的纸带上，打了八个大字：“资料不足，无可奉告。” \n\n　　“赌不成啦。”鲁波夫轻声地说。两人跟着便匆匆离去。 \n\n　　第二天早晨，两人头痛如绞，口舌胶苦，早已把整件事忘得一干二净了。 \n\n　　※※※ \n\n　　谢路、谢路婷和谢路儿一、谢路儿二等四人一同看着星光满布的萤幕。随着宇宙飞船完成了穿越“超太空”的“非时间”旅程，萤幕忽然起了变化，一息间，那均匀错落，星辰闪耀的影像，变成了一幅由一个孤独的、像子弹般大的绚烂圆盘策居中央、踞视一切的慑人图景。\n\n　　“那就是X-23。”谢路充满信心地说。他背负着瘦长的双手，指节因握得过份用力而微微发白。 \n\n　　小谢路儿——两个都是女孩子——刚好经历了她们生平第一次的“超太空穿越”。两人都十分感到在穿越其间，那种有若内外倒置或是从内反转过来的怪异感觉。她们掩嘴偷笑，同时疯狂地绕着她们的妈妈互相追逐，一边大喊：“我们到了X-23！我们到了X-23！我们——” \n\n　　“静点！孩子！”谢路婷截然地喝道。“谢路，你肯定了吗？” \n\n　　“还有什么不肯定呢？”谢路反问，抬头望了望天花板上，表面平滑无瑕的突起的金属构造。这结构伸延整个房间，分别没入对角的两处墙壁。事实上，它有整艘船那般长。 \n\n　　谢路对这粗粗的金属长杆所知甚少。他只知道它的名字叫“微型模”，而且谁有任何问题或疑难，都可以问它。不过就是没有人向它问问题，它仍负有为宇宙飞船导航，并把宇宙飞船带引至某一预定的目的地这一重大任务。它从不同的“次星河动力供应站”那儿汲取能量，并为“超太空纵跃”的数学公式计算答案。 \n\n　　谢路和他的家人，只需在船那舒适的起居舱内休嬉及静心等待。 \n\n　　以往曾有人告知谢路，“微型模”最后的那个“模”字，在古老的地球语中，是“模拟式电脑”的意思。但谢路就是连这一点也差点儿忘了。 \n\n　　谢路婷看着萤幕，两眼湿濡濡的。“我忍不住。我一旦想起舍弃家乡，远离地球，心中总是感到不知怎样似的。” \n\n　　“你真傻！地球有什么值得留恋？”谢路问道：“我们在那一无所有。在这，在X-23，我们将拥有一切。你不会感到寂寞。你又不是那些先锋的拓荒者。这星球上已有超过一百万人。哈！我们的曾子曾孙，可能因为到时X-23也已经过份挤迫，而要另外探求新的世界呢！”接着，谢路若有所思的顿了一顿：“可不是吗？那些电脑能随着人口的增长，发展出相应的星际旅行方法，这真是我们的好运气。” \n\n　　“我知道，我知道！”谢路婷仍是禁不住心中的哀愁。 \n\n　　谢路儿一抢着说：“我们的‘微型模’是世界上最好的‘微型模’。” \n\n　　“是的，我想是的。”谢路抚摸着她的头发。 \n\n　　拥有一副属于自己的“微型模”，真是一件令人快慰的事。谢路十分庆幸他正处于现有的年代，而不是其它的世纪。他父亲年轻时，所有电脑都是一些延绵近百平方哩的庞然大物。而且每一个行星只拥有一副，叫做“行星模”。一千年以来，它们越变越大。可是，进步突如其来，改变了一切。分子活塞代替了晶体管，最大的“行星模”也变得只占一艘宇宙飞船一半的空间。 \n\n　　谢路感到很是兴奋。他每次想到这问题都有同一的感觉：他现时个人拥有的“微型模”，比起那首次驯服太阳，既古老又原始的“茂的模”，不知复杂多少倍。比起那首次解决了超太空飞行的难题，使星辰间的旅程成为可能的地球“行星模”（历来最大的“行星模”。）其复杂性也不相伯仲。 \n\n　　“这么多的星球，这么多的行星。”谢路婷感叹道，心中思潮起伏。“我想一家一家的人，将会好象我们现时一般，永远不停地移往新的行星居住。” \n\n　　“不是永远。”谢路带着微笑，说：“终有一天，所有东西会停下来。当然，那至少是数十亿年之后的事。很久很久以后的事。你知道吗？就是星辰的光辉也有耗尽的一日。熵一定要不断地增长下去。” \n\n　　“爸爸，熵是什么？”谢路儿二尖叫道。 \n\n　　“小甜儿。熵就是代表宇宙消耗了多少能量的一个名字。每一样东西都会用尽的，就像你那会走会叫的小型通信机械人一样，你记得吗？” \n\n　　“我们不可以换上新的电池，就像我与小机械人换电一样吗？” \n\n　　“小宝贝，星星本身就是电池。它们一用光了，那儿还有新的电池呢？” \n\n　　谢路儿一随即撒起娇来：“爸爸，不要让它们用光，不要让那些星星用光吧！” \n\n　　“看你的，弄成这个样子。”谢路婷低声说，有点气愤而又不知所措。 \n\n　　“我怎知会使她们害怕起来？”谢路低声回答。 \n\n　　“问问‘微型模’吧！”谢路儿一大声地说：“问问它怎样才能使星星再亮起来吧。” \n\n　　“去吧。”谢路婷说：“这会使她们安静下来。”谢路儿二这时也哭起来了。 \n\n　　谢路耸了耸肩。“好啦，好啦，我亲爱的。我去问问‘微型模’。它会告诉我们。你不用担心！” \n\n　　他询问“微型模”，又急急的补上：“把答案印出来。” \n\n　　谢路两手拿着那幼薄的纸条，装着很高兴的样子说：“看！‘微型模’说到那个时候，它自有办法照顾一切。你们不用再担心啦。” \n\n　　谢路婷说：“现在呢，够钟上床睡觉了。我们不久便要到达我们的新家园啦。” \n\n　　谢路在毁掉那纸条之前，把上面的字读了一遍：“资料不足，无可奉告。” \n\n　　他耸了耸肩，转看那萤幕。Ｘ-23正就在前方。 \n\n　　※※※ \n\n　　临马府的ＶＪ-23Ｘ凝视着那立体的、小比例的银河投影图之中的漆黑深空，说：“我有时会想到，我们对这件事情看得这么严重，是不是有点无聊荒谬？” \n\n　　呖镐廊的ＭＱ-17Ｊ摇了摇头。“我认为不。你也知道，依目前的扩展速度，整个银河系不出五年便会全部挤满了人。” \n\n　　他们两人看来都是二十出头。两个都身形高大而且体态优美。 \n\n　　“不过，”ＶＪ-23Ｘ说，“我仍是不大愿意向银河评议会递交一个如此悲观的报告。” \n\n　　“我认为这样做最恰当不过。他们就是需要点冲击，我们应该使那班高高在上的大官认真起来，看清楚一下问题。” \n\n　　ＶＪ-23Ｘ叹了口气。“太空是无限的。外边还有成千上万的银河等待着我们，随我们任意发展下去。想想呀，所有银河的数目实在何止万千！” \n\n　　“就是一亿一兆也仍然不是无限。而且总的数目比之无限，是越来越小得可怜。试想想！二万年前，人类首次解决了直接利用恒星能源的难题；数世纪后，恒星际飞行得以实现。人类经历了数百万年才挤满了一个小小的世界，却只需一万五千年便挤满了其余的整个银河。如今，我们的人口每十年就增加一倍——” \n\n　　ＶＪ-23Ｘ打岔说：“我们要知，长生不死是一个主要的因素。” \n\n　　“很好。我们现在可以长生不死。不错我们应该把它归入考虑之列。我总觉得这长生不死有它令人不悦的一面。‘银河模’的确替我们解决了不少问题，但就防止衰老及死亡这一问题而言，它以往的成绩都因此而付诸流水了。” \n\n　　“然而，我想你不会打算放弃你的生命吧！” \n\n　　“不！不！”ＭＱ-17Ｊ急急的断然回答，可是随即又转为温柔委婉的说：“起码不是现在。我还挺年轻呢。你呢？你多大了？” \n\n　　“二百二十三岁。你呢？” \n\n　　“我还未到二百岁——不过，让我们回到原先的话题吧。人口每十年增长一倍。一天当这个银河被住满了，不出十年我们便可挤满第二个银河。再过十年我们可挤满另外两个。另一个十年、四个。不出一百年的光景，我们将挤满了一百万个银河。只消一万年，整个宇宙便会肩并肩的挤满了人。之后又怎样呢？” \n\n　　ＶＪ-23Ｘ说：“还有一点要考虑的，就是运输的问题。我怀疑若把整个星河的居民从一个星河移往第二个星河，将需要多少的太阳能源单位。” \n\n　　“提得好。就是如今，人类每年就消耗两个阳能单位。” \n\n　　“大部份的能量都浪费了。试想想，单是我们自己的星河，每年就输出整千个阳能单位，而我们只用了其中的两个。” \n\n　　“不错。可是我们就是能够百份之一百地利用这些能量，都只不过使终结来得迟些吧了。我们的能量需求，正以几何级数地上升，比人口的增长还厉害。我们在所有星河未熄灭之前，一早便会耗尽一切可能利用的能量。有意思，一个真正有意思的观点。” \n\n　　“不过，我们可以从星际气体中重新制造新的恒星。” \n\n　　“或是从扩散了的热能中制造出新的恒星？”ＭＱ-17Ｊ带着嘲弄的口吻问道。 \n\n　　“可能有某种方法，我们能把熵的趋势倒转过来。我们应该问问‘银河模’。” \n\n　　ＶＪ-23Ｘ实在并非认真的这样想。但ＭＱ-17Ｊ已从他口袋中取出了他的“银河模”通信仪，放在他前面的桌上。 \n\n　　“我一早便想这样做。”他说：“这是人类迟早要面对的一个问题。” \n\n　　他严肃地注视着那通信仪。这通信仪只是一个两寸见方的正立方体，而且中间差不多空无一物。但它透过超太空，与那为着全人类服务的伟大“银河模”连结在一起。我们如果把超太空也计算在内，它实在是“银河模”庞大躯体的一部份。 \n\n　　ＭＱ-17Ｊ顿了一顿，正揣测着在他长生不老的未在岁月中，究竟有没有一天能亲眼目睹“银河模”。这“银河模”位于一个特别为它而设的小小世界之上。如蛛网般的力场光束纵横交错、来回穿插。一股一股的亚介子流，在光束所支持着的特种物质中飞跃奔驰，以代替以往古老而又笨拙的分子活塞。然而，就是拥有这些“亚以太”先进技术的“银河模”其整个躯体也足足有二千英尺之长。 \n\n　　倏然地，ＭＱ-17Ｊ向着“银河模”通信仪发问：“熵可以被逆转吗？” \n\n　　ＶＪ-23Ｘ吓了一跳，急忙说：“噢！我不是真的要你问这样的一个问题。” \n\n　　“为什么不？” \n\n　　“我们大家都很清楚，熵是不可能逆转的。我们不能把烧剩下来的烟尘和灰烬变回一棵大树。” \n\n　　“你的世界那儿有很多树的吗？”ＭＱ-17Ｊ问道。 \n\n　　“银河模”的声响，把两人吓了一跳，两个人随即静了下来，不敢作声。从上那精巧细小的通信仪中，传来了一丝清脆悦耳的声音，说：“资料不足，无可奉告。” \n\n　　ＶＪ-23Ｘ说：“可不是吗！” \n\n　　两人随即又回到即将呈交银河评议会的报告那一话题上。 \n\n　　※※※ \n\n　　思尊者的心灵伸延及于整个新的星河，对那些维持星河的璀灿光辉、在银河中绕转成流的无数星辰，表现出一丝微微的兴趣。他从未探访过这个星河。他有可能探访所有的星河吗？它们是如此的众多，而且每一个都载满了人——但这个负载已差不多成为一种无用的累赘。一步一步的。人类真正的精髓，已移往这里，在这太空的深处。 \n\n　　是心灵，不是肉体！那些不朽的躯壳仍然留在行星上，“洋洋乎与浩气俱”。有些时，它们会起来作一些实质的活动，不过，那是越来越少的了。此外，长久以来，已经越来越少新的自我出现，以加入这个无比强大的行列。但那又有什么关系呢？反正宇宙中已越来越少空间可供新的个体居住。 \n\n　　思尊者在他的沉思冥想中，被另一个移近的心灵的飘渺触角所惊醒。 \n\n　　“我是思尊者。”思尊者说：“你呢？” \n\n　　“我是大十晕。你的银河叫什么名字？” \n\n　　“我们就叫它做银河？你的呢？” \n\n　　“我们也是这样叫。所有人都称他们的银河做‘他们的银河’，仅此而已。不过，这也是挺自然的。” \n\n　　“是呀。反正所有的银河都是一样。” \n\n　　“并非所有银河都是一样的。在某一个独特的银河之中，必定有一处地方是人类的发源地。那不是使这个银河与别不同吗？” \n\n　　思尊者说：“那么是那一个呢？” \n\n　　“我也不大清楚。不过，‘宇宙模’会知道的。” \n\n　　“我们不如问问它吧。我突然感到很好奇。” \n\n　　思尊者扩大了他的感觉范围，直至那些银河越缩越小，成为一个更大更漆黑的背景上的散落光点；这盈亿上兆的星河，载着那些不朽的居客、那些智能的形体，而这些形体的心灵，却都在深空之中自由飘泊。然而，其中有一个银河是独一无二的，因为人类就是从这银河发轫和茁壮长大。在那朦胧的遥远岁月之中，曾经有一段时期，这是惟一有人类居住的地方。 \n\n　　思尊者受好奇之火熬炙着，极欲看看这银河是怎么的一个模样。他叫道：“‘宇宙模’！人类是从那个银河中起源的？” \n\n　　“宇宙模”立即便已听到这一呼唤，因为在每一个世界及太空中每一个角落，“宇宙模”都有它的接收器在默默地守待。而每一个接收器通过了超太空，都直接驳到一处不为人知的地点——“宇宙模”孤伶独处，踞策一切的地方。 \n\n　　思尊者所认识的人之中，只有一个的思维曾经穿透至“宇宙模”的可见范围内。按照他后来所说，所见到的就只是一个耀眼的、直径大概只有两英尺的球体，而且还是模糊不清的。\n\n　　“但那怎可能是‘宇宙模’的全部呢？”思尊者曾经问道。 \n\n　　“‘宇宙模’的大部份都在超太空。不过，它究竟以一种怎样的状态在那儿存在，我实在难以想象。”这就是思尊者所得到的回答。 \n\n　　事实上，不单回答的人难以想象，任何人也同样无法想象。思尊者知道，这是因为在很久以前，人类已没有参予任何一副“宇宙模”制造过程中的任何部份。每一副“宇宙模”都亲自设计并建造它的继承者。 \n\n　　每一副电脑，在其存在的上百万年的岁月中，都不断搜集及累积必需的资料，用以造成一个更好、更精巧、更能干的继承者。它所有的知识及自我的意识，将融入这继承电脑之中，混成一体。 \n\n　　“宇宙模”打断了思尊者的游荡心思，但不是用语言，而是通过引导。思尊者的心神，被带领至一幅黯淡星河海洋的图景，在这图景中，其中一个星河扩大起来，直至其内的星辰清晰可辨。 \n\n　　一个思想随即而来。无比的遥远，却又无比的清晰：“这就是人类原先的星河。” \n\n　　但不论怎样看，也看不出这星河与其它的有什么分别。思尊者抑遏着心中的失望。 \n\n　　大十晕一路伴随着思尊者的心灵，现在突然说：“而其中的一颗星就是人类起源时的星体吗？” \n\n　　“宇宙模”说：“人类原先的星球已变成了新星。现在它是一颗白矮星。” \n\n　　“那上面的人都死了吗？”思尊者错愕地，不加思索地问。 \n\n　　“宇宙模”说：“像其余类似的情况一样，我们及时造了一个新的世界，好让他们的肉体有所栖息。” \n\n　　“唔！当然。”思尊者说。但就在他如此说的当儿，一阵失落的感觉涌上心头。他的心神放开了对人类那原先星河的掌握，让它跳回那星河海洋之中，再度成为朦胧的光点。他永不想再看见这星河了。 \n\n　　大十晕说：“干吗？” \n\n　　“星辰逐一的消逝。那原先的星球已死掉了。” \n\n　　“它们横竖都要死的嘛。有什么不妥呢？” \n\n　　“但当所有能量都耗尽了，我们的躯体最终也会死亡。就是我和你也不能幸免。” \n\n　　“那要经过数十亿年呢。” \n\n　　“就是数十亿年以后，我也不想这事发生。‘宇宙模’！我们怎样才可以使星辰长生不灭呢？” \n\n　　大十晕觉得很有趣，说：“你是在问，熵的方向是否可以被逆转？” \n\n　　“宇宙模”随着回答：“资料不足，无可奉告。” \n\n　　思尊者的思维头也不回的飞返他自己的星河。他再也没有理会大十晕，无论大十晕的躯体是在亿兆光年外的一个星河那儿等待，抑或只是在思尊者星球旁边的那颗星球之上。那实在没有什么关系。 \n\n　　悒悒不乐地，思尊者开始搜集星空间的氢气，去制造属于他自己的一颗小星。假若所有星星真的终有一天全部死去，至少，如今还可以有些星球被建造起来。 \n\n　　※※※ \n\n　　人类顾影自度。在某一意义而言，人类的心灵已混然成为一体。他由无数亿万兆的万古长青的躯体所组成。每一躯体都不衰不朽的卧在它所处的地方，静静地休息着。每个皆由一些完美无瑕，同样不衰不朽的机械人侍奉左右。所有这些躯体的心灵，则自由自在地慢慢融会在一起，变成你中有我，我中有你，难分彼此。 \n\n　　人类说：“宇宙要死了。” \n\n　　人类环顾四周昏黯的星河。所有的巨族星球，那些挥霍无度的浪费者，在最最暗淡遥远的过去，便早已消失得无影无踪。差不多所有的星辰都已成了白矮星，在暮景余年中苟延残喘。 \n\n　　星辰与星辰之间，有些新的星星从尘埃中诞生，有些是通过自然的途径，有些则是人类的制作。然而，就是这些也在逐步走向死亡。若把几颗白矮星纠集起来，叫它们碰撞在一起。其中释出的巨大能量，可用来制造一些新的恒星。可是大约要一千颗白矮星，才能造成一颗新的星球。而且就是这些“新星”，也有寿终正寝的一日。 \n\n　　人类说：“只要好好地使用，藉着‘万宗模’的监督和指示，宇宙间现时仍剩下的能量，也能持续数十亿年。” \n\n　　“就是这样。”人类说：“终有一天，一切都尽归尘土。无论怎样的巧妙利用，怎样的延长节约，能量一经花费，就逃逸四散，不可捕回。熵必须永恒地增长，直至它可能达到的最大值。” \n\n　　人类说：“熵不可以逆转的吗？让我们问问‘万宗模’。” \n\n　　“万宗模”包围着人类，却不在太空那儿。事实上，“万宗模”没有一丝一毫在太空之中，它整个的在超太空那，由一些既非物质也非能量的东西所组成。它的大小及本质等问题，以人类所知的语言及思维来说，已是毫无意义的了。 \n\n　　“‘万宗模’，”人类说：“熵怎样才可以逆转过来？” \n\n　　“万宗模”说：“资料不足，无可奉告。” \n\n　　人类说：“搜集多些资料吧！” \n\n　　“万宗模”说：“我会的。我做这工作已有一百亿年。我的祖先及我自己曾经多次被问及这一个问题。可是就所有资料，仍是不足以回答。” \n\n　　“会不会有那一天，”人类说：“资料终于足够。又或是在任何情况之下，这个问题也是无可解决的？” \n\n　　“万宗模”说：“没有问题是在任何情况下也不能解决的。” \n\n　　人类说：“你将于何时才有足够的资料去回答这个问题呢？” \n\n　　“万宗模”说：“资料不足，无可奉告。” \n\n　　“你会继续为这个问题寻求答案吗？”人类问。 \n\n　　“万宗模”说：“我会的。” \n\n　　人类说：“我们会耐心等待。” \n\n　　※※※＊ \n\n　　所有的恒星和星河，逐一地泯灭消亡。经过了一亿兆年的运行虚耗，太空变得漆黑一片，黯然没有一丝亮光。 \n\n　　人类一个一个的融入“模”之中。每一实质的躯体，在融合的过程中失掉了思想上的自我，但结果并不是一次损失，反而是一种很大的增益。 \n\n　　人类最后的心灵，在融合之前停将下来。他遥视太空深处。渊薮中除一颗最后的黑暗星球外，其余一无所有，有的就只是一丝半缕极为稀薄的物质，空虚无定地被余温尽散、无限地接近绝对零度的热量所激动。 \n\n　　“人”说：“‘模’，这就是终结了吗？这些纷乱混沌，不可以在宇宙中重新倒转过来吗？做得到吗？” \n\n　　“模”说：“资料不足，无可奉告。” \n\n　　“人”最后一丝的心灵与“模”融合为一，最后就只有“模”独自存在——在超太空中孤单地存在。 \n\n　　物质和能量消灭了，空间与时间亦因此随着消失。就是“模”的存在，也只不过为了要回答那最后的问题。这一问题，自从一亿兆年以前，一个半醉的电脑操作员向一副电脑发问以来，“模”就一直未能作出正确的回答。当然，那副电脑比起“模”来说，还远不及一个人比之与“人”。 \n\n　　所有的问题都回答了。但只要这问题一朝未被作答，“模”也就一朝未能放松它的自我意识。 \n\n　　一切存在的资料终于搜集齐全。没有任何资料没有被列入。 \n\n　　但所有搜集得来的资料，还需要全部综合起来，并依其所可能有的关系，逐一的分类、排列和组合。 \n\n　　这一工作花费了一个没有时间间隔的“顷刻”。 \n\n　　终于，“模”学会了怎样去逆转熵的方向。 \n\n　　但面对这最后问题的答案，“模”找不着任何人来告知。不过，那不打紧。这一答案——通过实践来表达——将连这一点也照顾在内。 \n\n　　又过了另一无时间的顷刻，“模”思索着最好的着手方法。小心翼翼地，“模”建立起整个程序。 \n\n　　“模”的意念统摄着一切，包括以往曾一度存在的宇宙；而对着现在“混沌”一片的存在，则正在沉思冥想。一步一步地，这程序必须被贯彻执行。 \n\n　　“模”说：“有光吧！” \n\n　　于是就有了光—— ","slug":"最后的问题","published":1,"updated":"2017-09-21T08:46:40.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zgah2k000enslf32ldb9k5","content":"<blockquote>\n<p>​                                                                                阿西莫夫</p>\n</blockquote>\n<p>　　最后的问题，是在公元二〇六一年五月二十一日，在半开玩笑的情况下首次被提出来的。那时正值人类在星光熠耀的舞台上首次登场。起因是酒酣之中，以五块钱作赌注的一次打赌。事情的经过是这样的： </p>\n<p>　　亚历山大-雅道尔及保杉-鲁波夫是“茂的模”的两个忠实仆从。那巨大的电脑一哩又一哩长的表面，那冰冷、卡嗒作响而又不停闪着亮光的表面，背后究竟进行着什么样的活动？这两位料理员比世界上任何人都知得清楚。他们至少对那整个电讯传递及所有回路的基本蓝图，有一大致的概念。这个体系的复杂性与日俱增，在很久之前，即已超过任何个别的人所能全盘掌握的地步。 </p>\n<p>　　“茂的模”可以自我调整和自我修正。它必须具有这种能力，因为没有任何人为的力量，可以足够迅速或堪以适当地为它作出调整和修正。故此，雅道尔和鲁波夫只是对这庞然怪物作出一些很轻微和表面的看管和料理。不过，他们倒是尽心尽力地去做的，没有人能比他们做得更好的了。他们输入资料，把问题修改以适合“茂的模”的需求，最后把输出的答案翻译和整理。很显然，他们跟其它所有同业的人员一样，都极有资格分享“茂的模”的光荣。 </p>\n<p>　　数十年来，“茂的模”帮助人们设计船支，测定轨迹，使人类能抵达月球、金星和火星。但再远一点，地球那贫脊的资源，便再不能提供宇宙飞船所需的燃料。这些冗长的旅程需要太多的能量。人类已经以越来越高的效率来开采地球上的煤矿及铀矿。可是，地球上的煤和铀都是有限的。 </p>\n<p>　　但一步一步地，“茂的模”搜集了足够的资料，能对更深奥的一些问题，作出更为彻底的解答。就在公元二〇六一年五月十四日，以往一度曾是理论的构想，终于变成了事实。 </p>\n<p>　　太阳的能量被储存、转化及直接地利用，规模遍彻整个行星。地球熄灭了她的煤火，关掉了它的铀反应炉，随而开启了一个特殊的电钮，把自己连接到一个小型的供应站那儿。这个直径一哩的供应站，以地月间一半的距离环绕着我们这个行星。整个地球就依赖着一些看不见的太阳能光束来行走。 </p>\n<p>　　七天的时间，并不足以使那光采和热闹黯淡或沉寂下来。但雅道尔和鲁波夫终于能避开那些公众应酬，在一处没有人会想到的地方，静静地相聚在一起。这地方是地底下一个弃置了的密室。在那儿，“茂的模”露出了它那深深地埋藏着的巨大躯体的一小部份。既没有人管理而又优悠地闲着，“茂的模”作出懒洋洋的卡嗒声，正从容地整理着一些例行的资料。它也同样正获得休假。两个小伙子也乐得如此，他们本来就没有意思去打扰这位大人物。 </p>\n<p>　　他们带来了一瓶酒。在这一刻，两人惟一想做的，就是齐齐松驰一下，把酒聊天。 </p>\n<p>　　“想想呀！那真是奇妙。”雅道尔说。他宽阔的脸上露出了疲倦的痕迹，正用一根玻璃棒慢慢地搅拌面前的酒，注视着那缓缓地旋转的冰块。“我们今生今世也用不完的能量，不用花费一分一毛便源源不绝的滚滚而来。只要我们愿意的话，我们有足够的能量，把整个地球熔为一滴含有杂质的铁水，而且事后对这花去的能量可以毫不在乎！今生今世也用不完的能量，我们所需要所有所有的能量，至直永远、永远、永远！” </p>\n<p>　　鲁波夫把头斜斜的歪向一旁。这是他在预备提出相反意见以反驳他人时常做的怪动作。他现在正想提出相反的意见，反驳雅道尔。一小部分原因是他要负责携来那些冰块和酒杯。“不是永远。”他说。 </p>\n<p>　　“噢！去你的！就算不是永远也差不多啦！起码直至太阳油尽灯枯之时，老雅。” </p>\n<p>　　“那就不是永远。” </p>\n<p>　　“好啦！那么起码是千万年，亿万年吧！就算它是二十亿年左右，好了吧？” </p>\n<p>　　鲁波夫扬起手指，抚弄着他那稀疏的头发，像在告诉自己还有不少剩在那儿。他慢慢地轻吮自己的冻酒，道：“二十亿年比起永远，可差得多了。” </p>\n<p>　　“但至少它满够我们用了，你说不是吗？” </p>\n<p>　　“这样说，煤和铀也不一样可以吗？” </p>\n<p>　　“好啦！但现在我们可以把每一艘宇宙飞船直接驳上我们的太阳电力站。它可以来回冥王星数百万次，而无燃料短缺之虞。若果用煤和铀，这可肯定办不到。不信你去问问‘茂的模’。” </p>\n<p>　　“我不用问‘茂的模’。我可知得清楚。” </p>\n<p>　　“那就请你不要再挑三剔四，小觑‘茂的模’为我们所立的功劳。”雅道尔激动地叫道：“它做得已挺好的了。” </p>\n<p>　　“谁说它做得不好？我只是说：太阳不可能永远的燃烧下去。我所讲的，一直就只是这一点。我们在二十亿年内的确是高枕无忧，但之后呢？”鲁波夫的一支手指微微颤抖地指着对方。“请不要告诉我，人类将转向其它的星球汲取能源。” </p>\n<p>　　接着的一阵子，大家都默不作声。雅道尔只一两次把酒杯提到唇边。鲁波夫则慢慢地闭上眼睛。两人都在休息。 </p>\n<p>　　鲁波夫突然张开了双眼。“你是在想，太阳熄灭了，还有其它的恒星。是不是？” </p>\n<p>　　“我没有这样想。” </p>\n<p>　　“一定是，你一定是在这样的想。你的问题就是不懂逻辑。你就像故事中那傻小子，半途遇着大雨。他走进丛林里，在一棵树下躲避。他半点儿也不着急，因为他以为自己这棵树若湿透了，他可以再找另外一棵。” </p>\n<p>　　“我明白，我明白。”雅道尔说：“你不用说得这么大声。太阳完蛋时，其余的星球也一样完蛋了，不是吗？” </p>\n<p>　　“这个当然。”鲁波夫喃喃地说：“宇宙间万物的起源，都可追溯到最先的那次大爆炸，无论那是怎样子的一回事。同样，所有星星都有燃烧殆尽的时候。到那时，万物皆化为乌有，整个宇宙也就完蛋大吉啦。当然，有些星球比其它的烧得快，去他的！-例如那些红巨星蓝巨星就只有数千万年的光景。太阳将还有五十亿年，至于那些白矮星红矮星等，大概能再多支撑数百亿年└w憬h勿论它们到时有啥用！但顶多是一千亿年吧，一切将归于黑暗。熵就是要增长到一个最大值，那就是了。” </p>\n<p>　　“我十分清楚熵这回事。”雅道尔认真地说，似乎这与他的尊严很有关系。 </p>\n<p>　　“你知个屁！” </p>\n<p>　　“我起码知得不比你少！” </p>\n<p>　　“那么你就该明白，任何事物最后都有消散殒灭的一天。” </p>\n<p>　　“好啦！有谁说它们不会呢？” </p>\n<p>　　“正是你嘛！你这可怜虫。你说我们有永远也用不完的能量。你说‘永远’。” </p>\n<p>　　这回轮到雅道尔要唱反调。“也许有一天，万物会从头开始呢！”他说。 </p>\n<p>　　“绝不可能！” </p>\n<p>　　“为什么？总会有这样的一天的。” </p>\n<p>　　“永无可能！” </p>\n<p>　　“问问‘茂的模’呢！” </p>\n<p>　　“你去问‘茂的模’！我敢输赌。若‘茂的模’说一声‘可以’，我输给你五块钱。” </p>\n<p>　　雅道尔刚好醉得肯接受这打赌，却也刚好清醒得可以进行所需的操作。他用符号和一大堆运作指示，把问题重新草拟。按照日常的用语，那问题大概是这样：“人类可否在太阳老死之后，无需净耗一丝一毫的能量，而终有一天把太阳恢复年轻时的旺盛？” </p>\n<p>　　整个问题又或者可以更简单地读成：“怎样才能使整个宇宙的净熵大幅度地减低？” </p>\n<p>　　“茂的模”突然变得死寂静谧。那徐徐闪动的亮光熄灭了，远处电讯传送的卡嗒声也停止了。 </p>\n<p>　　就在两个吓得半死的技师，感到再也按捺不住之际，附属于“茂的模”某处的电讯机忽然恢复了生气，在吐出的纸带上，打了八个大字：“资料不足，无可奉告。” </p>\n<p>　　“赌不成啦。”鲁波夫轻声地说。两人跟着便匆匆离去。 </p>\n<p>　　第二天早晨，两人头痛如绞，口舌胶苦，早已把整件事忘得一干二净了。 </p>\n<p>　　※※※ </p>\n<p>　　谢路、谢路婷和谢路儿一、谢路儿二等四人一同看着星光满布的萤幕。随着宇宙飞船完成了穿越“超太空”的“非时间”旅程，萤幕忽然起了变化，一息间，那均匀错落，星辰闪耀的影像，变成了一幅由一个孤独的、像子弹般大的绚烂圆盘策居中央、踞视一切的慑人图景。</p>\n<p>　　“那就是X-23。”谢路充满信心地说。他背负着瘦长的双手，指节因握得过份用力而微微发白。 </p>\n<p>　　小谢路儿——两个都是女孩子——刚好经历了她们生平第一次的“超太空穿越”。两人都十分感到在穿越其间，那种有若内外倒置或是从内反转过来的怪异感觉。她们掩嘴偷笑，同时疯狂地绕着她们的妈妈互相追逐，一边大喊：“我们到了X-23！我们到了X-23！我们——” </p>\n<p>　　“静点！孩子！”谢路婷截然地喝道。“谢路，你肯定了吗？” </p>\n<p>　　“还有什么不肯定呢？”谢路反问，抬头望了望天花板上，表面平滑无瑕的突起的金属构造。这结构伸延整个房间，分别没入对角的两处墙壁。事实上，它有整艘船那般长。 </p>\n<p>　　谢路对这粗粗的金属长杆所知甚少。他只知道它的名字叫“微型模”，而且谁有任何问题或疑难，都可以问它。不过就是没有人向它问问题，它仍负有为宇宙飞船导航，并把宇宙飞船带引至某一预定的目的地这一重大任务。它从不同的“次星河动力供应站”那儿汲取能量，并为“超太空纵跃”的数学公式计算答案。 </p>\n<p>　　谢路和他的家人，只需在船那舒适的起居舱内休嬉及静心等待。 </p>\n<p>　　以往曾有人告知谢路，“微型模”最后的那个“模”字，在古老的地球语中，是“模拟式电脑”的意思。但谢路就是连这一点也差点儿忘了。 </p>\n<p>　　谢路婷看着萤幕，两眼湿濡濡的。“我忍不住。我一旦想起舍弃家乡，远离地球，心中总是感到不知怎样似的。” </p>\n<p>　　“你真傻！地球有什么值得留恋？”谢路问道：“我们在那一无所有。在这，在X-23，我们将拥有一切。你不会感到寂寞。你又不是那些先锋的拓荒者。这星球上已有超过一百万人。哈！我们的曾子曾孙，可能因为到时X-23也已经过份挤迫，而要另外探求新的世界呢！”接着，谢路若有所思的顿了一顿：“可不是吗？那些电脑能随着人口的增长，发展出相应的星际旅行方法，这真是我们的好运气。” </p>\n<p>　　“我知道，我知道！”谢路婷仍是禁不住心中的哀愁。 </p>\n<p>　　谢路儿一抢着说：“我们的‘微型模’是世界上最好的‘微型模’。” </p>\n<p>　　“是的，我想是的。”谢路抚摸着她的头发。 </p>\n<p>　　拥有一副属于自己的“微型模”，真是一件令人快慰的事。谢路十分庆幸他正处于现有的年代，而不是其它的世纪。他父亲年轻时，所有电脑都是一些延绵近百平方哩的庞然大物。而且每一个行星只拥有一副，叫做“行星模”。一千年以来，它们越变越大。可是，进步突如其来，改变了一切。分子活塞代替了晶体管，最大的“行星模”也变得只占一艘宇宙飞船一半的空间。 </p>\n<p>　　谢路感到很是兴奋。他每次想到这问题都有同一的感觉：他现时个人拥有的“微型模”，比起那首次驯服太阳，既古老又原始的“茂的模”，不知复杂多少倍。比起那首次解决了超太空飞行的难题，使星辰间的旅程成为可能的地球“行星模”（历来最大的“行星模”。）其复杂性也不相伯仲。 </p>\n<p>　　“这么多的星球，这么多的行星。”谢路婷感叹道，心中思潮起伏。“我想一家一家的人，将会好象我们现时一般，永远不停地移往新的行星居住。” </p>\n<p>　　“不是永远。”谢路带着微笑，说：“终有一天，所有东西会停下来。当然，那至少是数十亿年之后的事。很久很久以后的事。你知道吗？就是星辰的光辉也有耗尽的一日。熵一定要不断地增长下去。” </p>\n<p>　　“爸爸，熵是什么？”谢路儿二尖叫道。 </p>\n<p>　　“小甜儿。熵就是代表宇宙消耗了多少能量的一个名字。每一样东西都会用尽的，就像你那会走会叫的小型通信机械人一样，你记得吗？” </p>\n<p>　　“我们不可以换上新的电池，就像我与小机械人换电一样吗？” </p>\n<p>　　“小宝贝，星星本身就是电池。它们一用光了，那儿还有新的电池呢？” </p>\n<p>　　谢路儿一随即撒起娇来：“爸爸，不要让它们用光，不要让那些星星用光吧！” </p>\n<p>　　“看你的，弄成这个样子。”谢路婷低声说，有点气愤而又不知所措。 </p>\n<p>　　“我怎知会使她们害怕起来？”谢路低声回答。 </p>\n<p>　　“问问‘微型模’吧！”谢路儿一大声地说：“问问它怎样才能使星星再亮起来吧。” </p>\n<p>　　“去吧。”谢路婷说：“这会使她们安静下来。”谢路儿二这时也哭起来了。 </p>\n<p>　　谢路耸了耸肩。“好啦，好啦，我亲爱的。我去问问‘微型模’。它会告诉我们。你不用担心！” </p>\n<p>　　他询问“微型模”，又急急的补上：“把答案印出来。” </p>\n<p>　　谢路两手拿着那幼薄的纸条，装着很高兴的样子说：“看！‘微型模’说到那个时候，它自有办法照顾一切。你们不用再担心啦。” </p>\n<p>　　谢路婷说：“现在呢，够钟上床睡觉了。我们不久便要到达我们的新家园啦。” </p>\n<p>　　谢路在毁掉那纸条之前，把上面的字读了一遍：“资料不足，无可奉告。” </p>\n<p>　　他耸了耸肩，转看那萤幕。Ｘ-23正就在前方。 </p>\n<p>　　※※※ </p>\n<p>　　临马府的ＶＪ-23Ｘ凝视着那立体的、小比例的银河投影图之中的漆黑深空，说：“我有时会想到，我们对这件事情看得这么严重，是不是有点无聊荒谬？” </p>\n<p>　　呖镐廊的ＭＱ-17Ｊ摇了摇头。“我认为不。你也知道，依目前的扩展速度，整个银河系不出五年便会全部挤满了人。” </p>\n<p>　　他们两人看来都是二十出头。两个都身形高大而且体态优美。 </p>\n<p>　　“不过，”ＶＪ-23Ｘ说，“我仍是不大愿意向银河评议会递交一个如此悲观的报告。” </p>\n<p>　　“我认为这样做最恰当不过。他们就是需要点冲击，我们应该使那班高高在上的大官认真起来，看清楚一下问题。” </p>\n<p>　　ＶＪ-23Ｘ叹了口气。“太空是无限的。外边还有成千上万的银河等待着我们，随我们任意发展下去。想想呀，所有银河的数目实在何止万千！” </p>\n<p>　　“就是一亿一兆也仍然不是无限。而且总的数目比之无限，是越来越小得可怜。试想想！二万年前，人类首次解决了直接利用恒星能源的难题；数世纪后，恒星际飞行得以实现。人类经历了数百万年才挤满了一个小小的世界，却只需一万五千年便挤满了其余的整个银河。如今，我们的人口每十年就增加一倍——” </p>\n<p>　　ＶＪ-23Ｘ打岔说：“我们要知，长生不死是一个主要的因素。” </p>\n<p>　　“很好。我们现在可以长生不死。不错我们应该把它归入考虑之列。我总觉得这长生不死有它令人不悦的一面。‘银河模’的确替我们解决了不少问题，但就防止衰老及死亡这一问题而言，它以往的成绩都因此而付诸流水了。” </p>\n<p>　　“然而，我想你不会打算放弃你的生命吧！” </p>\n<p>　　“不！不！”ＭＱ-17Ｊ急急的断然回答，可是随即又转为温柔委婉的说：“起码不是现在。我还挺年轻呢。你呢？你多大了？” </p>\n<p>　　“二百二十三岁。你呢？” </p>\n<p>　　“我还未到二百岁——不过，让我们回到原先的话题吧。人口每十年增长一倍。一天当这个银河被住满了，不出十年我们便可挤满第二个银河。再过十年我们可挤满另外两个。另一个十年、四个。不出一百年的光景，我们将挤满了一百万个银河。只消一万年，整个宇宙便会肩并肩的挤满了人。之后又怎样呢？” </p>\n<p>　　ＶＪ-23Ｘ说：“还有一点要考虑的，就是运输的问题。我怀疑若把整个星河的居民从一个星河移往第二个星河，将需要多少的太阳能源单位。” </p>\n<p>　　“提得好。就是如今，人类每年就消耗两个阳能单位。” </p>\n<p>　　“大部份的能量都浪费了。试想想，单是我们自己的星河，每年就输出整千个阳能单位，而我们只用了其中的两个。” </p>\n<p>　　“不错。可是我们就是能够百份之一百地利用这些能量，都只不过使终结来得迟些吧了。我们的能量需求，正以几何级数地上升，比人口的增长还厉害。我们在所有星河未熄灭之前，一早便会耗尽一切可能利用的能量。有意思，一个真正有意思的观点。” </p>\n<p>　　“不过，我们可以从星际气体中重新制造新的恒星。” </p>\n<p>　　“或是从扩散了的热能中制造出新的恒星？”ＭＱ-17Ｊ带着嘲弄的口吻问道。 </p>\n<p>　　“可能有某种方法，我们能把熵的趋势倒转过来。我们应该问问‘银河模’。” </p>\n<p>　　ＶＪ-23Ｘ实在并非认真的这样想。但ＭＱ-17Ｊ已从他口袋中取出了他的“银河模”通信仪，放在他前面的桌上。 </p>\n<p>　　“我一早便想这样做。”他说：“这是人类迟早要面对的一个问题。” </p>\n<p>　　他严肃地注视着那通信仪。这通信仪只是一个两寸见方的正立方体，而且中间差不多空无一物。但它透过超太空，与那为着全人类服务的伟大“银河模”连结在一起。我们如果把超太空也计算在内，它实在是“银河模”庞大躯体的一部份。 </p>\n<p>　　ＭＱ-17Ｊ顿了一顿，正揣测着在他长生不老的未在岁月中，究竟有没有一天能亲眼目睹“银河模”。这“银河模”位于一个特别为它而设的小小世界之上。如蛛网般的力场光束纵横交错、来回穿插。一股一股的亚介子流，在光束所支持着的特种物质中飞跃奔驰，以代替以往古老而又笨拙的分子活塞。然而，就是拥有这些“亚以太”先进技术的“银河模”其整个躯体也足足有二千英尺之长。 </p>\n<p>　　倏然地，ＭＱ-17Ｊ向着“银河模”通信仪发问：“熵可以被逆转吗？” </p>\n<p>　　ＶＪ-23Ｘ吓了一跳，急忙说：“噢！我不是真的要你问这样的一个问题。” </p>\n<p>　　“为什么不？” </p>\n<p>　　“我们大家都很清楚，熵是不可能逆转的。我们不能把烧剩下来的烟尘和灰烬变回一棵大树。” </p>\n<p>　　“你的世界那儿有很多树的吗？”ＭＱ-17Ｊ问道。 </p>\n<p>　　“银河模”的声响，把两人吓了一跳，两个人随即静了下来，不敢作声。从上那精巧细小的通信仪中，传来了一丝清脆悦耳的声音，说：“资料不足，无可奉告。” </p>\n<p>　　ＶＪ-23Ｘ说：“可不是吗！” </p>\n<p>　　两人随即又回到即将呈交银河评议会的报告那一话题上。 </p>\n<p>　　※※※ </p>\n<p>　　思尊者的心灵伸延及于整个新的星河，对那些维持星河的璀灿光辉、在银河中绕转成流的无数星辰，表现出一丝微微的兴趣。他从未探访过这个星河。他有可能探访所有的星河吗？它们是如此的众多，而且每一个都载满了人——但这个负载已差不多成为一种无用的累赘。一步一步的。人类真正的精髓，已移往这里，在这太空的深处。 </p>\n<p>　　是心灵，不是肉体！那些不朽的躯壳仍然留在行星上，“洋洋乎与浩气俱”。有些时，它们会起来作一些实质的活动，不过，那是越来越少的了。此外，长久以来，已经越来越少新的自我出现，以加入这个无比强大的行列。但那又有什么关系呢？反正宇宙中已越来越少空间可供新的个体居住。 </p>\n<p>　　思尊者在他的沉思冥想中，被另一个移近的心灵的飘渺触角所惊醒。 </p>\n<p>　　“我是思尊者。”思尊者说：“你呢？” </p>\n<p>　　“我是大十晕。你的银河叫什么名字？” </p>\n<p>　　“我们就叫它做银河？你的呢？” </p>\n<p>　　“我们也是这样叫。所有人都称他们的银河做‘他们的银河’，仅此而已。不过，这也是挺自然的。” </p>\n<p>　　“是呀。反正所有的银河都是一样。” </p>\n<p>　　“并非所有银河都是一样的。在某一个独特的银河之中，必定有一处地方是人类的发源地。那不是使这个银河与别不同吗？” </p>\n<p>　　思尊者说：“那么是那一个呢？” </p>\n<p>　　“我也不大清楚。不过，‘宇宙模’会知道的。” </p>\n<p>　　“我们不如问问它吧。我突然感到很好奇。” </p>\n<p>　　思尊者扩大了他的感觉范围，直至那些银河越缩越小，成为一个更大更漆黑的背景上的散落光点；这盈亿上兆的星河，载着那些不朽的居客、那些智能的形体，而这些形体的心灵，却都在深空之中自由飘泊。然而，其中有一个银河是独一无二的，因为人类就是从这银河发轫和茁壮长大。在那朦胧的遥远岁月之中，曾经有一段时期，这是惟一有人类居住的地方。 </p>\n<p>　　思尊者受好奇之火熬炙着，极欲看看这银河是怎么的一个模样。他叫道：“‘宇宙模’！人类是从那个银河中起源的？” </p>\n<p>　　“宇宙模”立即便已听到这一呼唤，因为在每一个世界及太空中每一个角落，“宇宙模”都有它的接收器在默默地守待。而每一个接收器通过了超太空，都直接驳到一处不为人知的地点——“宇宙模”孤伶独处，踞策一切的地方。 </p>\n<p>　　思尊者所认识的人之中，只有一个的思维曾经穿透至“宇宙模”的可见范围内。按照他后来所说，所见到的就只是一个耀眼的、直径大概只有两英尺的球体，而且还是模糊不清的。</p>\n<p>　　“但那怎可能是‘宇宙模’的全部呢？”思尊者曾经问道。 </p>\n<p>　　“‘宇宙模’的大部份都在超太空。不过，它究竟以一种怎样的状态在那儿存在，我实在难以想象。”这就是思尊者所得到的回答。 </p>\n<p>　　事实上，不单回答的人难以想象，任何人也同样无法想象。思尊者知道，这是因为在很久以前，人类已没有参予任何一副“宇宙模”制造过程中的任何部份。每一副“宇宙模”都亲自设计并建造它的继承者。 </p>\n<p>　　每一副电脑，在其存在的上百万年的岁月中，都不断搜集及累积必需的资料，用以造成一个更好、更精巧、更能干的继承者。它所有的知识及自我的意识，将融入这继承电脑之中，混成一体。 </p>\n<p>　　“宇宙模”打断了思尊者的游荡心思，但不是用语言，而是通过引导。思尊者的心神，被带领至一幅黯淡星河海洋的图景，在这图景中，其中一个星河扩大起来，直至其内的星辰清晰可辨。 </p>\n<p>　　一个思想随即而来。无比的遥远，却又无比的清晰：“这就是人类原先的星河。” </p>\n<p>　　但不论怎样看，也看不出这星河与其它的有什么分别。思尊者抑遏着心中的失望。 </p>\n<p>　　大十晕一路伴随着思尊者的心灵，现在突然说：“而其中的一颗星就是人类起源时的星体吗？” </p>\n<p>　　“宇宙模”说：“人类原先的星球已变成了新星。现在它是一颗白矮星。” </p>\n<p>　　“那上面的人都死了吗？”思尊者错愕地，不加思索地问。 </p>\n<p>　　“宇宙模”说：“像其余类似的情况一样，我们及时造了一个新的世界，好让他们的肉体有所栖息。” </p>\n<p>　　“唔！当然。”思尊者说。但就在他如此说的当儿，一阵失落的感觉涌上心头。他的心神放开了对人类那原先星河的掌握，让它跳回那星河海洋之中，再度成为朦胧的光点。他永不想再看见这星河了。 </p>\n<p>　　大十晕说：“干吗？” </p>\n<p>　　“星辰逐一的消逝。那原先的星球已死掉了。” </p>\n<p>　　“它们横竖都要死的嘛。有什么不妥呢？” </p>\n<p>　　“但当所有能量都耗尽了，我们的躯体最终也会死亡。就是我和你也不能幸免。” </p>\n<p>　　“那要经过数十亿年呢。” </p>\n<p>　　“就是数十亿年以后，我也不想这事发生。‘宇宙模’！我们怎样才可以使星辰长生不灭呢？” </p>\n<p>　　大十晕觉得很有趣，说：“你是在问，熵的方向是否可以被逆转？” </p>\n<p>　　“宇宙模”随着回答：“资料不足，无可奉告。” </p>\n<p>　　思尊者的思维头也不回的飞返他自己的星河。他再也没有理会大十晕，无论大十晕的躯体是在亿兆光年外的一个星河那儿等待，抑或只是在思尊者星球旁边的那颗星球之上。那实在没有什么关系。 </p>\n<p>　　悒悒不乐地，思尊者开始搜集星空间的氢气，去制造属于他自己的一颗小星。假若所有星星真的终有一天全部死去，至少，如今还可以有些星球被建造起来。 </p>\n<p>　　※※※ </p>\n<p>　　人类顾影自度。在某一意义而言，人类的心灵已混然成为一体。他由无数亿万兆的万古长青的躯体所组成。每一躯体都不衰不朽的卧在它所处的地方，静静地休息着。每个皆由一些完美无瑕，同样不衰不朽的机械人侍奉左右。所有这些躯体的心灵，则自由自在地慢慢融会在一起，变成你中有我，我中有你，难分彼此。 </p>\n<p>　　人类说：“宇宙要死了。” </p>\n<p>　　人类环顾四周昏黯的星河。所有的巨族星球，那些挥霍无度的浪费者，在最最暗淡遥远的过去，便早已消失得无影无踪。差不多所有的星辰都已成了白矮星，在暮景余年中苟延残喘。 </p>\n<p>　　星辰与星辰之间，有些新的星星从尘埃中诞生，有些是通过自然的途径，有些则是人类的制作。然而，就是这些也在逐步走向死亡。若把几颗白矮星纠集起来，叫它们碰撞在一起。其中释出的巨大能量，可用来制造一些新的恒星。可是大约要一千颗白矮星，才能造成一颗新的星球。而且就是这些“新星”，也有寿终正寝的一日。 </p>\n<p>　　人类说：“只要好好地使用，藉着‘万宗模’的监督和指示，宇宙间现时仍剩下的能量，也能持续数十亿年。” </p>\n<p>　　“就是这样。”人类说：“终有一天，一切都尽归尘土。无论怎样的巧妙利用，怎样的延长节约，能量一经花费，就逃逸四散，不可捕回。熵必须永恒地增长，直至它可能达到的最大值。” </p>\n<p>　　人类说：“熵不可以逆转的吗？让我们问问‘万宗模’。” </p>\n<p>　　“万宗模”包围着人类，却不在太空那儿。事实上，“万宗模”没有一丝一毫在太空之中，它整个的在超太空那，由一些既非物质也非能量的东西所组成。它的大小及本质等问题，以人类所知的语言及思维来说，已是毫无意义的了。 </p>\n<p>　　“‘万宗模’，”人类说：“熵怎样才可以逆转过来？” </p>\n<p>　　“万宗模”说：“资料不足，无可奉告。” </p>\n<p>　　人类说：“搜集多些资料吧！” </p>\n<p>　　“万宗模”说：“我会的。我做这工作已有一百亿年。我的祖先及我自己曾经多次被问及这一个问题。可是就所有资料，仍是不足以回答。” </p>\n<p>　　“会不会有那一天，”人类说：“资料终于足够。又或是在任何情况之下，这个问题也是无可解决的？” </p>\n<p>　　“万宗模”说：“没有问题是在任何情况下也不能解决的。” </p>\n<p>　　人类说：“你将于何时才有足够的资料去回答这个问题呢？” </p>\n<p>　　“万宗模”说：“资料不足，无可奉告。” </p>\n<p>　　“你会继续为这个问题寻求答案吗？”人类问。 </p>\n<p>　　“万宗模”说：“我会的。” </p>\n<p>　　人类说：“我们会耐心等待。” </p>\n<p>　　※※※＊ </p>\n<p>　　所有的恒星和星河，逐一地泯灭消亡。经过了一亿兆年的运行虚耗，太空变得漆黑一片，黯然没有一丝亮光。 </p>\n<p>　　人类一个一个的融入“模”之中。每一实质的躯体，在融合的过程中失掉了思想上的自我，但结果并不是一次损失，反而是一种很大的增益。 </p>\n<p>　　人类最后的心灵，在融合之前停将下来。他遥视太空深处。渊薮中除一颗最后的黑暗星球外，其余一无所有，有的就只是一丝半缕极为稀薄的物质，空虚无定地被余温尽散、无限地接近绝对零度的热量所激动。 </p>\n<p>　　“人”说：“‘模’，这就是终结了吗？这些纷乱混沌，不可以在宇宙中重新倒转过来吗？做得到吗？” </p>\n<p>　　“模”说：“资料不足，无可奉告。” </p>\n<p>　　“人”最后一丝的心灵与“模”融合为一，最后就只有“模”独自存在——在超太空中孤单地存在。 </p>\n<p>　　物质和能量消灭了，空间与时间亦因此随着消失。就是“模”的存在，也只不过为了要回答那最后的问题。这一问题，自从一亿兆年以前，一个半醉的电脑操作员向一副电脑发问以来，“模”就一直未能作出正确的回答。当然，那副电脑比起“模”来说，还远不及一个人比之与“人”。 </p>\n<p>　　所有的问题都回答了。但只要这问题一朝未被作答，“模”也就一朝未能放松它的自我意识。 </p>\n<p>　　一切存在的资料终于搜集齐全。没有任何资料没有被列入。 </p>\n<p>　　但所有搜集得来的资料，还需要全部综合起来，并依其所可能有的关系，逐一的分类、排列和组合。 </p>\n<p>　　这一工作花费了一个没有时间间隔的“顷刻”。 </p>\n<p>　　终于，“模”学会了怎样去逆转熵的方向。 </p>\n<p>　　但面对这最后问题的答案，“模”找不着任何人来告知。不过，那不打紧。这一答案——通过实践来表达——将连这一点也照顾在内。 </p>\n<p>　　又过了另一无时间的顷刻，“模”思索着最好的着手方法。小心翼翼地，“模”建立起整个程序。 </p>\n<p>　　“模”的意念统摄着一切，包括以往曾一度存在的宇宙；而对着现在“混沌”一片的存在，则正在沉思冥想。一步一步地，这程序必须被贯彻执行。 </p>\n<p>　　“模”说：“有光吧！” </p>\n<p>　　于是就有了光—— </p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>​                                                                                阿西莫夫</p>\n</blockquote>\n<p>　　最后的问题，是在公元二〇六一年五月二十一日，在半开玩笑的情况下首次被提出来的。那时正值人类在星光熠耀的舞台上首次登场。起因是酒酣之中，以五块钱作赌注的一次打赌。事情的经过是这样的： </p>\n<p>　　亚历山大-雅道尔及保杉-鲁波夫是“茂的模”的两个忠实仆从。那巨大的电脑一哩又一哩长的表面，那冰冷、卡嗒作响而又不停闪着亮光的表面，背后究竟进行着什么样的活动？这两位料理员比世界上任何人都知得清楚。他们至少对那整个电讯传递及所有回路的基本蓝图，有一大致的概念。这个体系的复杂性与日俱增，在很久之前，即已超过任何个别的人所能全盘掌握的地步。 </p>\n<p>　　“茂的模”可以自我调整和自我修正。它必须具有这种能力，因为没有任何人为的力量，可以足够迅速或堪以适当地为它作出调整和修正。故此，雅道尔和鲁波夫只是对这庞然怪物作出一些很轻微和表面的看管和料理。不过，他们倒是尽心尽力地去做的，没有人能比他们做得更好的了。他们输入资料，把问题修改以适合“茂的模”的需求，最后把输出的答案翻译和整理。很显然，他们跟其它所有同业的人员一样，都极有资格分享“茂的模”的光荣。 </p>\n<p>　　数十年来，“茂的模”帮助人们设计船支，测定轨迹，使人类能抵达月球、金星和火星。但再远一点，地球那贫脊的资源，便再不能提供宇宙飞船所需的燃料。这些冗长的旅程需要太多的能量。人类已经以越来越高的效率来开采地球上的煤矿及铀矿。可是，地球上的煤和铀都是有限的。 </p>\n<p>　　但一步一步地，“茂的模”搜集了足够的资料，能对更深奥的一些问题，作出更为彻底的解答。就在公元二〇六一年五月十四日，以往一度曾是理论的构想，终于变成了事实。 </p>\n<p>　　太阳的能量被储存、转化及直接地利用，规模遍彻整个行星。地球熄灭了她的煤火，关掉了它的铀反应炉，随而开启了一个特殊的电钮，把自己连接到一个小型的供应站那儿。这个直径一哩的供应站，以地月间一半的距离环绕着我们这个行星。整个地球就依赖着一些看不见的太阳能光束来行走。 </p>\n<p>　　七天的时间，并不足以使那光采和热闹黯淡或沉寂下来。但雅道尔和鲁波夫终于能避开那些公众应酬，在一处没有人会想到的地方，静静地相聚在一起。这地方是地底下一个弃置了的密室。在那儿，“茂的模”露出了它那深深地埋藏着的巨大躯体的一小部份。既没有人管理而又优悠地闲着，“茂的模”作出懒洋洋的卡嗒声，正从容地整理着一些例行的资料。它也同样正获得休假。两个小伙子也乐得如此，他们本来就没有意思去打扰这位大人物。 </p>\n<p>　　他们带来了一瓶酒。在这一刻，两人惟一想做的，就是齐齐松驰一下，把酒聊天。 </p>\n<p>　　“想想呀！那真是奇妙。”雅道尔说。他宽阔的脸上露出了疲倦的痕迹，正用一根玻璃棒慢慢地搅拌面前的酒，注视着那缓缓地旋转的冰块。“我们今生今世也用不完的能量，不用花费一分一毛便源源不绝的滚滚而来。只要我们愿意的话，我们有足够的能量，把整个地球熔为一滴含有杂质的铁水，而且事后对这花去的能量可以毫不在乎！今生今世也用不完的能量，我们所需要所有所有的能量，至直永远、永远、永远！” </p>\n<p>　　鲁波夫把头斜斜的歪向一旁。这是他在预备提出相反意见以反驳他人时常做的怪动作。他现在正想提出相反的意见，反驳雅道尔。一小部分原因是他要负责携来那些冰块和酒杯。“不是永远。”他说。 </p>\n<p>　　“噢！去你的！就算不是永远也差不多啦！起码直至太阳油尽灯枯之时，老雅。” </p>\n<p>　　“那就不是永远。” </p>\n<p>　　“好啦！那么起码是千万年，亿万年吧！就算它是二十亿年左右，好了吧？” </p>\n<p>　　鲁波夫扬起手指，抚弄着他那稀疏的头发，像在告诉自己还有不少剩在那儿。他慢慢地轻吮自己的冻酒，道：“二十亿年比起永远，可差得多了。” </p>\n<p>　　“但至少它满够我们用了，你说不是吗？” </p>\n<p>　　“这样说，煤和铀也不一样可以吗？” </p>\n<p>　　“好啦！但现在我们可以把每一艘宇宙飞船直接驳上我们的太阳电力站。它可以来回冥王星数百万次，而无燃料短缺之虞。若果用煤和铀，这可肯定办不到。不信你去问问‘茂的模’。” </p>\n<p>　　“我不用问‘茂的模’。我可知得清楚。” </p>\n<p>　　“那就请你不要再挑三剔四，小觑‘茂的模’为我们所立的功劳。”雅道尔激动地叫道：“它做得已挺好的了。” </p>\n<p>　　“谁说它做得不好？我只是说：太阳不可能永远的燃烧下去。我所讲的，一直就只是这一点。我们在二十亿年内的确是高枕无忧，但之后呢？”鲁波夫的一支手指微微颤抖地指着对方。“请不要告诉我，人类将转向其它的星球汲取能源。” </p>\n<p>　　接着的一阵子，大家都默不作声。雅道尔只一两次把酒杯提到唇边。鲁波夫则慢慢地闭上眼睛。两人都在休息。 </p>\n<p>　　鲁波夫突然张开了双眼。“你是在想，太阳熄灭了，还有其它的恒星。是不是？” </p>\n<p>　　“我没有这样想。” </p>\n<p>　　“一定是，你一定是在这样的想。你的问题就是不懂逻辑。你就像故事中那傻小子，半途遇着大雨。他走进丛林里，在一棵树下躲避。他半点儿也不着急，因为他以为自己这棵树若湿透了，他可以再找另外一棵。” </p>\n<p>　　“我明白，我明白。”雅道尔说：“你不用说得这么大声。太阳完蛋时，其余的星球也一样完蛋了，不是吗？” </p>\n<p>　　“这个当然。”鲁波夫喃喃地说：“宇宙间万物的起源，都可追溯到最先的那次大爆炸，无论那是怎样子的一回事。同样，所有星星都有燃烧殆尽的时候。到那时，万物皆化为乌有，整个宇宙也就完蛋大吉啦。当然，有些星球比其它的烧得快，去他的！-例如那些红巨星蓝巨星就只有数千万年的光景。太阳将还有五十亿年，至于那些白矮星红矮星等，大概能再多支撑数百亿年└w憬h勿论它们到时有啥用！但顶多是一千亿年吧，一切将归于黑暗。熵就是要增长到一个最大值，那就是了。” </p>\n<p>　　“我十分清楚熵这回事。”雅道尔认真地说，似乎这与他的尊严很有关系。 </p>\n<p>　　“你知个屁！” </p>\n<p>　　“我起码知得不比你少！” </p>\n<p>　　“那么你就该明白，任何事物最后都有消散殒灭的一天。” </p>\n<p>　　“好啦！有谁说它们不会呢？” </p>\n<p>　　“正是你嘛！你这可怜虫。你说我们有永远也用不完的能量。你说‘永远’。” </p>\n<p>　　这回轮到雅道尔要唱反调。“也许有一天，万物会从头开始呢！”他说。 </p>\n<p>　　“绝不可能！” </p>\n<p>　　“为什么？总会有这样的一天的。” </p>\n<p>　　“永无可能！” </p>\n<p>　　“问问‘茂的模’呢！” </p>\n<p>　　“你去问‘茂的模’！我敢输赌。若‘茂的模’说一声‘可以’，我输给你五块钱。” </p>\n<p>　　雅道尔刚好醉得肯接受这打赌，却也刚好清醒得可以进行所需的操作。他用符号和一大堆运作指示，把问题重新草拟。按照日常的用语，那问题大概是这样：“人类可否在太阳老死之后，无需净耗一丝一毫的能量，而终有一天把太阳恢复年轻时的旺盛？” </p>\n<p>　　整个问题又或者可以更简单地读成：“怎样才能使整个宇宙的净熵大幅度地减低？” </p>\n<p>　　“茂的模”突然变得死寂静谧。那徐徐闪动的亮光熄灭了，远处电讯传送的卡嗒声也停止了。 </p>\n<p>　　就在两个吓得半死的技师，感到再也按捺不住之际，附属于“茂的模”某处的电讯机忽然恢复了生气，在吐出的纸带上，打了八个大字：“资料不足，无可奉告。” </p>\n<p>　　“赌不成啦。”鲁波夫轻声地说。两人跟着便匆匆离去。 </p>\n<p>　　第二天早晨，两人头痛如绞，口舌胶苦，早已把整件事忘得一干二净了。 </p>\n<p>　　※※※ </p>\n<p>　　谢路、谢路婷和谢路儿一、谢路儿二等四人一同看着星光满布的萤幕。随着宇宙飞船完成了穿越“超太空”的“非时间”旅程，萤幕忽然起了变化，一息间，那均匀错落，星辰闪耀的影像，变成了一幅由一个孤独的、像子弹般大的绚烂圆盘策居中央、踞视一切的慑人图景。</p>\n<p>　　“那就是X-23。”谢路充满信心地说。他背负着瘦长的双手，指节因握得过份用力而微微发白。 </p>\n<p>　　小谢路儿——两个都是女孩子——刚好经历了她们生平第一次的“超太空穿越”。两人都十分感到在穿越其间，那种有若内外倒置或是从内反转过来的怪异感觉。她们掩嘴偷笑，同时疯狂地绕着她们的妈妈互相追逐，一边大喊：“我们到了X-23！我们到了X-23！我们——” </p>\n<p>　　“静点！孩子！”谢路婷截然地喝道。“谢路，你肯定了吗？” </p>\n<p>　　“还有什么不肯定呢？”谢路反问，抬头望了望天花板上，表面平滑无瑕的突起的金属构造。这结构伸延整个房间，分别没入对角的两处墙壁。事实上，它有整艘船那般长。 </p>\n<p>　　谢路对这粗粗的金属长杆所知甚少。他只知道它的名字叫“微型模”，而且谁有任何问题或疑难，都可以问它。不过就是没有人向它问问题，它仍负有为宇宙飞船导航，并把宇宙飞船带引至某一预定的目的地这一重大任务。它从不同的“次星河动力供应站”那儿汲取能量，并为“超太空纵跃”的数学公式计算答案。 </p>\n<p>　　谢路和他的家人，只需在船那舒适的起居舱内休嬉及静心等待。 </p>\n<p>　　以往曾有人告知谢路，“微型模”最后的那个“模”字，在古老的地球语中，是“模拟式电脑”的意思。但谢路就是连这一点也差点儿忘了。 </p>\n<p>　　谢路婷看着萤幕，两眼湿濡濡的。“我忍不住。我一旦想起舍弃家乡，远离地球，心中总是感到不知怎样似的。” </p>\n<p>　　“你真傻！地球有什么值得留恋？”谢路问道：“我们在那一无所有。在这，在X-23，我们将拥有一切。你不会感到寂寞。你又不是那些先锋的拓荒者。这星球上已有超过一百万人。哈！我们的曾子曾孙，可能因为到时X-23也已经过份挤迫，而要另外探求新的世界呢！”接着，谢路若有所思的顿了一顿：“可不是吗？那些电脑能随着人口的增长，发展出相应的星际旅行方法，这真是我们的好运气。” </p>\n<p>　　“我知道，我知道！”谢路婷仍是禁不住心中的哀愁。 </p>\n<p>　　谢路儿一抢着说：“我们的‘微型模’是世界上最好的‘微型模’。” </p>\n<p>　　“是的，我想是的。”谢路抚摸着她的头发。 </p>\n<p>　　拥有一副属于自己的“微型模”，真是一件令人快慰的事。谢路十分庆幸他正处于现有的年代，而不是其它的世纪。他父亲年轻时，所有电脑都是一些延绵近百平方哩的庞然大物。而且每一个行星只拥有一副，叫做“行星模”。一千年以来，它们越变越大。可是，进步突如其来，改变了一切。分子活塞代替了晶体管，最大的“行星模”也变得只占一艘宇宙飞船一半的空间。 </p>\n<p>　　谢路感到很是兴奋。他每次想到这问题都有同一的感觉：他现时个人拥有的“微型模”，比起那首次驯服太阳，既古老又原始的“茂的模”，不知复杂多少倍。比起那首次解决了超太空飞行的难题，使星辰间的旅程成为可能的地球“行星模”（历来最大的“行星模”。）其复杂性也不相伯仲。 </p>\n<p>　　“这么多的星球，这么多的行星。”谢路婷感叹道，心中思潮起伏。“我想一家一家的人，将会好象我们现时一般，永远不停地移往新的行星居住。” </p>\n<p>　　“不是永远。”谢路带着微笑，说：“终有一天，所有东西会停下来。当然，那至少是数十亿年之后的事。很久很久以后的事。你知道吗？就是星辰的光辉也有耗尽的一日。熵一定要不断地增长下去。” </p>\n<p>　　“爸爸，熵是什么？”谢路儿二尖叫道。 </p>\n<p>　　“小甜儿。熵就是代表宇宙消耗了多少能量的一个名字。每一样东西都会用尽的，就像你那会走会叫的小型通信机械人一样，你记得吗？” </p>\n<p>　　“我们不可以换上新的电池，就像我与小机械人换电一样吗？” </p>\n<p>　　“小宝贝，星星本身就是电池。它们一用光了，那儿还有新的电池呢？” </p>\n<p>　　谢路儿一随即撒起娇来：“爸爸，不要让它们用光，不要让那些星星用光吧！” </p>\n<p>　　“看你的，弄成这个样子。”谢路婷低声说，有点气愤而又不知所措。 </p>\n<p>　　“我怎知会使她们害怕起来？”谢路低声回答。 </p>\n<p>　　“问问‘微型模’吧！”谢路儿一大声地说：“问问它怎样才能使星星再亮起来吧。” </p>\n<p>　　“去吧。”谢路婷说：“这会使她们安静下来。”谢路儿二这时也哭起来了。 </p>\n<p>　　谢路耸了耸肩。“好啦，好啦，我亲爱的。我去问问‘微型模’。它会告诉我们。你不用担心！” </p>\n<p>　　他询问“微型模”，又急急的补上：“把答案印出来。” </p>\n<p>　　谢路两手拿着那幼薄的纸条，装着很高兴的样子说：“看！‘微型模’说到那个时候，它自有办法照顾一切。你们不用再担心啦。” </p>\n<p>　　谢路婷说：“现在呢，够钟上床睡觉了。我们不久便要到达我们的新家园啦。” </p>\n<p>　　谢路在毁掉那纸条之前，把上面的字读了一遍：“资料不足，无可奉告。” </p>\n<p>　　他耸了耸肩，转看那萤幕。Ｘ-23正就在前方。 </p>\n<p>　　※※※ </p>\n<p>　　临马府的ＶＪ-23Ｘ凝视着那立体的、小比例的银河投影图之中的漆黑深空，说：“我有时会想到，我们对这件事情看得这么严重，是不是有点无聊荒谬？” </p>\n<p>　　呖镐廊的ＭＱ-17Ｊ摇了摇头。“我认为不。你也知道，依目前的扩展速度，整个银河系不出五年便会全部挤满了人。” </p>\n<p>　　他们两人看来都是二十出头。两个都身形高大而且体态优美。 </p>\n<p>　　“不过，”ＶＪ-23Ｘ说，“我仍是不大愿意向银河评议会递交一个如此悲观的报告。” </p>\n<p>　　“我认为这样做最恰当不过。他们就是需要点冲击，我们应该使那班高高在上的大官认真起来，看清楚一下问题。” </p>\n<p>　　ＶＪ-23Ｘ叹了口气。“太空是无限的。外边还有成千上万的银河等待着我们，随我们任意发展下去。想想呀，所有银河的数目实在何止万千！” </p>\n<p>　　“就是一亿一兆也仍然不是无限。而且总的数目比之无限，是越来越小得可怜。试想想！二万年前，人类首次解决了直接利用恒星能源的难题；数世纪后，恒星际飞行得以实现。人类经历了数百万年才挤满了一个小小的世界，却只需一万五千年便挤满了其余的整个银河。如今，我们的人口每十年就增加一倍——” </p>\n<p>　　ＶＪ-23Ｘ打岔说：“我们要知，长生不死是一个主要的因素。” </p>\n<p>　　“很好。我们现在可以长生不死。不错我们应该把它归入考虑之列。我总觉得这长生不死有它令人不悦的一面。‘银河模’的确替我们解决了不少问题，但就防止衰老及死亡这一问题而言，它以往的成绩都因此而付诸流水了。” </p>\n<p>　　“然而，我想你不会打算放弃你的生命吧！” </p>\n<p>　　“不！不！”ＭＱ-17Ｊ急急的断然回答，可是随即又转为温柔委婉的说：“起码不是现在。我还挺年轻呢。你呢？你多大了？” </p>\n<p>　　“二百二十三岁。你呢？” </p>\n<p>　　“我还未到二百岁——不过，让我们回到原先的话题吧。人口每十年增长一倍。一天当这个银河被住满了，不出十年我们便可挤满第二个银河。再过十年我们可挤满另外两个。另一个十年、四个。不出一百年的光景，我们将挤满了一百万个银河。只消一万年，整个宇宙便会肩并肩的挤满了人。之后又怎样呢？” </p>\n<p>　　ＶＪ-23Ｘ说：“还有一点要考虑的，就是运输的问题。我怀疑若把整个星河的居民从一个星河移往第二个星河，将需要多少的太阳能源单位。” </p>\n<p>　　“提得好。就是如今，人类每年就消耗两个阳能单位。” </p>\n<p>　　“大部份的能量都浪费了。试想想，单是我们自己的星河，每年就输出整千个阳能单位，而我们只用了其中的两个。” </p>\n<p>　　“不错。可是我们就是能够百份之一百地利用这些能量，都只不过使终结来得迟些吧了。我们的能量需求，正以几何级数地上升，比人口的增长还厉害。我们在所有星河未熄灭之前，一早便会耗尽一切可能利用的能量。有意思，一个真正有意思的观点。” </p>\n<p>　　“不过，我们可以从星际气体中重新制造新的恒星。” </p>\n<p>　　“或是从扩散了的热能中制造出新的恒星？”ＭＱ-17Ｊ带着嘲弄的口吻问道。 </p>\n<p>　　“可能有某种方法，我们能把熵的趋势倒转过来。我们应该问问‘银河模’。” </p>\n<p>　　ＶＪ-23Ｘ实在并非认真的这样想。但ＭＱ-17Ｊ已从他口袋中取出了他的“银河模”通信仪，放在他前面的桌上。 </p>\n<p>　　“我一早便想这样做。”他说：“这是人类迟早要面对的一个问题。” </p>\n<p>　　他严肃地注视着那通信仪。这通信仪只是一个两寸见方的正立方体，而且中间差不多空无一物。但它透过超太空，与那为着全人类服务的伟大“银河模”连结在一起。我们如果把超太空也计算在内，它实在是“银河模”庞大躯体的一部份。 </p>\n<p>　　ＭＱ-17Ｊ顿了一顿，正揣测着在他长生不老的未在岁月中，究竟有没有一天能亲眼目睹“银河模”。这“银河模”位于一个特别为它而设的小小世界之上。如蛛网般的力场光束纵横交错、来回穿插。一股一股的亚介子流，在光束所支持着的特种物质中飞跃奔驰，以代替以往古老而又笨拙的分子活塞。然而，就是拥有这些“亚以太”先进技术的“银河模”其整个躯体也足足有二千英尺之长。 </p>\n<p>　　倏然地，ＭＱ-17Ｊ向着“银河模”通信仪发问：“熵可以被逆转吗？” </p>\n<p>　　ＶＪ-23Ｘ吓了一跳，急忙说：“噢！我不是真的要你问这样的一个问题。” </p>\n<p>　　“为什么不？” </p>\n<p>　　“我们大家都很清楚，熵是不可能逆转的。我们不能把烧剩下来的烟尘和灰烬变回一棵大树。” </p>\n<p>　　“你的世界那儿有很多树的吗？”ＭＱ-17Ｊ问道。 </p>\n<p>　　“银河模”的声响，把两人吓了一跳，两个人随即静了下来，不敢作声。从上那精巧细小的通信仪中，传来了一丝清脆悦耳的声音，说：“资料不足，无可奉告。” </p>\n<p>　　ＶＪ-23Ｘ说：“可不是吗！” </p>\n<p>　　两人随即又回到即将呈交银河评议会的报告那一话题上。 </p>\n<p>　　※※※ </p>\n<p>　　思尊者的心灵伸延及于整个新的星河，对那些维持星河的璀灿光辉、在银河中绕转成流的无数星辰，表现出一丝微微的兴趣。他从未探访过这个星河。他有可能探访所有的星河吗？它们是如此的众多，而且每一个都载满了人——但这个负载已差不多成为一种无用的累赘。一步一步的。人类真正的精髓，已移往这里，在这太空的深处。 </p>\n<p>　　是心灵，不是肉体！那些不朽的躯壳仍然留在行星上，“洋洋乎与浩气俱”。有些时，它们会起来作一些实质的活动，不过，那是越来越少的了。此外，长久以来，已经越来越少新的自我出现，以加入这个无比强大的行列。但那又有什么关系呢？反正宇宙中已越来越少空间可供新的个体居住。 </p>\n<p>　　思尊者在他的沉思冥想中，被另一个移近的心灵的飘渺触角所惊醒。 </p>\n<p>　　“我是思尊者。”思尊者说：“你呢？” </p>\n<p>　　“我是大十晕。你的银河叫什么名字？” </p>\n<p>　　“我们就叫它做银河？你的呢？” </p>\n<p>　　“我们也是这样叫。所有人都称他们的银河做‘他们的银河’，仅此而已。不过，这也是挺自然的。” </p>\n<p>　　“是呀。反正所有的银河都是一样。” </p>\n<p>　　“并非所有银河都是一样的。在某一个独特的银河之中，必定有一处地方是人类的发源地。那不是使这个银河与别不同吗？” </p>\n<p>　　思尊者说：“那么是那一个呢？” </p>\n<p>　　“我也不大清楚。不过，‘宇宙模’会知道的。” </p>\n<p>　　“我们不如问问它吧。我突然感到很好奇。” </p>\n<p>　　思尊者扩大了他的感觉范围，直至那些银河越缩越小，成为一个更大更漆黑的背景上的散落光点；这盈亿上兆的星河，载着那些不朽的居客、那些智能的形体，而这些形体的心灵，却都在深空之中自由飘泊。然而，其中有一个银河是独一无二的，因为人类就是从这银河发轫和茁壮长大。在那朦胧的遥远岁月之中，曾经有一段时期，这是惟一有人类居住的地方。 </p>\n<p>　　思尊者受好奇之火熬炙着，极欲看看这银河是怎么的一个模样。他叫道：“‘宇宙模’！人类是从那个银河中起源的？” </p>\n<p>　　“宇宙模”立即便已听到这一呼唤，因为在每一个世界及太空中每一个角落，“宇宙模”都有它的接收器在默默地守待。而每一个接收器通过了超太空，都直接驳到一处不为人知的地点——“宇宙模”孤伶独处，踞策一切的地方。 </p>\n<p>　　思尊者所认识的人之中，只有一个的思维曾经穿透至“宇宙模”的可见范围内。按照他后来所说，所见到的就只是一个耀眼的、直径大概只有两英尺的球体，而且还是模糊不清的。</p>\n<p>　　“但那怎可能是‘宇宙模’的全部呢？”思尊者曾经问道。 </p>\n<p>　　“‘宇宙模’的大部份都在超太空。不过，它究竟以一种怎样的状态在那儿存在，我实在难以想象。”这就是思尊者所得到的回答。 </p>\n<p>　　事实上，不单回答的人难以想象，任何人也同样无法想象。思尊者知道，这是因为在很久以前，人类已没有参予任何一副“宇宙模”制造过程中的任何部份。每一副“宇宙模”都亲自设计并建造它的继承者。 </p>\n<p>　　每一副电脑，在其存在的上百万年的岁月中，都不断搜集及累积必需的资料，用以造成一个更好、更精巧、更能干的继承者。它所有的知识及自我的意识，将融入这继承电脑之中，混成一体。 </p>\n<p>　　“宇宙模”打断了思尊者的游荡心思，但不是用语言，而是通过引导。思尊者的心神，被带领至一幅黯淡星河海洋的图景，在这图景中，其中一个星河扩大起来，直至其内的星辰清晰可辨。 </p>\n<p>　　一个思想随即而来。无比的遥远，却又无比的清晰：“这就是人类原先的星河。” </p>\n<p>　　但不论怎样看，也看不出这星河与其它的有什么分别。思尊者抑遏着心中的失望。 </p>\n<p>　　大十晕一路伴随着思尊者的心灵，现在突然说：“而其中的一颗星就是人类起源时的星体吗？” </p>\n<p>　　“宇宙模”说：“人类原先的星球已变成了新星。现在它是一颗白矮星。” </p>\n<p>　　“那上面的人都死了吗？”思尊者错愕地，不加思索地问。 </p>\n<p>　　“宇宙模”说：“像其余类似的情况一样，我们及时造了一个新的世界，好让他们的肉体有所栖息。” </p>\n<p>　　“唔！当然。”思尊者说。但就在他如此说的当儿，一阵失落的感觉涌上心头。他的心神放开了对人类那原先星河的掌握，让它跳回那星河海洋之中，再度成为朦胧的光点。他永不想再看见这星河了。 </p>\n<p>　　大十晕说：“干吗？” </p>\n<p>　　“星辰逐一的消逝。那原先的星球已死掉了。” </p>\n<p>　　“它们横竖都要死的嘛。有什么不妥呢？” </p>\n<p>　　“但当所有能量都耗尽了，我们的躯体最终也会死亡。就是我和你也不能幸免。” </p>\n<p>　　“那要经过数十亿年呢。” </p>\n<p>　　“就是数十亿年以后，我也不想这事发生。‘宇宙模’！我们怎样才可以使星辰长生不灭呢？” </p>\n<p>　　大十晕觉得很有趣，说：“你是在问，熵的方向是否可以被逆转？” </p>\n<p>　　“宇宙模”随着回答：“资料不足，无可奉告。” </p>\n<p>　　思尊者的思维头也不回的飞返他自己的星河。他再也没有理会大十晕，无论大十晕的躯体是在亿兆光年外的一个星河那儿等待，抑或只是在思尊者星球旁边的那颗星球之上。那实在没有什么关系。 </p>\n<p>　　悒悒不乐地，思尊者开始搜集星空间的氢气，去制造属于他自己的一颗小星。假若所有星星真的终有一天全部死去，至少，如今还可以有些星球被建造起来。 </p>\n<p>　　※※※ </p>\n<p>　　人类顾影自度。在某一意义而言，人类的心灵已混然成为一体。他由无数亿万兆的万古长青的躯体所组成。每一躯体都不衰不朽的卧在它所处的地方，静静地休息着。每个皆由一些完美无瑕，同样不衰不朽的机械人侍奉左右。所有这些躯体的心灵，则自由自在地慢慢融会在一起，变成你中有我，我中有你，难分彼此。 </p>\n<p>　　人类说：“宇宙要死了。” </p>\n<p>　　人类环顾四周昏黯的星河。所有的巨族星球，那些挥霍无度的浪费者，在最最暗淡遥远的过去，便早已消失得无影无踪。差不多所有的星辰都已成了白矮星，在暮景余年中苟延残喘。 </p>\n<p>　　星辰与星辰之间，有些新的星星从尘埃中诞生，有些是通过自然的途径，有些则是人类的制作。然而，就是这些也在逐步走向死亡。若把几颗白矮星纠集起来，叫它们碰撞在一起。其中释出的巨大能量，可用来制造一些新的恒星。可是大约要一千颗白矮星，才能造成一颗新的星球。而且就是这些“新星”，也有寿终正寝的一日。 </p>\n<p>　　人类说：“只要好好地使用，藉着‘万宗模’的监督和指示，宇宙间现时仍剩下的能量，也能持续数十亿年。” </p>\n<p>　　“就是这样。”人类说：“终有一天，一切都尽归尘土。无论怎样的巧妙利用，怎样的延长节约，能量一经花费，就逃逸四散，不可捕回。熵必须永恒地增长，直至它可能达到的最大值。” </p>\n<p>　　人类说：“熵不可以逆转的吗？让我们问问‘万宗模’。” </p>\n<p>　　“万宗模”包围着人类，却不在太空那儿。事实上，“万宗模”没有一丝一毫在太空之中，它整个的在超太空那，由一些既非物质也非能量的东西所组成。它的大小及本质等问题，以人类所知的语言及思维来说，已是毫无意义的了。 </p>\n<p>　　“‘万宗模’，”人类说：“熵怎样才可以逆转过来？” </p>\n<p>　　“万宗模”说：“资料不足，无可奉告。” </p>\n<p>　　人类说：“搜集多些资料吧！” </p>\n<p>　　“万宗模”说：“我会的。我做这工作已有一百亿年。我的祖先及我自己曾经多次被问及这一个问题。可是就所有资料，仍是不足以回答。” </p>\n<p>　　“会不会有那一天，”人类说：“资料终于足够。又或是在任何情况之下，这个问题也是无可解决的？” </p>\n<p>　　“万宗模”说：“没有问题是在任何情况下也不能解决的。” </p>\n<p>　　人类说：“你将于何时才有足够的资料去回答这个问题呢？” </p>\n<p>　　“万宗模”说：“资料不足，无可奉告。” </p>\n<p>　　“你会继续为这个问题寻求答案吗？”人类问。 </p>\n<p>　　“万宗模”说：“我会的。” </p>\n<p>　　人类说：“我们会耐心等待。” </p>\n<p>　　※※※＊ </p>\n<p>　　所有的恒星和星河，逐一地泯灭消亡。经过了一亿兆年的运行虚耗，太空变得漆黑一片，黯然没有一丝亮光。 </p>\n<p>　　人类一个一个的融入“模”之中。每一实质的躯体，在融合的过程中失掉了思想上的自我，但结果并不是一次损失，反而是一种很大的增益。 </p>\n<p>　　人类最后的心灵，在融合之前停将下来。他遥视太空深处。渊薮中除一颗最后的黑暗星球外，其余一无所有，有的就只是一丝半缕极为稀薄的物质，空虚无定地被余温尽散、无限地接近绝对零度的热量所激动。 </p>\n<p>　　“人”说：“‘模’，这就是终结了吗？这些纷乱混沌，不可以在宇宙中重新倒转过来吗？做得到吗？” </p>\n<p>　　“模”说：“资料不足，无可奉告。” </p>\n<p>　　“人”最后一丝的心灵与“模”融合为一，最后就只有“模”独自存在——在超太空中孤单地存在。 </p>\n<p>　　物质和能量消灭了，空间与时间亦因此随着消失。就是“模”的存在，也只不过为了要回答那最后的问题。这一问题，自从一亿兆年以前，一个半醉的电脑操作员向一副电脑发问以来，“模”就一直未能作出正确的回答。当然，那副电脑比起“模”来说，还远不及一个人比之与“人”。 </p>\n<p>　　所有的问题都回答了。但只要这问题一朝未被作答，“模”也就一朝未能放松它的自我意识。 </p>\n<p>　　一切存在的资料终于搜集齐全。没有任何资料没有被列入。 </p>\n<p>　　但所有搜集得来的资料，还需要全部综合起来，并依其所可能有的关系，逐一的分类、排列和组合。 </p>\n<p>　　这一工作花费了一个没有时间间隔的“顷刻”。 </p>\n<p>　　终于，“模”学会了怎样去逆转熵的方向。 </p>\n<p>　　但面对这最后问题的答案，“模”找不着任何人来告知。不过，那不打紧。这一答案——通过实践来表达——将连这一点也照顾在内。 </p>\n<p>　　又过了另一无时间的顷刻，“模”思索着最好的着手方法。小心翼翼地，“模”建立起整个程序。 </p>\n<p>　　“模”的意念统摄着一切，包括以往曾一度存在的宇宙；而对着现在“混沌”一片的存在，则正在沉思冥想。一步一步地，这程序必须被贯彻执行。 </p>\n<p>　　“模”说：“有光吧！” </p>\n<p>　　于是就有了光—— </p>\n"},{"title":"Android基础(一)","date":"2017-09-19T09:29:33.000Z","_content":"\n### Service的启动方式?如何保证Service不被杀死?\n\n​\t两种启动方式，分别是 startService 与 bindService\n\n##### 启动时的生命周期:\n\n​\t启动时，startService -> onCreate() -> onStart() \n​\t停止时，stopService -> onDestroy() \n\n​\t在服务启动时，多次调用context.startService只会调用onStart()方法，并不会多次创建服务。\n\n##### 绑定时的生命周期： \n\n​\t绑定时,bindService -> onCreate() –> onBind() \n​\t解绑定时, unbindService ->onUnbind() -> onDestory() \n\n##### 常见的保证Service不被杀死的方法有:\n\n​\t重写onStartCommond方法,返回值为true;\n\n​\t在onDestory中发送广播重启service;\n\n​\t提升service优先级(android:priority = \"1000\");\n\n​\t提升service进程优先级，使用startForeground 将service放到前台状态;\n\n​\tApplication加上Persistent属性(android:persistent=\"true\" );\n\n​\t将APK安装到/system/app，变身系统级应用;\n\n​\t双进程守护;\n\n### 整个View的事件转发流程?\n\n​\tView.dispatchEvent->View.setOnTouchListener->View.onTouchEvent \n\n​\t在dispatchTouchEvent中会进行OnTouchListener的判断，如果OnTouchListener不为null且\t返回true，则表示事件被消费，onTouchEvent不会被执行；否则执行onTouchEvent;\n\n### ViewGroup的事件分发?\n\n##### \t大体的事件流程为： \n\n​\t\tViewGroup的dispatchTouchEvent\n\n​\t\t \t-> ViewGroup的onInterceptTouchEvent\n\n​\t\t \t-> 子View的dispatchTouchEvent\n\n​\t\t \t->子View的onTouchEvent \n\n### View是如何刷新的?\n\n​\t在主线程中调用invalidate(),在非主线程中调用postInvalidate();\n\n### 子线程更新UI的方式有哪几种?\n\n​\tHandler \n​\t在子线程中通过runOnUiThread()方法更新UI \n​\tView.post(Runnable r) \n​\t异步任务","source":"_posts/Android基础-一.md","raw":"---\ntitle: Android基础(一)\ndate: 2017-09-19 17:29:33\ntags:\ncategories: android\n---\n\n### Service的启动方式?如何保证Service不被杀死?\n\n​\t两种启动方式，分别是 startService 与 bindService\n\n##### 启动时的生命周期:\n\n​\t启动时，startService -> onCreate() -> onStart() \n​\t停止时，stopService -> onDestroy() \n\n​\t在服务启动时，多次调用context.startService只会调用onStart()方法，并不会多次创建服务。\n\n##### 绑定时的生命周期： \n\n​\t绑定时,bindService -> onCreate() –> onBind() \n​\t解绑定时, unbindService ->onUnbind() -> onDestory() \n\n##### 常见的保证Service不被杀死的方法有:\n\n​\t重写onStartCommond方法,返回值为true;\n\n​\t在onDestory中发送广播重启service;\n\n​\t提升service优先级(android:priority = \"1000\");\n\n​\t提升service进程优先级，使用startForeground 将service放到前台状态;\n\n​\tApplication加上Persistent属性(android:persistent=\"true\" );\n\n​\t将APK安装到/system/app，变身系统级应用;\n\n​\t双进程守护;\n\n### 整个View的事件转发流程?\n\n​\tView.dispatchEvent->View.setOnTouchListener->View.onTouchEvent \n\n​\t在dispatchTouchEvent中会进行OnTouchListener的判断，如果OnTouchListener不为null且\t返回true，则表示事件被消费，onTouchEvent不会被执行；否则执行onTouchEvent;\n\n### ViewGroup的事件分发?\n\n##### \t大体的事件流程为： \n\n​\t\tViewGroup的dispatchTouchEvent\n\n​\t\t \t-> ViewGroup的onInterceptTouchEvent\n\n​\t\t \t-> 子View的dispatchTouchEvent\n\n​\t\t \t->子View的onTouchEvent \n\n### View是如何刷新的?\n\n​\t在主线程中调用invalidate(),在非主线程中调用postInvalidate();\n\n### 子线程更新UI的方式有哪几种?\n\n​\tHandler \n​\t在子线程中通过runOnUiThread()方法更新UI \n​\tView.post(Runnable r) \n​\t异步任务","slug":"Android基础-一","published":1,"updated":"2017-09-19T09:37:57.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zgah2o000hnslfy1ccpb1n","content":"<h3 id=\"Service的启动方式-如何保证Service不被杀死\"><a href=\"#Service的启动方式-如何保证Service不被杀死\" class=\"headerlink\" title=\"Service的启动方式?如何保证Service不被杀死?\"></a>Service的启动方式?如何保证Service不被杀死?</h3><p>​    两种启动方式，分别是 startService 与 bindService</p>\n<h5 id=\"启动时的生命周期\"><a href=\"#启动时的生命周期\" class=\"headerlink\" title=\"启动时的生命周期:\"></a>启动时的生命周期:</h5><p>​    启动时，startService -&gt; onCreate() -&gt; onStart()<br>​    停止时，stopService -&gt; onDestroy() </p>\n<p>​    在服务启动时，多次调用context.startService只会调用onStart()方法，并不会多次创建服务。</p>\n<h5 id=\"绑定时的生命周期：\"><a href=\"#绑定时的生命周期：\" class=\"headerlink\" title=\"绑定时的生命周期：\"></a>绑定时的生命周期：</h5><p>​    绑定时,bindService -&gt; onCreate() –&gt; onBind()<br>​    解绑定时, unbindService -&gt;onUnbind() -&gt; onDestory() </p>\n<h5 id=\"常见的保证Service不被杀死的方法有\"><a href=\"#常见的保证Service不被杀死的方法有\" class=\"headerlink\" title=\"常见的保证Service不被杀死的方法有:\"></a>常见的保证Service不被杀死的方法有:</h5><p>​    重写onStartCommond方法,返回值为true;</p>\n<p>​    在onDestory中发送广播重启service;</p>\n<p>​    提升service优先级(android:priority = “1000”);</p>\n<p>​    提升service进程优先级，使用startForeground 将service放到前台状态;</p>\n<p>​    Application加上Persistent属性(android:persistent=”true” );</p>\n<p>​    将APK安装到/system/app，变身系统级应用;</p>\n<p>​    双进程守护;</p>\n<h3 id=\"整个View的事件转发流程\"><a href=\"#整个View的事件转发流程\" class=\"headerlink\" title=\"整个View的事件转发流程?\"></a>整个View的事件转发流程?</h3><p>​    View.dispatchEvent-&gt;View.setOnTouchListener-&gt;View.onTouchEvent </p>\n<p>​    在dispatchTouchEvent中会进行OnTouchListener的判断，如果OnTouchListener不为null且    返回true，则表示事件被消费，onTouchEvent不会被执行；否则执行onTouchEvent;</p>\n<h3 id=\"ViewGroup的事件分发\"><a href=\"#ViewGroup的事件分发\" class=\"headerlink\" title=\"ViewGroup的事件分发?\"></a>ViewGroup的事件分发?</h3><h5 id=\"大体的事件流程为：\"><a href=\"#大体的事件流程为：\" class=\"headerlink\" title=\"大体的事件流程为：\"></a>大体的事件流程为：</h5><p>​        ViewGroup的dispatchTouchEvent</p>\n<p>​             -&gt; ViewGroup的onInterceptTouchEvent</p>\n<p>​             -&gt; 子View的dispatchTouchEvent</p>\n<p>​             -&gt;子View的onTouchEvent </p>\n<h3 id=\"View是如何刷新的\"><a href=\"#View是如何刷新的\" class=\"headerlink\" title=\"View是如何刷新的?\"></a>View是如何刷新的?</h3><p>​    在主线程中调用invalidate(),在非主线程中调用postInvalidate();</p>\n<h3 id=\"子线程更新UI的方式有哪几种\"><a href=\"#子线程更新UI的方式有哪几种\" class=\"headerlink\" title=\"子线程更新UI的方式有哪几种?\"></a>子线程更新UI的方式有哪几种?</h3><p>​    Handler<br>​    在子线程中通过runOnUiThread()方法更新UI<br>​    View.post(Runnable r)<br>​    异步任务</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Service的启动方式-如何保证Service不被杀死\"><a href=\"#Service的启动方式-如何保证Service不被杀死\" class=\"headerlink\" title=\"Service的启动方式?如何保证Service不被杀死?\"></a>Service的启动方式?如何保证Service不被杀死?</h3><p>​    两种启动方式，分别是 startService 与 bindService</p>\n<h5 id=\"启动时的生命周期\"><a href=\"#启动时的生命周期\" class=\"headerlink\" title=\"启动时的生命周期:\"></a>启动时的生命周期:</h5><p>​    启动时，startService -&gt; onCreate() -&gt; onStart()<br>​    停止时，stopService -&gt; onDestroy() </p>\n<p>​    在服务启动时，多次调用context.startService只会调用onStart()方法，并不会多次创建服务。</p>\n<h5 id=\"绑定时的生命周期：\"><a href=\"#绑定时的生命周期：\" class=\"headerlink\" title=\"绑定时的生命周期：\"></a>绑定时的生命周期：</h5><p>​    绑定时,bindService -&gt; onCreate() –&gt; onBind()<br>​    解绑定时, unbindService -&gt;onUnbind() -&gt; onDestory() </p>\n<h5 id=\"常见的保证Service不被杀死的方法有\"><a href=\"#常见的保证Service不被杀死的方法有\" class=\"headerlink\" title=\"常见的保证Service不被杀死的方法有:\"></a>常见的保证Service不被杀死的方法有:</h5><p>​    重写onStartCommond方法,返回值为true;</p>\n<p>​    在onDestory中发送广播重启service;</p>\n<p>​    提升service优先级(android:priority = “1000”);</p>\n<p>​    提升service进程优先级，使用startForeground 将service放到前台状态;</p>\n<p>​    Application加上Persistent属性(android:persistent=”true” );</p>\n<p>​    将APK安装到/system/app，变身系统级应用;</p>\n<p>​    双进程守护;</p>\n<h3 id=\"整个View的事件转发流程\"><a href=\"#整个View的事件转发流程\" class=\"headerlink\" title=\"整个View的事件转发流程?\"></a>整个View的事件转发流程?</h3><p>​    View.dispatchEvent-&gt;View.setOnTouchListener-&gt;View.onTouchEvent </p>\n<p>​    在dispatchTouchEvent中会进行OnTouchListener的判断，如果OnTouchListener不为null且    返回true，则表示事件被消费，onTouchEvent不会被执行；否则执行onTouchEvent;</p>\n<h3 id=\"ViewGroup的事件分发\"><a href=\"#ViewGroup的事件分发\" class=\"headerlink\" title=\"ViewGroup的事件分发?\"></a>ViewGroup的事件分发?</h3><h5 id=\"大体的事件流程为：\"><a href=\"#大体的事件流程为：\" class=\"headerlink\" title=\"大体的事件流程为：\"></a>大体的事件流程为：</h5><p>​        ViewGroup的dispatchTouchEvent</p>\n<p>​             -&gt; ViewGroup的onInterceptTouchEvent</p>\n<p>​             -&gt; 子View的dispatchTouchEvent</p>\n<p>​             -&gt;子View的onTouchEvent </p>\n<h3 id=\"View是如何刷新的\"><a href=\"#View是如何刷新的\" class=\"headerlink\" title=\"View是如何刷新的?\"></a>View是如何刷新的?</h3><p>​    在主线程中调用invalidate(),在非主线程中调用postInvalidate();</p>\n<h3 id=\"子线程更新UI的方式有哪几种\"><a href=\"#子线程更新UI的方式有哪几种\" class=\"headerlink\" title=\"子线程更新UI的方式有哪几种?\"></a>子线程更新UI的方式有哪几种?</h3><p>​    Handler<br>​    在子线程中通过runOnUiThread()方法更新UI<br>​    View.post(Runnable r)<br>​    异步任务</p>\n"},{"title":"利用Github与hexo搭建个人博客的简单步骤","date":"2017-09-21T05:14:25.000Z","_content":"\n## \t导语\n\n> ​\t尽管个人博客的时代已经过去了,但是我想,能够拥有一个完全属于自己的blog,应该还算是一部分人想要做的事情.我会将我搭建这个博客的过程中踩过的坑都贴在下边,为他人提供借鉴.\n>\n> ​\t这里我使用了NexT的主题,简单明了,推荐给大家.一些针对此主题的配置我也会一一列举出来的.\n\n## 安装环境\n\n### 配置Github\n\n​\t[Github官网](https://github.com/)\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/github_sign.png?raw=true)\n\n​\t注册账号就不详细说了,然后是创建一个仓库\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/create_repo.png?raw=true)\n\n​\t然后新建仓库名字格式为\"yourname.github.io\", 注意将 yourname 换成你自己的名字\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/create_io.png?raw=true)\n\n​\t然后应该是配置SSH,这样以后你每次推送博客去网站的时候都需要输入Github账号密码,不过这一步可有可无,如果你感兴趣,可以Google一下具体操作,并不复杂,这里就再赘述了.\n\n​\t如果是前些年,配置好仓库之后还应该去settings里开启一下Github Pages,不过现在倒不必麻烦,GitHub一旦检测到你的仓库符合github.io的命名规范,会自动托管为HTML网站的.\n\n### 安装Git\n\n​\t[Git官网](https://git-scm.com/)\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/git_install.png?raw=true)\n\n​\t安装过程并不复杂,按照提示下一步就好了.\n\n### 安装Node.js\n\n​\t[Node.js官网](https://nodejs.org/en/)\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/node.png?raw=true)\n\n​\t安装好Node.js之后就可以使用npm命令了,首先我们可以验证一下上述环境是否准备完毕\n\n​\t按下\"win+X\"组合键,选择\"命令提示符(管理员)\",分别输入以下两条命令\n\n```cmd\ngit --version\n```\n\n```cmd\nnode -v\n```\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/cmd.png?raw=true)\n\n​\t如果出现上述结果,则表面环境已经正确搭建.\n\n\n\n## 安装和配置hexo\n\n​\t以下命令都是在终端里直接运行的:\n\n​\t使用npm安装hexo\n\n```cmd\nnpm install -g hexo-cli\n```\n\n​\t然后在你本地创建一个文件夹,起名为Hexo\n\n​\t然后cd到Hexo文件夹里,输入以下命令:\n\n```cmd\nhexo init\nhexo generate\n```\n\n​\t这边用了一位[博主](http://www.jianshu.com/p/863f3f2d1733)的截图\n\n![](https://raw.githubusercontent.com/CoderTian/CoderTian.github.io/master/2015/11/26/github-hexo-blog/firstcommond.png)\n\n​\t完成后Hexo文件夹内部的结构应该是这样的:\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/hexo.png?raw=true)\n\n​\t到这一步你已经可以在本地预览你的网站了,输入下面的命令开启本地服务:\n\n```cmd\nhexo server\n```\n\n### 常见的hexo配置错误及解决办法:\n\n```cmd\nERROR Plugin load failed: hexo-server\n原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n解决方法，执行命令: npm install hexo-server\n```\n\n```cmd\n执行命令hexo server，提示：Usage: hexo<Command> ....\n原因：我认为是没有生成本地服务\n解决方法，执行命令：$ npm install hexo-server --save\n提示：hexo-server@0.1.2 node_modules/hexo-server\n.... \n```\n\n## 启用主题NexT\n\n​\t这里附上[NexT主题的使用说明文档](http://theme-next.iissnan.com/getting-started.html)\n\n## 将博客部署到你的GitHub pages 上\n\n​\t首先我们需要进到Hexo文件夹根目录下的配置文件 **_config.yml** 文件里:\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/dp.png?raw=true)\n\n​\t打开文件后翻到最下边:\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/deploy.png?raw=true)\n\n​\t注意冒号后边需要加一个空格.\n\n​\t然后在根目录下执行如下命令(这里可以使用git bash):\n\n```git\n$ npm install hexo-deployer-git --save\n```\n\n​\t等结束以后执行以下命令,部署你的博客:\n\n```git\n$ hexo deploy\n```\n\n​\t注意,若你配置了SSH的话,这一步会弹出窗口要求你输入ssh密钥\n\n​\t如果一切顺利,此时你访问 **yourname.github.io** 就可以看到你的博客了.\n\n## 常用命令:\n\n​\t每次部署的步骤，可按以下三步来进行\n\n```git\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n```\n\n​\t一些常用命令:\n\n```git\n$ hexo new \"postName\" #新建文章\n$ hexo new page \"pageName\" #新建页面\n$ hexo generate #生成静态页面至public目录\n$ hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n$ hexo deploy #将.deploy目录部署到GitHub\n$ hexo help  #查看帮助\n$ hexo version  #查看Hexo的版本\n```\n\n### \t友情链接:\n\n- [潘柏信的博客](http://leopardpan.github.io)\n\n  ​\n\n\n","source":"_posts/利用Github与hexo搭建个人博客的简单步骤.md","raw":"---\ntitle: 利用Github与hexo搭建个人博客的简单步骤\ndate: 2017-09-21 13:14:25\ntags: hexo\ncategories: hexo\n---\n\n## \t导语\n\n> ​\t尽管个人博客的时代已经过去了,但是我想,能够拥有一个完全属于自己的blog,应该还算是一部分人想要做的事情.我会将我搭建这个博客的过程中踩过的坑都贴在下边,为他人提供借鉴.\n>\n> ​\t这里我使用了NexT的主题,简单明了,推荐给大家.一些针对此主题的配置我也会一一列举出来的.\n\n## 安装环境\n\n### 配置Github\n\n​\t[Github官网](https://github.com/)\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/github_sign.png?raw=true)\n\n​\t注册账号就不详细说了,然后是创建一个仓库\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/create_repo.png?raw=true)\n\n​\t然后新建仓库名字格式为\"yourname.github.io\", 注意将 yourname 换成你自己的名字\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/create_io.png?raw=true)\n\n​\t然后应该是配置SSH,这样以后你每次推送博客去网站的时候都需要输入Github账号密码,不过这一步可有可无,如果你感兴趣,可以Google一下具体操作,并不复杂,这里就再赘述了.\n\n​\t如果是前些年,配置好仓库之后还应该去settings里开启一下Github Pages,不过现在倒不必麻烦,GitHub一旦检测到你的仓库符合github.io的命名规范,会自动托管为HTML网站的.\n\n### 安装Git\n\n​\t[Git官网](https://git-scm.com/)\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/git_install.png?raw=true)\n\n​\t安装过程并不复杂,按照提示下一步就好了.\n\n### 安装Node.js\n\n​\t[Node.js官网](https://nodejs.org/en/)\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/node.png?raw=true)\n\n​\t安装好Node.js之后就可以使用npm命令了,首先我们可以验证一下上述环境是否准备完毕\n\n​\t按下\"win+X\"组合键,选择\"命令提示符(管理员)\",分别输入以下两条命令\n\n```cmd\ngit --version\n```\n\n```cmd\nnode -v\n```\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/cmd.png?raw=true)\n\n​\t如果出现上述结果,则表面环境已经正确搭建.\n\n\n\n## 安装和配置hexo\n\n​\t以下命令都是在终端里直接运行的:\n\n​\t使用npm安装hexo\n\n```cmd\nnpm install -g hexo-cli\n```\n\n​\t然后在你本地创建一个文件夹,起名为Hexo\n\n​\t然后cd到Hexo文件夹里,输入以下命令:\n\n```cmd\nhexo init\nhexo generate\n```\n\n​\t这边用了一位[博主](http://www.jianshu.com/p/863f3f2d1733)的截图\n\n![](https://raw.githubusercontent.com/CoderTian/CoderTian.github.io/master/2015/11/26/github-hexo-blog/firstcommond.png)\n\n​\t完成后Hexo文件夹内部的结构应该是这样的:\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/hexo.png?raw=true)\n\n​\t到这一步你已经可以在本地预览你的网站了,输入下面的命令开启本地服务:\n\n```cmd\nhexo server\n```\n\n### 常见的hexo配置错误及解决办法:\n\n```cmd\nERROR Plugin load failed: hexo-server\n原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.\n解决方法，执行命令: npm install hexo-server\n```\n\n```cmd\n执行命令hexo server，提示：Usage: hexo<Command> ....\n原因：我认为是没有生成本地服务\n解决方法，执行命令：$ npm install hexo-server --save\n提示：hexo-server@0.1.2 node_modules/hexo-server\n.... \n```\n\n## 启用主题NexT\n\n​\t这里附上[NexT主题的使用说明文档](http://theme-next.iissnan.com/getting-started.html)\n\n## 将博客部署到你的GitHub pages 上\n\n​\t首先我们需要进到Hexo文件夹根目录下的配置文件 **_config.yml** 文件里:\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/dp.png?raw=true)\n\n​\t打开文件后翻到最下边:\n\n![](https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/deploy.png?raw=true)\n\n​\t注意冒号后边需要加一个空格.\n\n​\t然后在根目录下执行如下命令(这里可以使用git bash):\n\n```git\n$ npm install hexo-deployer-git --save\n```\n\n​\t等结束以后执行以下命令,部署你的博客:\n\n```git\n$ hexo deploy\n```\n\n​\t注意,若你配置了SSH的话,这一步会弹出窗口要求你输入ssh密钥\n\n​\t如果一切顺利,此时你访问 **yourname.github.io** 就可以看到你的博客了.\n\n## 常用命令:\n\n​\t每次部署的步骤，可按以下三步来进行\n\n```git\n$ hexo clean\n$ hexo generate\n$ hexo deploy\n```\n\n​\t一些常用命令:\n\n```git\n$ hexo new \"postName\" #新建文章\n$ hexo new page \"pageName\" #新建页面\n$ hexo generate #生成静态页面至public目录\n$ hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n$ hexo deploy #将.deploy目录部署到GitHub\n$ hexo help  #查看帮助\n$ hexo version  #查看Hexo的版本\n```\n\n### \t友情链接:\n\n- [潘柏信的博客](http://leopardpan.github.io)\n\n  ​\n\n\n","slug":"利用Github与hexo搭建个人博客的简单步骤","published":1,"updated":"2017-09-21T06:48:13.609Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj8zgah2t000jnslfwygjei2n","content":"<h2 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语\"></a>导语</h2><blockquote>\n<p>​    尽管个人博客的时代已经过去了,但是我想,能够拥有一个完全属于自己的blog,应该还算是一部分人想要做的事情.我会将我搭建这个博客的过程中踩过的坑都贴在下边,为他人提供借鉴.</p>\n<p>​    这里我使用了NexT的主题,简单明了,推荐给大家.一些针对此主题的配置我也会一一列举出来的.</p>\n</blockquote>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><h3 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h3><p>​    <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github官网</a></p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/github_sign.png?raw=true\" alt=\"\"></p>\n<p>​    注册账号就不详细说了,然后是创建一个仓库</p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/create_repo.png?raw=true\" alt=\"\"></p>\n<p>​    然后新建仓库名字格式为”yourname.github.io”, 注意将 yourname 换成你自己的名字</p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/create_io.png?raw=true\" alt=\"\"></p>\n<p>​    然后应该是配置SSH,这样以后你每次推送博客去网站的时候都需要输入Github账号密码,不过这一步可有可无,如果你感兴趣,可以Google一下具体操作,并不复杂,这里就再赘述了.</p>\n<p>​    如果是前些年,配置好仓库之后还应该去settings里开启一下Github Pages,不过现在倒不必麻烦,GitHub一旦检测到你的仓库符合github.io的命名规范,会自动托管为HTML网站的.</p>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>​    <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git官网</a></p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/git_install.png?raw=true\" alt=\"\"></p>\n<p>​    安装过程并不复杂,按照提示下一步就好了.</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>​    <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js官网</a></p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/node.png?raw=true\" alt=\"\"></p>\n<p>​    安装好Node.js之后就可以使用npm命令了,首先我们可以验证一下上述环境是否准备完毕</p>\n<p>​    按下”win+X”组合键,选择”命令提示符(管理员)”,分别输入以下两条命令</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git --version</div></pre></td></tr></table></figure>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/cmd.png?raw=true\" alt=\"\"></p>\n<p>​    如果出现上述结果,则表面环境已经正确搭建.</p>\n<h2 id=\"安装和配置hexo\"><a href=\"#安装和配置hexo\" class=\"headerlink\" title=\"安装和配置hexo\"></a>安装和配置hexo</h2><p>​    以下命令都是在终端里直接运行的:</p>\n<p>​    使用npm安装hexo</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<p>​    然后在你本地创建一个文件夹,起名为Hexo</p>\n<p>​    然后cd到Hexo文件夹里,输入以下命令:</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<p>​    这边用了一位<a href=\"http://www.jianshu.com/p/863f3f2d1733\" target=\"_blank\" rel=\"external\">博主</a>的截图</p>\n<p><img src=\"https://raw.githubusercontent.com/CoderTian/CoderTian.github.io/master/2015/11/26/github-hexo-blog/firstcommond.png\" alt=\"\"></p>\n<p>​    完成后Hexo文件夹内部的结构应该是这样的:</p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/hexo.png?raw=true\" alt=\"\"></p>\n<p>​    到这一步你已经可以在本地预览你的网站了,输入下面的命令开启本地服务:</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h3 id=\"常见的hexo配置错误及解决办法\"><a href=\"#常见的hexo配置错误及解决办法\" class=\"headerlink\" title=\"常见的hexo配置错误及解决办法:\"></a>常见的hexo配置错误及解决办法:</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Plugin load failed: hexo-server</div><div class=\"line\">原因： Besides, utilities are separated into a standalone module. hexo.util is <span class=\"keyword\">not</span> reachable anymore.</div><div class=\"line\">解决方法，执行命令: npm install hexo-server</div></pre></td></tr></table></figure>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">执行命令hexo server，提示：Usage: hexo&lt;Command&gt; ....</div><div class=\"line\">原因：我认为是没有生成本地服务</div><div class=\"line\">解决方法，执行命令：$ npm install hexo-server --save</div><div class=\"line\">提示：hexo-server@<span class=\"number\">0</span>.<span class=\"number\">1</span>.<span class=\"number\">2</span> node_modules/hexo-server</div><div class=\"line\">....</div></pre></td></tr></table></figure>\n<h2 id=\"启用主题NexT\"><a href=\"#启用主题NexT\" class=\"headerlink\" title=\"启用主题NexT\"></a>启用主题NexT</h2><p>​    这里附上<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">NexT主题的使用说明文档</a></p>\n<h2 id=\"将博客部署到你的GitHub-pages-上\"><a href=\"#将博客部署到你的GitHub-pages-上\" class=\"headerlink\" title=\"将博客部署到你的GitHub pages 上\"></a>将博客部署到你的GitHub pages 上</h2><p>​    首先我们需要进到Hexo文件夹根目录下的配置文件 <strong>_config.yml</strong> 文件里:</p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/dp.png?raw=true\" alt=\"\"></p>\n<p>​    打开文件后翻到最下边:</p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/deploy.png?raw=true\" alt=\"\"></p>\n<p>​    注意冒号后边需要加一个空格.</p>\n<p>​    然后在根目录下执行如下命令(这里可以使用git bash):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>​    等结束以后执行以下命令,部署你的博客:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>​    注意,若你配置了SSH的话,这一步会弹出窗口要求你输入ssh密钥</p>\n<p>​    如果一切顺利,此时你访问 <strong>yourname.github.io</strong> 就可以看到你的博客了.</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令:\"></a>常用命令:</h2><p>​    每次部署的步骤，可按以下三步来进行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>​    一些常用命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new &quot;postName&quot; #新建文章</div><div class=\"line\">$ hexo new page &quot;pageName&quot; #新建页面</div><div class=\"line\">$ hexo generate #生成静态页面至public目录</div><div class=\"line\">$ hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class=\"line\">$ hexo deploy #将.deploy目录部署到GitHub</div><div class=\"line\">$ hexo help  #查看帮助</div><div class=\"line\">$ hexo version  #查看Hexo的版本</div></pre></td></tr></table></figure>\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接:\"></a>友情链接:</h3><ul>\n<li><p><a href=\"http://leopardpan.github.io\" target=\"_blank\" rel=\"external\">潘柏信的博客</a></p>\n<p>​</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"导语\"><a href=\"#导语\" class=\"headerlink\" title=\"导语\"></a>导语</h2><blockquote>\n<p>​    尽管个人博客的时代已经过去了,但是我想,能够拥有一个完全属于自己的blog,应该还算是一部分人想要做的事情.我会将我搭建这个博客的过程中踩过的坑都贴在下边,为他人提供借鉴.</p>\n<p>​    这里我使用了NexT的主题,简单明了,推荐给大家.一些针对此主题的配置我也会一一列举出来的.</p>\n</blockquote>\n<h2 id=\"安装环境\"><a href=\"#安装环境\" class=\"headerlink\" title=\"安装环境\"></a>安装环境</h2><h3 id=\"配置Github\"><a href=\"#配置Github\" class=\"headerlink\" title=\"配置Github\"></a>配置Github</h3><p>​    <a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">Github官网</a></p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/github_sign.png?raw=true\" alt=\"\"></p>\n<p>​    注册账号就不详细说了,然后是创建一个仓库</p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/create_repo.png?raw=true\" alt=\"\"></p>\n<p>​    然后新建仓库名字格式为”yourname.github.io”, 注意将 yourname 换成你自己的名字</p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/create_io.png?raw=true\" alt=\"\"></p>\n<p>​    然后应该是配置SSH,这样以后你每次推送博客去网站的时候都需要输入Github账号密码,不过这一步可有可无,如果你感兴趣,可以Google一下具体操作,并不复杂,这里就再赘述了.</p>\n<p>​    如果是前些年,配置好仓库之后还应该去settings里开启一下Github Pages,不过现在倒不必麻烦,GitHub一旦检测到你的仓库符合github.io的命名规范,会自动托管为HTML网站的.</p>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>​    <a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"external\">Git官网</a></p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/git_install.png?raw=true\" alt=\"\"></p>\n<p>​    安装过程并不复杂,按照提示下一步就好了.</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a>安装Node.js</h3><p>​    <a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">Node.js官网</a></p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/node.png?raw=true\" alt=\"\"></p>\n<p>​    安装好Node.js之后就可以使用npm命令了,首先我们可以验证一下上述环境是否准备完毕</p>\n<p>​    按下”win+X”组合键,选择”命令提示符(管理员)”,分别输入以下两条命令</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git --version</div></pre></td></tr></table></figure>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">node -v</div></pre></td></tr></table></figure>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/cmd.png?raw=true\" alt=\"\"></p>\n<p>​    如果出现上述结果,则表面环境已经正确搭建.</p>\n<h2 id=\"安装和配置hexo\"><a href=\"#安装和配置hexo\" class=\"headerlink\" title=\"安装和配置hexo\"></a>安装和配置hexo</h2><p>​    以下命令都是在终端里直接运行的:</p>\n<p>​    使用npm安装hexo</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install -g hexo-cli</div></pre></td></tr></table></figure>\n<p>​    然后在你本地创建一个文件夹,起名为Hexo</p>\n<p>​    然后cd到Hexo文件夹里,输入以下命令:</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo init</div><div class=\"line\">hexo generate</div></pre></td></tr></table></figure>\n<p>​    这边用了一位<a href=\"http://www.jianshu.com/p/863f3f2d1733\" target=\"_blank\" rel=\"external\">博主</a>的截图</p>\n<p><img src=\"https://raw.githubusercontent.com/CoderTian/CoderTian.github.io/master/2015/11/26/github-hexo-blog/firstcommond.png\" alt=\"\"></p>\n<p>​    完成后Hexo文件夹内部的结构应该是这样的:</p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/hexo.png?raw=true\" alt=\"\"></p>\n<p>​    到这一步你已经可以在本地预览你的网站了,输入下面的命令开启本地服务:</p>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server</div></pre></td></tr></table></figure>\n<h3 id=\"常见的hexo配置错误及解决办法\"><a href=\"#常见的hexo配置错误及解决办法\" class=\"headerlink\" title=\"常见的hexo配置错误及解决办法:\"></a>常见的hexo配置错误及解决办法:</h3><figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ERROR Plugin load failed: hexo-server</div><div class=\"line\">原因： Besides, utilities are separated into a standalone module. hexo.util is <span class=\"keyword\">not</span> reachable anymore.</div><div class=\"line\">解决方法，执行命令: npm install hexo-server</div></pre></td></tr></table></figure>\n<figure class=\"highlight cmd\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">执行命令hexo server，提示：Usage: hexo&lt;Command&gt; ....</div><div class=\"line\">原因：我认为是没有生成本地服务</div><div class=\"line\">解决方法，执行命令：$ npm install hexo-server --save</div><div class=\"line\">提示：hexo-server@<span class=\"number\">0</span>.<span class=\"number\">1</span>.<span class=\"number\">2</span> node_modules/hexo-server</div><div class=\"line\">....</div></pre></td></tr></table></figure>\n<h2 id=\"启用主题NexT\"><a href=\"#启用主题NexT\" class=\"headerlink\" title=\"启用主题NexT\"></a>启用主题NexT</h2><p>​    这里附上<a href=\"http://theme-next.iissnan.com/getting-started.html\" target=\"_blank\" rel=\"external\">NexT主题的使用说明文档</a></p>\n<h2 id=\"将博客部署到你的GitHub-pages-上\"><a href=\"#将博客部署到你的GitHub-pages-上\" class=\"headerlink\" title=\"将博客部署到你的GitHub pages 上\"></a>将博客部署到你的GitHub pages 上</h2><p>​    首先我们需要进到Hexo文件夹根目录下的配置文件 <strong>_config.yml</strong> 文件里:</p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/dp.png?raw=true\" alt=\"\"></p>\n<p>​    打开文件后翻到最下边:</p>\n<p><img src=\"https://github.com/CREEPERDCH/MarkdownPic/blob/master/%E5%88%A9%E7%94%A8Github%E4%B8%8Ehexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E7%AE%80%E5%8D%95%E6%AD%A5%E9%AA%A4/deploy.png?raw=true\" alt=\"\"></p>\n<p>​    注意冒号后边需要加一个空格.</p>\n<p>​    然后在根目录下执行如下命令(这里可以使用git bash):</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n<p>​    等结束以后执行以下命令,部署你的博客:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>​    注意,若你配置了SSH的话,这一步会弹出窗口要求你输入ssh密钥</p>\n<p>​    如果一切顺利,此时你访问 <strong>yourname.github.io</strong> 就可以看到你的博客了.</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令:\"></a>常用命令:</h2><p>​    每次部署的步骤，可按以下三步来进行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo clean</div><div class=\"line\">$ hexo generate</div><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>​    一些常用命令:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new &quot;postName&quot; #新建文章</div><div class=\"line\">$ hexo new page &quot;pageName&quot; #新建页面</div><div class=\"line\">$ hexo generate #生成静态页面至public目录</div><div class=\"line\">$ hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</div><div class=\"line\">$ hexo deploy #将.deploy目录部署到GitHub</div><div class=\"line\">$ hexo help  #查看帮助</div><div class=\"line\">$ hexo version  #查看Hexo的版本</div></pre></td></tr></table></figure>\n<h3 id=\"友情链接\"><a href=\"#友情链接\" class=\"headerlink\" title=\"友情链接:\"></a>友情链接:</h3><ul>\n<li><p><a href=\"http://leopardpan.github.io\" target=\"_blank\" rel=\"external\">潘柏信的博客</a></p>\n<p>​</p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj8zgagyd0001nslfbaq4qj9s","category_id":"cj8zgagyx0003nslfsx9090js","_id":"cj8zgagyx0007nslfdngteml9"},{"post_id":"cj8zgagyp0002nslfd8kx2z6d","category_id":"cj8zgagyx0005nslfehymvo49","_id":"cj8zgagz50008nslfkp88vas9"},{"post_id":"cj8zgah290009nslf8vfifd4x","category_id":"cj8zgagyx0003nslfsx9090js","_id":"cj8zgah2q000inslfgkw16561"},{"post_id":"cj8zgah2o000hnslfy1ccpb1n","category_id":"cj8zgagyx0003nslfsx9090js","_id":"cj8zgah2y000nnslfj7q40qyt"},{"post_id":"cj8zgah2d000bnslf135pyod8","category_id":"cj8zgah2o000gnslf2n5ipvv4","_id":"cj8zgah2z000pnslf3ripulwu"},{"post_id":"cj8zgah2k000enslf32ldb9k5","category_id":"cj8zgah2x000mnslfq4x6g06s","_id":"cj8zgah3e000tnslff0nqhn45"},{"post_id":"cj8zgah2t000jnslfwygjei2n","category_id":"cj8zgah30000rnslf07p6s2p4","_id":"cj8zgah3f000vnslfuomdj3aq"}],"PostTag":[{"post_id":"cj8zgagyp0002nslfd8kx2z6d","tag_id":"cj8zgagyx0004nslfkkjyznul","_id":"cj8zgagyx0006nslf0z18x17s"},{"post_id":"cj8zgah290009nslf8vfifd4x","tag_id":"cj8zgah2j000dnslf2eux6jz2","_id":"cj8zgah2w000lnslfeyz4pzgs"},{"post_id":"cj8zgah2d000bnslf135pyod8","tag_id":"cj8zgah2v000knslf0tejrylj","_id":"cj8zgah2z000qnslft3gdcaj5"},{"post_id":"cj8zgah2k000enslf32ldb9k5","tag_id":"cj8zgah2y000onslfp004i0jt","_id":"cj8zgah3e000unslfvjy1g900"},{"post_id":"cj8zgah2t000jnslfwygjei2n","tag_id":"cj8zgah3d000snslf6sxlmdrw","_id":"cj8zgah3f000wnslfcsn1xao6"}],"Tag":[{"name":"markdown","_id":"cj8zgagyx0004nslfkkjyznul"},{"name":"android","_id":"cj8zgah2j000dnslf2eux6jz2"},{"name":"java","_id":"cj8zgah2v000knslf0tejrylj"},{"name":"阿西莫夫","_id":"cj8zgah2y000onslfp004i0jt"},{"name":"hexo","_id":"cj8zgah3d000snslf6sxlmdrw"}]}}